++ dirname ./magiclang.sh
+ ROOT=.
+ '[' 7 -lt 1 ']'
+ '[' -z x ']'
+ '[' x '!=' x ']'
+ OUTDIR=./build
+ mkdir -p ./build
+ SOEXT=so
++ uname -s
+ '[' Darwin = Darwin ']'
+ SOEXT=dylib
+ CLANG=/opt/llvm-4.0-d/bin/clang
+ OPT=/opt/llvm-4.0-d/bin/opt
+ LLC=/opt/llvm-4.0-d/bin/llc
+ PASSLIB=./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib
+ '[' '!' -e ./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib ']'
++ echo atax_out
++ sed -E 's/\.[^\.]$//'
+ OUTNAME=atax_out
++ /opt/llvm-4.0-d/bin/opt --version
++ wc -l
++ grep DEBUG
+ ISDEBUG='       1'
+ DEBUGONLYFLAG=-debug-only=flttofix
+ '[' 1 '!=' 1 ']'
+ /opt/llvm-4.0-d/bin/clang -S -emit-llvm linear-algebra/kernels/atax/atax.c -o ./build/_tmp0.atax_out.ll -I utilities -I linear-algebra/kernels/atax -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS
linear-algebra/kernels/atax/atax.c:28:50: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                 DATA_TYPE POLYBENCH_1D(x,N,n)) __attribute__((always_inline))
                                                               ^
linear-algebra/kernels/atax/atax.c:32:9: warning: 'annotate' attribute ignored when parsing type [-Wignored-attributes]
  fn = (DATA_TYPE)n;
        ^~~~~~~~~
linear-algebra/kernels/atax/atax.h:72:36: note: expanded from macro 'DATA_TYPE'
#  define DATA_TYPE __attribute__((annotate("no_float"))) double
                                   ^~~~~~~~~~~~~~~~~~~~
linear-algebra/kernels/atax/atax.c:38:18: warning: 'annotate' attribute ignored when parsing type [-Wignored-attributes]
      A[i][j] = (DATA_TYPE) ((i+j) % n) / (5*m);
                 ^~~~~~~~~
linear-algebra/kernels/atax/atax.h:72:36: note: expanded from macro 'DATA_TYPE'
#  define DATA_TYPE __attribute__((annotate("no_float"))) double
                                   ^~~~~~~~~~~~~~~~~~~~
linear-algebra/kernels/atax/atax.c:46:50: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                 DATA_TYPE POLYBENCH_1D(y,N,n)) __attribute__((always_inline))
                                                               ^
linear-algebra/kernels/atax/atax.c:69:52: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                 DATA_TYPE POLYBENCH_1D(tmp,M,m)) __attribute__((always_inline))
                                                                 ^
5 warnings generated.
+ '[' x '!=' x ']'
+ /opt/llvm-4.0-d/bin/opt -load=./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib -pass-remarks=flttofix -S -flttofix -dce -debug-only=flttofix ./build/_tmp0.atax_out.ll -o ./build/_tmp1.atax_out.ll -fixpfracbitsamt=31 -fixpbitsamt=64
conversion queue:
[  %A = alloca [390 x [410 x double]], align 16 ]   %A = alloca [390 x [410 x double]], align 16
[  %x = alloca [410 x double], align 16 ]   %x = alloca [410 x double], align 16
[  %y = alloca [410 x double], align 16 ]   %y = alloca [410 x double], align 16
[  %tmp = alloca [390 x double], align 16 ]   %tmp = alloca [390 x double], align 16
[  %A.addr.i = alloca [410 x double]*, align 8 ]   %A.addr.i = alloca [410 x double]*, align 8
[  %x.addr.i = alloca double*, align 8 ]   %x.addr.i = alloca double*, align 8
[  %fn.i = alloca double, align 8 ]   %fn.i = alloca double, align 8
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %A.addr.i23 = alloca [410 x double]*, align 8
[  %x.addr.i24 = alloca double*, align 8 ]   %x.addr.i24 = alloca double*, align 8
[  %y.addr.i25 = alloca double*, align 8 ]   %y.addr.i25 = alloca double*, align 8
[  %tmp.addr.i = alloca double*, align 8 ]   %tmp.addr.i = alloca double*, align 8
[  %y.addr.i = alloca double*, align 8 ]   %y.addr.i = alloca double*, align 8
[  %A = alloca [390 x [410 x double]], align 16 ]   %arraydecay6 = getelementptr inbounds [390 x [410 x double]], [390 x [410 x double]]* %A, i32 0, i32 0
[  %A = alloca [390 x [410 x double]], align 16 ]   %arraydecay = getelementptr inbounds [390 x [410 x double]], [390 x [410 x double]]* %A, i32 0, i32 0
[  %A = alloca [390 x [410 x double]], align 16 ]   %A1 = bitcast [390 x [410 x double]]* %A to i8*
[  %x = alloca [410 x double], align 16 ]   %arraydecay7 = getelementptr inbounds [410 x double], [410 x double]* %x, i32 0, i32 0
[  %x = alloca [410 x double], align 16 ]   %arraydecay5 = getelementptr inbounds [410 x double], [410 x double]* %x, i32 0, i32 0
[  %x = alloca [410 x double], align 16 ]   %x2 = bitcast [410 x double]* %x to i8*
[  %y = alloca [410 x double], align 16 ]   %arraydecay10 = getelementptr inbounds [410 x double], [410 x double]* %y, i32 0, i32 0
[  %y = alloca [410 x double], align 16 ]   %arraydecay8 = getelementptr inbounds [410 x double], [410 x double]* %y, i32 0, i32 0
[  %y = alloca [410 x double], align 16 ]   %y3 = bitcast [410 x double]* %y to i8*
[  %tmp = alloca [390 x double], align 16 ]   %arraydecay9 = getelementptr inbounds [390 x double], [390 x double]* %tmp, i32 0, i32 0
[  %tmp = alloca [390 x double], align 16 ]   %tmp4 = bitcast [390 x double]* %tmp to i8*
[  %A.addr.i = alloca [410 x double]*, align 8 ]   %18 = load [410 x double]*, [410 x double]** %A.addr.i, align 8
[  %A.addr.i = alloca [410 x double]*, align 8 ]   %A.addr1.i = bitcast [410 x double]** %A.addr.i to i8*
[  %x.addr.i = alloca double*, align 8 ]   %7 = load double*, double** %x.addr.i, align 8
[  %x.addr.i = alloca double*, align 8 ]   %x.addr2.i = bitcast double** %x.addr.i to i8*
[  %fn.i = alloca double, align 8 ]   %6 = load double, double* %fn.i, align 8
[  %fn.i = alloca double, align 8 ]   store double %conv.i, double* %fn.i, align 8
[  %fn.i = alloca double, align 8 ]   %fn3.i = bitcast double* %fn.i to i8*
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %54 = load [410 x double]*, [410 x double]** %A.addr.i23, align 8
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %39 = load [410 x double]*, [410 x double]** %A.addr.i23, align 8
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %A.addr1.i28 = bitcast [410 x double]** %A.addr.i23 to i8*
[  %x.addr.i24 = alloca double*, align 8 ]   %43 = load double*, double** %x.addr.i24, align 8
[  %x.addr.i24 = alloca double*, align 8 ]   %x.addr2.i29 = bitcast double** %x.addr.i24 to i8*
[  %y.addr.i25 = alloca double*, align 8 ]   %61 = load double*, double** %y.addr.i25, align 8
[  %y.addr.i25 = alloca double*, align 8 ]   %51 = load double*, double** %y.addr.i25, align 8
[  %y.addr.i25 = alloca double*, align 8 ]   %27 = load double*, double** %y.addr.i25, align 8
[  %y.addr.i25 = alloca double*, align 8 ]   %y.addr3.i = bitcast double** %y.addr.i25 to i8*
[  %tmp.addr.i = alloca double*, align 8 ]   %58 = load double*, double** %tmp.addr.i, align 8
[  %tmp.addr.i = alloca double*, align 8 ]   %46 = load double*, double** %tmp.addr.i, align 8
[  %tmp.addr.i = alloca double*, align 8 ]   %36 = load double*, double** %tmp.addr.i, align 8
[]   %32 = load double*, double** %tmp.addr.i, align 8
[]   %tmp.addr4.i = bitcast double** %tmp.addr.i to i8*
[  %y.addr.i = alloca double*, align 8 ]   %71 = load double*, double** %y.addr.i, align 8
[  %y.addr.i = alloca double*, align 8 ]   %y.addr1.i = bitcast double** %y.addr.i to i8*
[  %A = alloca [390 x [410 x double]], align 16   %A.addr.i23 = alloca [410 x double]*, align 8 ]   store [410 x double]* %arraydecay6, [410 x double]** %A.addr.i23, align 8
[  %A = alloca [390 x [410 x double]], align 16   %A.addr.i = alloca [410 x double]*, align 8 ]   store [410 x double]* %arraydecay, [410 x double]** %A.addr.i, align 8
[  %A = alloca [390 x [410 x double]], align 16 ]   call void @llvm.var.annotation(i8* %A1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 96)
[  %x = alloca [410 x double], align 16   %x.addr.i24 = alloca double*, align 8 ]   store double* %arraydecay7, double** %x.addr.i24, align 8
[  %x = alloca [410 x double], align 16   %x.addr.i = alloca double*, align 8 ]   store double* %arraydecay5, double** %x.addr.i, align 8
[  %x = alloca [410 x double], align 16 ]   call void @llvm.var.annotation(i8* %x2, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 97)
[  %y = alloca [410 x double], align 16   %y.addr.i = alloca double*, align 8 ]   store double* %arraydecay10, double** %y.addr.i, align 8
[  %y = alloca [410 x double], align 16   %y.addr.i25 = alloca double*, align 8 ]   store double* %arraydecay8, double** %y.addr.i25, align 8
[  %y = alloca [410 x double], align 16 ]   call void @llvm.var.annotation(i8* %y3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 98)
[  %tmp = alloca [390 x double], align 16 ]   store double* %arraydecay9, double** %tmp.addr.i, align 8
[  %tmp = alloca [390 x double], align 16 ]   call void @llvm.var.annotation(i8* %tmp4, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 99)
[  %A.addr.i = alloca [410 x double]*, align 8 ]   %arrayidx19.i = getelementptr inbounds [410 x double], [410 x double]* %18, i64 %idxprom18.i
[  %A.addr.i = alloca [410 x double]*, align 8 ]   call void @llvm.var.annotation(i8* %A.addr1.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 27) #1
[  %x.addr.i = alloca double*, align 8 ]   %arrayidx.i = getelementptr inbounds double, double* %7, i64 %idxprom.i
[  %x.addr.i = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %x.addr2.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 28) #1
[  %fn.i = alloca double, align 8 ]   %div.i = fdiv double %conv5.i, %6
[  %fn.i = alloca double, align 8 ]   call void @llvm.var.annotation(i8* %fn3.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 31) #1
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %arrayidx34.i = getelementptr inbounds [410 x double], [410 x double]* %54, i64 %idxprom33.i
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %arrayidx18.i = getelementptr inbounds [410 x double], [410 x double]* %39, i64 %idxprom17.i
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   call void @llvm.var.annotation(i8* %A.addr1.i28, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 66) #1
[  %x.addr.i24 = alloca double*, align 8 ]   %arrayidx22.i = getelementptr inbounds double, double* %43, i64 %idxprom21.i
[  %x.addr.i24 = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %x.addr2.i29, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 67) #1
[  %y.addr.i25 = alloca double*, align 8 ]   %arrayidx42.i = getelementptr inbounds double, double* %61, i64 %idxprom41.i
[  %y.addr.i25 = alloca double*, align 8 ]   %arrayidx32.i = getelementptr inbounds double, double* %51, i64 %idxprom31.i
[  %y.addr.i25 = alloca double*, align 8 ]   %arrayidx.i33 = getelementptr inbounds double, double* %27, i64 %idxprom.i32
[  %y.addr.i25 = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %y.addr3.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 68) #1
[  %tmp.addr.i = alloca double*, align 8 ]   %arrayidx38.i = getelementptr inbounds double, double* %58, i64 %idxprom37.i
[  %tmp.addr.i = alloca double*, align 8 ]   %arrayidx24.i = getelementptr inbounds double, double* %46, i64 %idxprom23.i
[  %tmp.addr.i = alloca double*, align 8 ]   %arrayidx16.i = getelementptr inbounds double, double* %36, i64 %idxprom15.i
[]   %arrayidx11.i = getelementptr inbounds double, double* %32, i64 %idxprom10.i
[]   call void @llvm.var.annotation(i8* %tmp.addr4.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 69) #1
[  %y.addr.i = alloca double*, align 8 ]   %arrayidx.i18 = getelementptr inbounds double, double* %71, i64 %idxprom.i17
[  %y.addr.i = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %y.addr1.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 46) #1
[  %A.addr.i = alloca [410 x double]*, align 8 ]   %arrayidx21.i = getelementptr inbounds [410 x double], [410 x double]* %arrayidx19.i, i64 0, i64 %idxprom20.i
[  %fn.i = alloca double, align 8 ]   %add.i = fadd double 1.000000e+00, %div.i
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %arrayidx36.i = getelementptr inbounds [410 x double], [410 x double]* %arrayidx34.i, i64 0, i64 %idxprom35.i
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %arrayidx20.i = getelementptr inbounds [410 x double], [410 x double]* %arrayidx18.i, i64 0, i64 %idxprom19.i
[  %x.addr.i24 = alloca double*, align 8 ]   %45 = load double, double* %arrayidx22.i, align 8
[  %y.addr.i25 = alloca double*, align 8 ]   %53 = load double, double* %arrayidx32.i, align 8
[  %y.addr.i25 = alloca double*, align 8 ]   store double 0.000000e+00, double* %arrayidx.i33, align 8
[  %tmp.addr.i = alloca double*, align 8 ]   %60 = load double, double* %arrayidx38.i, align 8
[  %tmp.addr.i = alloca double*, align 8 ]   %38 = load double, double* %arrayidx16.i, align 8
[]   store double 0.000000e+00, double* %arrayidx11.i, align 8
[  %y.addr.i = alloca double*, align 8 ]   %73 = load double, double* %arrayidx.i18, align 8
[  %A.addr.i = alloca [410 x double]*, align 8 ]   store double %div17.i, double* %arrayidx21.i, align 8
[  %fn.i = alloca double, align 8   %x.addr.i = alloca double*, align 8 ]   store double %add.i, double* %arrayidx.i, align 8
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %57 = load double, double* %arrayidx36.i, align 8
[]   %42 = load double, double* %arrayidx20.i, align 8
[  %y.addr.i = alloca double*, align 8 ]   %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %70, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %73) #1
[  %A.addr.i23 = alloca [410 x double]*, align 8   %tmp.addr.i = alloca double*, align 8 ]   %mul39.i = fmul double %57, %60
[  %x.addr.i24 = alloca double*, align 8 ]   %mul.i38 = fmul double %42, %45
[  %A.addr.i23 = alloca [410 x double]*, align 8   %tmp.addr.i = alloca double*, align 8   %y.addr.i25 = alloca double*, align 8 ]   %add40.i = fadd double %53, %mul39.i
[  %x.addr.i24 = alloca double*, align 8   %tmp.addr.i = alloca double*, align 8 ]   %add.i39 = fadd double %38, %mul.i38
[  %A.addr.i23 = alloca [410 x double]*, align 8   %tmp.addr.i = alloca double*, align 8   %y.addr.i25 = alloca double*, align 8 ]   store double %add40.i, double* %arrayidx42.i, align 8
[  %x.addr.i24 = alloca double*, align 8   %tmp.addr.i = alloca double*, align 8 ]   store double %add.i39, double* %arrayidx24.i, align 8


[Fallback] attempt to wrap not supported operation:
  %A1 = bitcast [390 x [410 x double]]* %A to i8*
  bail out on missing operand 1 of 1
warning:   %A1 = bitcast [390 x [410 x double]]* %A to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %x2 = bitcast [410 x double]* %x to i8*
  bail out on missing operand 1 of 1
warning:   %x2 = bitcast [410 x double]* %x to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y3 = bitcast [410 x double]* %y to i8*
  bail out on missing operand 1 of 1
warning:   %y3 = bitcast [410 x double]* %y to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %tmp4 = bitcast [390 x double]* %tmp to i8*
  bail out on missing operand 1 of 1
warning:   %tmp4 = bitcast [390 x double]* %tmp to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %A.addr1.i = bitcast [410 x double]** %A.addr.i to i8*
  bail out on missing operand 1 of 1
warning:   %A.addr1.i = bitcast [410 x double]** %A.addr.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %x.addr2.i = bitcast double** %x.addr.i to i8*
  bail out on missing operand 1 of 1
warning:   %x.addr2.i = bitcast double** %x.addr.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %fn3.i = bitcast double* %fn.i to i8*
  bail out on missing operand 1 of 1
warning:   %fn3.i = bitcast double* %fn.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %A.addr1.i28 = bitcast [410 x double]** %A.addr.i23 to i8*
  bail out on missing operand 1 of 1
warning:   %A.addr1.i28 = bitcast [410 x double]** %A.addr.i23 to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %x.addr2.i29 = bitcast double** %x.addr.i24 to i8*
  bail out on missing operand 1 of 1
warning:   %x.addr2.i29 = bitcast double** %x.addr.i24 to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y.addr3.i = bitcast double** %y.addr.i25 to i8*
  bail out on missing operand 1 of 1
warning:   %y.addr3.i = bitcast double** %y.addr.i25 to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %tmp.addr4.i = bitcast double** %tmp.addr.i to i8*
  bail out on missing operand 1 of 1
warning:   %tmp.addr4.i = bitcast double** %tmp.addr.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y.addr1.i = bitcast double** %y.addr.i to i8*
  bail out on missing operand 1 of 1
warning:   %y.addr1.i = bitcast double** %y.addr.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %123, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %128) #1
  Substituted operand number : 3 of 4
  mutated operands to:
  %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %123, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %131) #1
+ /opt/llvm-4.0-d/bin/clang -S -o ./build/_tmp2.atax_out.s ./build/_tmp1.atax_out.ll -O3 -I utilities -I linear-algebra/kernels/atax -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS
clang-4.0: warning: argument unused during compilation: '-I utilities' [-Wunused-command-line-argument]
clang-4.0: warning: argument unused during compilation: '-I linear-algebra/kernels/atax' [-Wunused-command-line-argument]
+ /opt/llvm-4.0-d/bin/clang -o ./build/atax_out ./build/_tmp2.atax_out.s -O3 -I utilities -I linear-algebra/kernels/atax -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS -lm utilities/polybench.c
+ '[' x '!=' x ']'
+ /opt/llvm-4.0-d/bin/clang -S -o ./build/_tmp2_not_opt.atax_out.s ./build/_tmp0.atax_out.ll -O3 -I utilities -I linear-algebra/kernels/atax -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS
clang-4.0: warning: argument unused during compilation: '-I utilities' [-Wunused-command-line-argument]
clang-4.0: warning: argument unused during compilation: '-I linear-algebra/kernels/atax' [-Wunused-command-line-argument]
+ /opt/llvm-4.0-d/bin/clang -o ./build/atax_out_not_opt ./build/_tmp2_not_opt.atax_out.s -O3 -I utilities -I linear-algebra/kernels/atax -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS -lm utilities/polybench.c
++ dirname ./magiclang.sh
+ ROOT=.
+ '[' 7 -lt 1 ']'
+ '[' -z x ']'
+ '[' x '!=' x ']'
+ OUTDIR=./build
+ mkdir -p ./build
+ SOEXT=so
++ uname -s
+ '[' Darwin = Darwin ']'
+ SOEXT=dylib
+ CLANG=/opt/llvm-4.0-d/bin/clang
+ OPT=/opt/llvm-4.0-d/bin/opt
+ LLC=/opt/llvm-4.0-d/bin/llc
+ PASSLIB=./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib
+ '[' '!' -e ./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib ']'
++ echo atax_out
++ sed -E 's/\.[^\.]$//'
+ OUTNAME=atax_out
++ /opt/llvm-4.0-d/bin/opt --version
++ grep DEBUG
++ wc -l
+ ISDEBUG='       1'
+ DEBUGONLYFLAG=-debug-only=flttofix
+ '[' 1 '!=' 1 ']'
+ /opt/llvm-4.0-d/bin/clang -S -emit-llvm linear-algebra/kernels/atax/atax.c -o ./build/_tmp0.atax_out.ll -I utilities -I linear-algebra/kernels/atax -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS
linear-algebra/kernels/atax/atax.c:28:50: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                 DATA_TYPE POLYBENCH_1D(x,N,n)) __attribute__((always_inline))
                                                               ^
linear-algebra/kernels/atax/atax.c:32:9: warning: 'annotate' attribute ignored when parsing type [-Wignored-attributes]
  fn = (DATA_TYPE)n;
        ^~~~~~~~~
linear-algebra/kernels/atax/atax.h:72:36: note: expanded from macro 'DATA_TYPE'
#  define DATA_TYPE __attribute__((annotate("no_float"))) double
                                   ^~~~~~~~~~~~~~~~~~~~
linear-algebra/kernels/atax/atax.c:38:18: warning: 'annotate' attribute ignored when parsing type [-Wignored-attributes]
      A[i][j] = (DATA_TYPE) ((i+j) % n) / (5*m);
                 ^~~~~~~~~
linear-algebra/kernels/atax/atax.h:72:36: note: expanded from macro 'DATA_TYPE'
#  define DATA_TYPE __attribute__((annotate("no_float"))) double
                                   ^~~~~~~~~~~~~~~~~~~~
linear-algebra/kernels/atax/atax.c:46:50: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                 DATA_TYPE POLYBENCH_1D(y,N,n)) __attribute__((always_inline))
                                                               ^
linear-algebra/kernels/atax/atax.c:69:52: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                 DATA_TYPE POLYBENCH_1D(tmp,M,m)) __attribute__((always_inline))
                                                                 ^
5 warnings generated.
+ '[' x '!=' x ']'
+ /opt/llvm-4.0-d/bin/opt -load=./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib -pass-remarks=flttofix -S -flttofix -dce -debug-only=flttofix ./build/_tmp0.atax_out.ll -o ./build/_tmp1.atax_out.ll -fixpfracbitsamt=47 -fixpbitsamt=64
conversion queue:
[  %A = alloca [390 x [410 x double]], align 16 ]   %A = alloca [390 x [410 x double]], align 16
[  %x = alloca [410 x double], align 16 ]   %x = alloca [410 x double], align 16
[  %y = alloca [410 x double], align 16 ]   %y = alloca [410 x double], align 16
[  %tmp = alloca [390 x double], align 16 ]   %tmp = alloca [390 x double], align 16
[  %A.addr.i = alloca [410 x double]*, align 8 ]   %A.addr.i = alloca [410 x double]*, align 8
[  %x.addr.i = alloca double*, align 8 ]   %x.addr.i = alloca double*, align 8
[  %fn.i = alloca double, align 8 ]   %fn.i = alloca double, align 8
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %A.addr.i23 = alloca [410 x double]*, align 8
[  %x.addr.i24 = alloca double*, align 8 ]   %x.addr.i24 = alloca double*, align 8
[  %y.addr.i25 = alloca double*, align 8 ]   %y.addr.i25 = alloca double*, align 8
[  %tmp.addr.i = alloca double*, align 8 ]   %tmp.addr.i = alloca double*, align 8
[  %y.addr.i = alloca double*, align 8 ]   %y.addr.i = alloca double*, align 8
[  %A = alloca [390 x [410 x double]], align 16 ]   %arraydecay6 = getelementptr inbounds [390 x [410 x double]], [390 x [410 x double]]* %A, i32 0, i32 0
[  %A = alloca [390 x [410 x double]], align 16 ]   %arraydecay = getelementptr inbounds [390 x [410 x double]], [390 x [410 x double]]* %A, i32 0, i32 0
[  %A = alloca [390 x [410 x double]], align 16 ]   %A1 = bitcast [390 x [410 x double]]* %A to i8*
[  %x = alloca [410 x double], align 16 ]   %arraydecay7 = getelementptr inbounds [410 x double], [410 x double]* %x, i32 0, i32 0
[  %x = alloca [410 x double], align 16 ]   %arraydecay5 = getelementptr inbounds [410 x double], [410 x double]* %x, i32 0, i32 0
[  %x = alloca [410 x double], align 16 ]   %x2 = bitcast [410 x double]* %x to i8*
[  %y = alloca [410 x double], align 16 ]   %arraydecay10 = getelementptr inbounds [410 x double], [410 x double]* %y, i32 0, i32 0
[  %y = alloca [410 x double], align 16 ]   %arraydecay8 = getelementptr inbounds [410 x double], [410 x double]* %y, i32 0, i32 0
[  %y = alloca [410 x double], align 16 ]   %y3 = bitcast [410 x double]* %y to i8*
[  %tmp = alloca [390 x double], align 16 ]   %arraydecay9 = getelementptr inbounds [390 x double], [390 x double]* %tmp, i32 0, i32 0
[  %tmp = alloca [390 x double], align 16 ]   %tmp4 = bitcast [390 x double]* %tmp to i8*
[  %A.addr.i = alloca [410 x double]*, align 8 ]   %18 = load [410 x double]*, [410 x double]** %A.addr.i, align 8
[  %A.addr.i = alloca [410 x double]*, align 8 ]   %A.addr1.i = bitcast [410 x double]** %A.addr.i to i8*
[  %x.addr.i = alloca double*, align 8 ]   %7 = load double*, double** %x.addr.i, align 8
[  %x.addr.i = alloca double*, align 8 ]   %x.addr2.i = bitcast double** %x.addr.i to i8*
[  %fn.i = alloca double, align 8 ]   %6 = load double, double* %fn.i, align 8
[  %fn.i = alloca double, align 8 ]   store double %conv.i, double* %fn.i, align 8
[  %fn.i = alloca double, align 8 ]   %fn3.i = bitcast double* %fn.i to i8*
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %54 = load [410 x double]*, [410 x double]** %A.addr.i23, align 8
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %39 = load [410 x double]*, [410 x double]** %A.addr.i23, align 8
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %A.addr1.i28 = bitcast [410 x double]** %A.addr.i23 to i8*
[  %x.addr.i24 = alloca double*, align 8 ]   %43 = load double*, double** %x.addr.i24, align 8
[  %x.addr.i24 = alloca double*, align 8 ]   %x.addr2.i29 = bitcast double** %x.addr.i24 to i8*
[  %y.addr.i25 = alloca double*, align 8 ]   %61 = load double*, double** %y.addr.i25, align 8
[  %y.addr.i25 = alloca double*, align 8 ]   %51 = load double*, double** %y.addr.i25, align 8
[  %y.addr.i25 = alloca double*, align 8 ]   %27 = load double*, double** %y.addr.i25, align 8
[  %y.addr.i25 = alloca double*, align 8 ]   %y.addr3.i = bitcast double** %y.addr.i25 to i8*
[  %tmp.addr.i = alloca double*, align 8 ]   %58 = load double*, double** %tmp.addr.i, align 8
[  %tmp.addr.i = alloca double*, align 8 ]   %46 = load double*, double** %tmp.addr.i, align 8
[  %tmp.addr.i = alloca double*, align 8 ]   %36 = load double*, double** %tmp.addr.i, align 8
[]   %32 = load double*, double** %tmp.addr.i, align 8
[]   %tmp.addr4.i = bitcast double** %tmp.addr.i to i8*
[  %y.addr.i = alloca double*, align 8 ]   %71 = load double*, double** %y.addr.i, align 8
[  %y.addr.i = alloca double*, align 8 ]   %y.addr1.i = bitcast double** %y.addr.i to i8*
[  %A = alloca [390 x [410 x double]], align 16   %A.addr.i23 = alloca [410 x double]*, align 8 ]   store [410 x double]* %arraydecay6, [410 x double]** %A.addr.i23, align 8
[  %A = alloca [390 x [410 x double]], align 16   %A.addr.i = alloca [410 x double]*, align 8 ]   store [410 x double]* %arraydecay, [410 x double]** %A.addr.i, align 8
[  %A = alloca [390 x [410 x double]], align 16 ]   call void @llvm.var.annotation(i8* %A1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 96)
[  %x = alloca [410 x double], align 16   %x.addr.i24 = alloca double*, align 8 ]   store double* %arraydecay7, double** %x.addr.i24, align 8
[  %x = alloca [410 x double], align 16   %x.addr.i = alloca double*, align 8 ]   store double* %arraydecay5, double** %x.addr.i, align 8
[  %x = alloca [410 x double], align 16 ]   call void @llvm.var.annotation(i8* %x2, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 97)
[  %y = alloca [410 x double], align 16   %y.addr.i = alloca double*, align 8 ]   store double* %arraydecay10, double** %y.addr.i, align 8
[  %y = alloca [410 x double], align 16   %y.addr.i25 = alloca double*, align 8 ]   store double* %arraydecay8, double** %y.addr.i25, align 8
[  %y = alloca [410 x double], align 16 ]   call void @llvm.var.annotation(i8* %y3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 98)
[  %tmp = alloca [390 x double], align 16 ]   store double* %arraydecay9, double** %tmp.addr.i, align 8
[  %tmp = alloca [390 x double], align 16 ]   call void @llvm.var.annotation(i8* %tmp4, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 99)
[  %A.addr.i = alloca [410 x double]*, align 8 ]   %arrayidx19.i = getelementptr inbounds [410 x double], [410 x double]* %18, i64 %idxprom18.i
[  %A.addr.i = alloca [410 x double]*, align 8 ]   call void @llvm.var.annotation(i8* %A.addr1.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 27) #1
[  %x.addr.i = alloca double*, align 8 ]   %arrayidx.i = getelementptr inbounds double, double* %7, i64 %idxprom.i
[  %x.addr.i = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %x.addr2.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 28) #1
[  %fn.i = alloca double, align 8 ]   %div.i = fdiv double %conv5.i, %6
[  %fn.i = alloca double, align 8 ]   call void @llvm.var.annotation(i8* %fn3.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 31) #1
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %arrayidx34.i = getelementptr inbounds [410 x double], [410 x double]* %54, i64 %idxprom33.i
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %arrayidx18.i = getelementptr inbounds [410 x double], [410 x double]* %39, i64 %idxprom17.i
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   call void @llvm.var.annotation(i8* %A.addr1.i28, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 66) #1
[  %x.addr.i24 = alloca double*, align 8 ]   %arrayidx22.i = getelementptr inbounds double, double* %43, i64 %idxprom21.i
[  %x.addr.i24 = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %x.addr2.i29, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 67) #1
[  %y.addr.i25 = alloca double*, align 8 ]   %arrayidx42.i = getelementptr inbounds double, double* %61, i64 %idxprom41.i
[  %y.addr.i25 = alloca double*, align 8 ]   %arrayidx32.i = getelementptr inbounds double, double* %51, i64 %idxprom31.i
[  %y.addr.i25 = alloca double*, align 8 ]   %arrayidx.i33 = getelementptr inbounds double, double* %27, i64 %idxprom.i32
[  %y.addr.i25 = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %y.addr3.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 68) #1
[  %tmp.addr.i = alloca double*, align 8 ]   %arrayidx38.i = getelementptr inbounds double, double* %58, i64 %idxprom37.i
[  %tmp.addr.i = alloca double*, align 8 ]   %arrayidx24.i = getelementptr inbounds double, double* %46, i64 %idxprom23.i
[  %tmp.addr.i = alloca double*, align 8 ]   %arrayidx16.i = getelementptr inbounds double, double* %36, i64 %idxprom15.i
[]   %arrayidx11.i = getelementptr inbounds double, double* %32, i64 %idxprom10.i
[]   call void @llvm.var.annotation(i8* %tmp.addr4.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 69) #1
[  %y.addr.i = alloca double*, align 8 ]   %arrayidx.i18 = getelementptr inbounds double, double* %71, i64 %idxprom.i17
[  %y.addr.i = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %y.addr1.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 46) #1
[  %A.addr.i = alloca [410 x double]*, align 8 ]   %arrayidx21.i = getelementptr inbounds [410 x double], [410 x double]* %arrayidx19.i, i64 0, i64 %idxprom20.i
[  %fn.i = alloca double, align 8 ]   %add.i = fadd double 1.000000e+00, %div.i
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %arrayidx36.i = getelementptr inbounds [410 x double], [410 x double]* %arrayidx34.i, i64 0, i64 %idxprom35.i
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %arrayidx20.i = getelementptr inbounds [410 x double], [410 x double]* %arrayidx18.i, i64 0, i64 %idxprom19.i
[  %x.addr.i24 = alloca double*, align 8 ]   %45 = load double, double* %arrayidx22.i, align 8
[  %y.addr.i25 = alloca double*, align 8 ]   %53 = load double, double* %arrayidx32.i, align 8
[  %y.addr.i25 = alloca double*, align 8 ]   store double 0.000000e+00, double* %arrayidx.i33, align 8
[  %tmp.addr.i = alloca double*, align 8 ]   %60 = load double, double* %arrayidx38.i, align 8
[  %tmp.addr.i = alloca double*, align 8 ]   %38 = load double, double* %arrayidx16.i, align 8
[]   store double 0.000000e+00, double* %arrayidx11.i, align 8
[  %y.addr.i = alloca double*, align 8 ]   %73 = load double, double* %arrayidx.i18, align 8
[  %A.addr.i = alloca [410 x double]*, align 8 ]   store double %div17.i, double* %arrayidx21.i, align 8
[  %fn.i = alloca double, align 8   %x.addr.i = alloca double*, align 8 ]   store double %add.i, double* %arrayidx.i, align 8
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %57 = load double, double* %arrayidx36.i, align 8
[]   %42 = load double, double* %arrayidx20.i, align 8
[  %y.addr.i = alloca double*, align 8 ]   %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %70, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %73) #1
[  %A.addr.i23 = alloca [410 x double]*, align 8   %tmp.addr.i = alloca double*, align 8 ]   %mul39.i = fmul double %57, %60
[  %x.addr.i24 = alloca double*, align 8 ]   %mul.i38 = fmul double %42, %45
[  %A.addr.i23 = alloca [410 x double]*, align 8   %tmp.addr.i = alloca double*, align 8   %y.addr.i25 = alloca double*, align 8 ]   %add40.i = fadd double %53, %mul39.i
[  %x.addr.i24 = alloca double*, align 8   %tmp.addr.i = alloca double*, align 8 ]   %add.i39 = fadd double %38, %mul.i38
[  %A.addr.i23 = alloca [410 x double]*, align 8   %tmp.addr.i = alloca double*, align 8   %y.addr.i25 = alloca double*, align 8 ]   store double %add40.i, double* %arrayidx42.i, align 8
[  %x.addr.i24 = alloca double*, align 8   %tmp.addr.i = alloca double*, align 8 ]   store double %add.i39, double* %arrayidx24.i, align 8


[Fallback] attempt to wrap not supported operation:
  %A1 = bitcast [390 x [410 x double]]* %A to i8*
  bail out on missing operand 1 of 1
warning:   %A1 = bitcast [390 x [410 x double]]* %A to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %x2 = bitcast [410 x double]* %x to i8*
  bail out on missing operand 1 of 1
warning:   %x2 = bitcast [410 x double]* %x to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y3 = bitcast [410 x double]* %y to i8*
  bail out on missing operand 1 of 1
warning:   %y3 = bitcast [410 x double]* %y to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %tmp4 = bitcast [390 x double]* %tmp to i8*
  bail out on missing operand 1 of 1
warning:   %tmp4 = bitcast [390 x double]* %tmp to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %A.addr1.i = bitcast [410 x double]** %A.addr.i to i8*
  bail out on missing operand 1 of 1
warning:   %A.addr1.i = bitcast [410 x double]** %A.addr.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %x.addr2.i = bitcast double** %x.addr.i to i8*
  bail out on missing operand 1 of 1
warning:   %x.addr2.i = bitcast double** %x.addr.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %fn3.i = bitcast double* %fn.i to i8*
  bail out on missing operand 1 of 1
warning:   %fn3.i = bitcast double* %fn.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %A.addr1.i28 = bitcast [410 x double]** %A.addr.i23 to i8*
  bail out on missing operand 1 of 1
warning:   %A.addr1.i28 = bitcast [410 x double]** %A.addr.i23 to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %x.addr2.i29 = bitcast double** %x.addr.i24 to i8*
  bail out on missing operand 1 of 1
warning:   %x.addr2.i29 = bitcast double** %x.addr.i24 to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y.addr3.i = bitcast double** %y.addr.i25 to i8*
  bail out on missing operand 1 of 1
warning:   %y.addr3.i = bitcast double** %y.addr.i25 to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %tmp.addr4.i = bitcast double** %tmp.addr.i to i8*
  bail out on missing operand 1 of 1
warning:   %tmp.addr4.i = bitcast double** %tmp.addr.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y.addr1.i = bitcast double** %y.addr.i to i8*
  bail out on missing operand 1 of 1
warning:   %y.addr1.i = bitcast double** %y.addr.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %123, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %128) #1
  Substituted operand number : 3 of 4
  mutated operands to:
  %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %123, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %131) #1
+ /opt/llvm-4.0-d/bin/clang -S -o ./build/_tmp2.atax_out.s ./build/_tmp1.atax_out.ll -O3 -I utilities -I linear-algebra/kernels/atax -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS
clang-4.0: warning: argument unused during compilation: '-I utilities' [-Wunused-command-line-argument]
clang-4.0: warning: argument unused during compilation: '-I linear-algebra/kernels/atax' [-Wunused-command-line-argument]
+ /opt/llvm-4.0-d/bin/clang -o ./build/atax_out ./build/_tmp2.atax_out.s -O3 -I utilities -I linear-algebra/kernels/atax -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS -lm utilities/polybench.c
+ '[' xy '!=' x ']'
+ exit 0
++ dirname ./magiclang.sh
+ ROOT=.
+ '[' 7 -lt 1 ']'
+ '[' -z x ']'
+ '[' x '!=' x ']'
+ OUTDIR=./build
+ mkdir -p ./build
+ SOEXT=so
++ uname -s
+ '[' Darwin = Darwin ']'
+ SOEXT=dylib
+ CLANG=/opt/llvm-4.0-d/bin/clang
+ OPT=/opt/llvm-4.0-d/bin/opt
+ LLC=/opt/llvm-4.0-d/bin/llc
+ PASSLIB=./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib
+ '[' '!' -e ./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib ']'
++ echo atax_out
++ sed -E 's/\.[^\.]$//'
+ OUTNAME=atax_out
++ /opt/llvm-4.0-d/bin/opt --version
++ grep DEBUG
++ wc -l
+ ISDEBUG='       1'
+ DEBUGONLYFLAG=-debug-only=flttofix
+ '[' 1 '!=' 1 ']'
+ /opt/llvm-4.0-d/bin/clang -S -emit-llvm linear-algebra/kernels/atax/atax.c -o ./build/_tmp0.atax_out.ll -I utilities -I linear-algebra/kernels/atax -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS
linear-algebra/kernels/atax/atax.c:28:50: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                 DATA_TYPE POLYBENCH_1D(x,N,n)) __attribute__((always_inline))
                                                               ^
linear-algebra/kernels/atax/atax.c:32:9: warning: 'annotate' attribute ignored when parsing type [-Wignored-attributes]
  fn = (DATA_TYPE)n;
        ^~~~~~~~~
linear-algebra/kernels/atax/atax.h:72:36: note: expanded from macro 'DATA_TYPE'
#  define DATA_TYPE __attribute__((annotate("no_float"))) double
                                   ^~~~~~~~~~~~~~~~~~~~
linear-algebra/kernels/atax/atax.c:38:18: warning: 'annotate' attribute ignored when parsing type [-Wignored-attributes]
      A[i][j] = (DATA_TYPE) ((i+j) % n) / (5*m);
                 ^~~~~~~~~
linear-algebra/kernels/atax/atax.h:72:36: note: expanded from macro 'DATA_TYPE'
#  define DATA_TYPE __attribute__((annotate("no_float"))) double
                                   ^~~~~~~~~~~~~~~~~~~~
linear-algebra/kernels/atax/atax.c:46:50: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                 DATA_TYPE POLYBENCH_1D(y,N,n)) __attribute__((always_inline))
                                                               ^
linear-algebra/kernels/atax/atax.c:69:52: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                 DATA_TYPE POLYBENCH_1D(tmp,M,m)) __attribute__((always_inline))
                                                                 ^
5 warnings generated.
+ '[' x '!=' x ']'
+ /opt/llvm-4.0-d/bin/opt -load=./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib -pass-remarks=flttofix -S -flttofix -dce -debug-only=flttofix ./build/_tmp0.atax_out.ll -o ./build/_tmp1.atax_out.ll -fixpfracbitsamt=55 -fixpbitsamt=64
conversion queue:
[  %A = alloca [390 x [410 x double]], align 16 ]   %A = alloca [390 x [410 x double]], align 16
[  %x = alloca [410 x double], align 16 ]   %x = alloca [410 x double], align 16
[  %y = alloca [410 x double], align 16 ]   %y = alloca [410 x double], align 16
[  %tmp = alloca [390 x double], align 16 ]   %tmp = alloca [390 x double], align 16
[  %A.addr.i = alloca [410 x double]*, align 8 ]   %A.addr.i = alloca [410 x double]*, align 8
[  %x.addr.i = alloca double*, align 8 ]   %x.addr.i = alloca double*, align 8
[  %fn.i = alloca double, align 8 ]   %fn.i = alloca double, align 8
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %A.addr.i23 = alloca [410 x double]*, align 8
[  %x.addr.i24 = alloca double*, align 8 ]   %x.addr.i24 = alloca double*, align 8
[  %y.addr.i25 = alloca double*, align 8 ]   %y.addr.i25 = alloca double*, align 8
[  %tmp.addr.i = alloca double*, align 8 ]   %tmp.addr.i = alloca double*, align 8
[  %y.addr.i = alloca double*, align 8 ]   %y.addr.i = alloca double*, align 8
[  %A = alloca [390 x [410 x double]], align 16 ]   %arraydecay6 = getelementptr inbounds [390 x [410 x double]], [390 x [410 x double]]* %A, i32 0, i32 0
[  %A = alloca [390 x [410 x double]], align 16 ]   %arraydecay = getelementptr inbounds [390 x [410 x double]], [390 x [410 x double]]* %A, i32 0, i32 0
[  %A = alloca [390 x [410 x double]], align 16 ]   %A1 = bitcast [390 x [410 x double]]* %A to i8*
[  %x = alloca [410 x double], align 16 ]   %arraydecay7 = getelementptr inbounds [410 x double], [410 x double]* %x, i32 0, i32 0
[  %x = alloca [410 x double], align 16 ]   %arraydecay5 = getelementptr inbounds [410 x double], [410 x double]* %x, i32 0, i32 0
[  %x = alloca [410 x double], align 16 ]   %x2 = bitcast [410 x double]* %x to i8*
[  %y = alloca [410 x double], align 16 ]   %arraydecay10 = getelementptr inbounds [410 x double], [410 x double]* %y, i32 0, i32 0
[  %y = alloca [410 x double], align 16 ]   %arraydecay8 = getelementptr inbounds [410 x double], [410 x double]* %y, i32 0, i32 0
[  %y = alloca [410 x double], align 16 ]   %y3 = bitcast [410 x double]* %y to i8*
[  %tmp = alloca [390 x double], align 16 ]   %arraydecay9 = getelementptr inbounds [390 x double], [390 x double]* %tmp, i32 0, i32 0
[  %tmp = alloca [390 x double], align 16 ]   %tmp4 = bitcast [390 x double]* %tmp to i8*
[  %A.addr.i = alloca [410 x double]*, align 8 ]   %18 = load [410 x double]*, [410 x double]** %A.addr.i, align 8
[  %A.addr.i = alloca [410 x double]*, align 8 ]   %A.addr1.i = bitcast [410 x double]** %A.addr.i to i8*
[  %x.addr.i = alloca double*, align 8 ]   %7 = load double*, double** %x.addr.i, align 8
[  %x.addr.i = alloca double*, align 8 ]   %x.addr2.i = bitcast double** %x.addr.i to i8*
[  %fn.i = alloca double, align 8 ]   %6 = load double, double* %fn.i, align 8
[  %fn.i = alloca double, align 8 ]   store double %conv.i, double* %fn.i, align 8
[  %fn.i = alloca double, align 8 ]   %fn3.i = bitcast double* %fn.i to i8*
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %54 = load [410 x double]*, [410 x double]** %A.addr.i23, align 8
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %39 = load [410 x double]*, [410 x double]** %A.addr.i23, align 8
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %A.addr1.i28 = bitcast [410 x double]** %A.addr.i23 to i8*
[  %x.addr.i24 = alloca double*, align 8 ]   %43 = load double*, double** %x.addr.i24, align 8
[  %x.addr.i24 = alloca double*, align 8 ]   %x.addr2.i29 = bitcast double** %x.addr.i24 to i8*
[  %y.addr.i25 = alloca double*, align 8 ]   %61 = load double*, double** %y.addr.i25, align 8
[  %y.addr.i25 = alloca double*, align 8 ]   %51 = load double*, double** %y.addr.i25, align 8
[  %y.addr.i25 = alloca double*, align 8 ]   %27 = load double*, double** %y.addr.i25, align 8
[  %y.addr.i25 = alloca double*, align 8 ]   %y.addr3.i = bitcast double** %y.addr.i25 to i8*
[  %tmp.addr.i = alloca double*, align 8 ]   %58 = load double*, double** %tmp.addr.i, align 8
[  %tmp.addr.i = alloca double*, align 8 ]   %46 = load double*, double** %tmp.addr.i, align 8
[  %tmp.addr.i = alloca double*, align 8 ]   %36 = load double*, double** %tmp.addr.i, align 8
[]   %32 = load double*, double** %tmp.addr.i, align 8
[]   %tmp.addr4.i = bitcast double** %tmp.addr.i to i8*
[  %y.addr.i = alloca double*, align 8 ]   %71 = load double*, double** %y.addr.i, align 8
[  %y.addr.i = alloca double*, align 8 ]   %y.addr1.i = bitcast double** %y.addr.i to i8*
[  %A = alloca [390 x [410 x double]], align 16   %A.addr.i23 = alloca [410 x double]*, align 8 ]   store [410 x double]* %arraydecay6, [410 x double]** %A.addr.i23, align 8
[  %A = alloca [390 x [410 x double]], align 16   %A.addr.i = alloca [410 x double]*, align 8 ]   store [410 x double]* %arraydecay, [410 x double]** %A.addr.i, align 8
[  %A = alloca [390 x [410 x double]], align 16 ]   call void @llvm.var.annotation(i8* %A1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 96)
[  %x = alloca [410 x double], align 16   %x.addr.i24 = alloca double*, align 8 ]   store double* %arraydecay7, double** %x.addr.i24, align 8
[  %x = alloca [410 x double], align 16   %x.addr.i = alloca double*, align 8 ]   store double* %arraydecay5, double** %x.addr.i, align 8
[  %x = alloca [410 x double], align 16 ]   call void @llvm.var.annotation(i8* %x2, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 97)
[  %y = alloca [410 x double], align 16   %y.addr.i = alloca double*, align 8 ]   store double* %arraydecay10, double** %y.addr.i, align 8
[  %y = alloca [410 x double], align 16   %y.addr.i25 = alloca double*, align 8 ]   store double* %arraydecay8, double** %y.addr.i25, align 8
[  %y = alloca [410 x double], align 16 ]   call void @llvm.var.annotation(i8* %y3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 98)
[  %tmp = alloca [390 x double], align 16 ]   store double* %arraydecay9, double** %tmp.addr.i, align 8
[  %tmp = alloca [390 x double], align 16 ]   call void @llvm.var.annotation(i8* %tmp4, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 99)
[  %A.addr.i = alloca [410 x double]*, align 8 ]   %arrayidx19.i = getelementptr inbounds [410 x double], [410 x double]* %18, i64 %idxprom18.i
[  %A.addr.i = alloca [410 x double]*, align 8 ]   call void @llvm.var.annotation(i8* %A.addr1.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 27) #1
[  %x.addr.i = alloca double*, align 8 ]   %arrayidx.i = getelementptr inbounds double, double* %7, i64 %idxprom.i
[  %x.addr.i = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %x.addr2.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 28) #1
[  %fn.i = alloca double, align 8 ]   %div.i = fdiv double %conv5.i, %6
[  %fn.i = alloca double, align 8 ]   call void @llvm.var.annotation(i8* %fn3.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 31) #1
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %arrayidx34.i = getelementptr inbounds [410 x double], [410 x double]* %54, i64 %idxprom33.i
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %arrayidx18.i = getelementptr inbounds [410 x double], [410 x double]* %39, i64 %idxprom17.i
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   call void @llvm.var.annotation(i8* %A.addr1.i28, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 66) #1
[  %x.addr.i24 = alloca double*, align 8 ]   %arrayidx22.i = getelementptr inbounds double, double* %43, i64 %idxprom21.i
[  %x.addr.i24 = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %x.addr2.i29, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 67) #1
[  %y.addr.i25 = alloca double*, align 8 ]   %arrayidx42.i = getelementptr inbounds double, double* %61, i64 %idxprom41.i
[  %y.addr.i25 = alloca double*, align 8 ]   %arrayidx32.i = getelementptr inbounds double, double* %51, i64 %idxprom31.i
[  %y.addr.i25 = alloca double*, align 8 ]   %arrayidx.i33 = getelementptr inbounds double, double* %27, i64 %idxprom.i32
[  %y.addr.i25 = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %y.addr3.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 68) #1
[  %tmp.addr.i = alloca double*, align 8 ]   %arrayidx38.i = getelementptr inbounds double, double* %58, i64 %idxprom37.i
[  %tmp.addr.i = alloca double*, align 8 ]   %arrayidx24.i = getelementptr inbounds double, double* %46, i64 %idxprom23.i
[  %tmp.addr.i = alloca double*, align 8 ]   %arrayidx16.i = getelementptr inbounds double, double* %36, i64 %idxprom15.i
[]   %arrayidx11.i = getelementptr inbounds double, double* %32, i64 %idxprom10.i
[]   call void @llvm.var.annotation(i8* %tmp.addr4.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 69) #1
[  %y.addr.i = alloca double*, align 8 ]   %arrayidx.i18 = getelementptr inbounds double, double* %71, i64 %idxprom.i17
[  %y.addr.i = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %y.addr1.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 46) #1
[  %A.addr.i = alloca [410 x double]*, align 8 ]   %arrayidx21.i = getelementptr inbounds [410 x double], [410 x double]* %arrayidx19.i, i64 0, i64 %idxprom20.i
[  %fn.i = alloca double, align 8 ]   %add.i = fadd double 1.000000e+00, %div.i
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %arrayidx36.i = getelementptr inbounds [410 x double], [410 x double]* %arrayidx34.i, i64 0, i64 %idxprom35.i
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %arrayidx20.i = getelementptr inbounds [410 x double], [410 x double]* %arrayidx18.i, i64 0, i64 %idxprom19.i
[  %x.addr.i24 = alloca double*, align 8 ]   %45 = load double, double* %arrayidx22.i, align 8
[  %y.addr.i25 = alloca double*, align 8 ]   %53 = load double, double* %arrayidx32.i, align 8
[  %y.addr.i25 = alloca double*, align 8 ]   store double 0.000000e+00, double* %arrayidx.i33, align 8
[  %tmp.addr.i = alloca double*, align 8 ]   %60 = load double, double* %arrayidx38.i, align 8
[  %tmp.addr.i = alloca double*, align 8 ]   %38 = load double, double* %arrayidx16.i, align 8
[]   store double 0.000000e+00, double* %arrayidx11.i, align 8
[  %y.addr.i = alloca double*, align 8 ]   %73 = load double, double* %arrayidx.i18, align 8
[  %A.addr.i = alloca [410 x double]*, align 8 ]   store double %div17.i, double* %arrayidx21.i, align 8
[  %fn.i = alloca double, align 8   %x.addr.i = alloca double*, align 8 ]   store double %add.i, double* %arrayidx.i, align 8
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %57 = load double, double* %arrayidx36.i, align 8
[]   %42 = load double, double* %arrayidx20.i, align 8
[  %y.addr.i = alloca double*, align 8 ]   %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %70, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %73) #1
[  %A.addr.i23 = alloca [410 x double]*, align 8   %tmp.addr.i = alloca double*, align 8 ]   %mul39.i = fmul double %57, %60
[  %x.addr.i24 = alloca double*, align 8 ]   %mul.i38 = fmul double %42, %45
[  %A.addr.i23 = alloca [410 x double]*, align 8   %tmp.addr.i = alloca double*, align 8   %y.addr.i25 = alloca double*, align 8 ]   %add40.i = fadd double %53, %mul39.i
[  %x.addr.i24 = alloca double*, align 8   %tmp.addr.i = alloca double*, align 8 ]   %add.i39 = fadd double %38, %mul.i38
[  %A.addr.i23 = alloca [410 x double]*, align 8   %tmp.addr.i = alloca double*, align 8   %y.addr.i25 = alloca double*, align 8 ]   store double %add40.i, double* %arrayidx42.i, align 8
[  %x.addr.i24 = alloca double*, align 8   %tmp.addr.i = alloca double*, align 8 ]   store double %add.i39, double* %arrayidx24.i, align 8


[Fallback] attempt to wrap not supported operation:
  %A1 = bitcast [390 x [410 x double]]* %A to i8*
  bail out on missing operand 1 of 1
warning:   %A1 = bitcast [390 x [410 x double]]* %A to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %x2 = bitcast [410 x double]* %x to i8*
  bail out on missing operand 1 of 1
warning:   %x2 = bitcast [410 x double]* %x to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y3 = bitcast [410 x double]* %y to i8*
  bail out on missing operand 1 of 1
warning:   %y3 = bitcast [410 x double]* %y to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %tmp4 = bitcast [390 x double]* %tmp to i8*
  bail out on missing operand 1 of 1
warning:   %tmp4 = bitcast [390 x double]* %tmp to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %A.addr1.i = bitcast [410 x double]** %A.addr.i to i8*
  bail out on missing operand 1 of 1
warning:   %A.addr1.i = bitcast [410 x double]** %A.addr.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %x.addr2.i = bitcast double** %x.addr.i to i8*
  bail out on missing operand 1 of 1
warning:   %x.addr2.i = bitcast double** %x.addr.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %fn3.i = bitcast double* %fn.i to i8*
  bail out on missing operand 1 of 1
warning:   %fn3.i = bitcast double* %fn.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %A.addr1.i28 = bitcast [410 x double]** %A.addr.i23 to i8*
  bail out on missing operand 1 of 1
warning:   %A.addr1.i28 = bitcast [410 x double]** %A.addr.i23 to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %x.addr2.i29 = bitcast double** %x.addr.i24 to i8*
  bail out on missing operand 1 of 1
warning:   %x.addr2.i29 = bitcast double** %x.addr.i24 to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y.addr3.i = bitcast double** %y.addr.i25 to i8*
  bail out on missing operand 1 of 1
warning:   %y.addr3.i = bitcast double** %y.addr.i25 to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %tmp.addr4.i = bitcast double** %tmp.addr.i to i8*
  bail out on missing operand 1 of 1
warning:   %tmp.addr4.i = bitcast double** %tmp.addr.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y.addr1.i = bitcast double** %y.addr.i to i8*
  bail out on missing operand 1 of 1
warning:   %y.addr1.i = bitcast double** %y.addr.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %123, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %128) #1
  Substituted operand number : 3 of 4
  mutated operands to:
  %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %123, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %131) #1
+ /opt/llvm-4.0-d/bin/clang -S -o ./build/_tmp2.atax_out.s ./build/_tmp1.atax_out.ll -O3 -I utilities -I linear-algebra/kernels/atax -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS
clang-4.0: warning: argument unused during compilation: '-I utilities' [-Wunused-command-line-argument]
clang-4.0: warning: argument unused during compilation: '-I linear-algebra/kernels/atax' [-Wunused-command-line-argument]
+ /opt/llvm-4.0-d/bin/clang -o ./build/atax_out ./build/_tmp2.atax_out.s -O3 -I utilities -I linear-algebra/kernels/atax -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS -lm utilities/polybench.c
+ '[' xy '!=' x ']'
+ exit 0
++ dirname ./magiclang.sh
+ ROOT=.
+ '[' 7 -lt 1 ']'
+ '[' -z x ']'
+ '[' x '!=' x ']'
+ OUTDIR=./build
+ mkdir -p ./build
+ SOEXT=so
++ uname -s
+ '[' Darwin = Darwin ']'
+ SOEXT=dylib
+ CLANG=/opt/llvm-4.0-d/bin/clang
+ OPT=/opt/llvm-4.0-d/bin/opt
+ LLC=/opt/llvm-4.0-d/bin/llc
+ PASSLIB=./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib
+ '[' '!' -e ./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib ']'
++ echo atax_out
++ sed -E 's/\.[^\.]$//'
+ OUTNAME=atax_out
++ /opt/llvm-4.0-d/bin/opt --version
++ grep DEBUG
++ wc -l
+ ISDEBUG='       1'
+ DEBUGONLYFLAG=-debug-only=flttofix
+ '[' 1 '!=' 1 ']'
+ /opt/llvm-4.0-d/bin/clang -S -emit-llvm linear-algebra/kernels/atax/atax.c -o ./build/_tmp0.atax_out.ll -I utilities -I linear-algebra/kernels/atax -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS
linear-algebra/kernels/atax/atax.c:28:50: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                 DATA_TYPE POLYBENCH_1D(x,N,n)) __attribute__((always_inline))
                                                               ^
linear-algebra/kernels/atax/atax.c:32:9: warning: 'annotate' attribute ignored when parsing type [-Wignored-attributes]
  fn = (DATA_TYPE)n;
        ^~~~~~~~~
linear-algebra/kernels/atax/atax.h:72:36: note: expanded from macro 'DATA_TYPE'
#  define DATA_TYPE __attribute__((annotate("no_float"))) double
                                   ^~~~~~~~~~~~~~~~~~~~
linear-algebra/kernels/atax/atax.c:38:18: warning: 'annotate' attribute ignored when parsing type [-Wignored-attributes]
      A[i][j] = (DATA_TYPE) ((i+j) % n) / (5*m);
                 ^~~~~~~~~
linear-algebra/kernels/atax/atax.h:72:36: note: expanded from macro 'DATA_TYPE'
#  define DATA_TYPE __attribute__((annotate("no_float"))) double
                                   ^~~~~~~~~~~~~~~~~~~~
linear-algebra/kernels/atax/atax.c:46:50: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                 DATA_TYPE POLYBENCH_1D(y,N,n)) __attribute__((always_inline))
                                                               ^
linear-algebra/kernels/atax/atax.c:69:52: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                 DATA_TYPE POLYBENCH_1D(tmp,M,m)) __attribute__((always_inline))
                                                                 ^
5 warnings generated.
+ '[' x '!=' x ']'
+ /opt/llvm-4.0-d/bin/opt -load=./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib -pass-remarks=flttofix -S -flttofix -dce -debug-only=flttofix ./build/_tmp0.atax_out.ll -o ./build/_tmp1.atax_out.ll -fixpfracbitsamt=51 -fixpbitsamt=64
conversion queue:
[  %A = alloca [390 x [410 x double]], align 16 ]   %A = alloca [390 x [410 x double]], align 16
[  %x = alloca [410 x double], align 16 ]   %x = alloca [410 x double], align 16
[  %y = alloca [410 x double], align 16 ]   %y = alloca [410 x double], align 16
[  %tmp = alloca [390 x double], align 16 ]   %tmp = alloca [390 x double], align 16
[  %A.addr.i = alloca [410 x double]*, align 8 ]   %A.addr.i = alloca [410 x double]*, align 8
[  %x.addr.i = alloca double*, align 8 ]   %x.addr.i = alloca double*, align 8
[  %fn.i = alloca double, align 8 ]   %fn.i = alloca double, align 8
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %A.addr.i23 = alloca [410 x double]*, align 8
[  %x.addr.i24 = alloca double*, align 8 ]   %x.addr.i24 = alloca double*, align 8
[  %y.addr.i25 = alloca double*, align 8 ]   %y.addr.i25 = alloca double*, align 8
[  %tmp.addr.i = alloca double*, align 8 ]   %tmp.addr.i = alloca double*, align 8
[  %y.addr.i = alloca double*, align 8 ]   %y.addr.i = alloca double*, align 8
[  %A = alloca [390 x [410 x double]], align 16 ]   %arraydecay6 = getelementptr inbounds [390 x [410 x double]], [390 x [410 x double]]* %A, i32 0, i32 0
[  %A = alloca [390 x [410 x double]], align 16 ]   %arraydecay = getelementptr inbounds [390 x [410 x double]], [390 x [410 x double]]* %A, i32 0, i32 0
[  %A = alloca [390 x [410 x double]], align 16 ]   %A1 = bitcast [390 x [410 x double]]* %A to i8*
[  %x = alloca [410 x double], align 16 ]   %arraydecay7 = getelementptr inbounds [410 x double], [410 x double]* %x, i32 0, i32 0
[  %x = alloca [410 x double], align 16 ]   %arraydecay5 = getelementptr inbounds [410 x double], [410 x double]* %x, i32 0, i32 0
[  %x = alloca [410 x double], align 16 ]   %x2 = bitcast [410 x double]* %x to i8*
[  %y = alloca [410 x double], align 16 ]   %arraydecay10 = getelementptr inbounds [410 x double], [410 x double]* %y, i32 0, i32 0
[  %y = alloca [410 x double], align 16 ]   %arraydecay8 = getelementptr inbounds [410 x double], [410 x double]* %y, i32 0, i32 0
[  %y = alloca [410 x double], align 16 ]   %y3 = bitcast [410 x double]* %y to i8*
[  %tmp = alloca [390 x double], align 16 ]   %arraydecay9 = getelementptr inbounds [390 x double], [390 x double]* %tmp, i32 0, i32 0
[  %tmp = alloca [390 x double], align 16 ]   %tmp4 = bitcast [390 x double]* %tmp to i8*
[  %A.addr.i = alloca [410 x double]*, align 8 ]   %18 = load [410 x double]*, [410 x double]** %A.addr.i, align 8
[  %A.addr.i = alloca [410 x double]*, align 8 ]   %A.addr1.i = bitcast [410 x double]** %A.addr.i to i8*
[  %x.addr.i = alloca double*, align 8 ]   %7 = load double*, double** %x.addr.i, align 8
[  %x.addr.i = alloca double*, align 8 ]   %x.addr2.i = bitcast double** %x.addr.i to i8*
[  %fn.i = alloca double, align 8 ]   %6 = load double, double* %fn.i, align 8
[  %fn.i = alloca double, align 8 ]   store double %conv.i, double* %fn.i, align 8
[  %fn.i = alloca double, align 8 ]   %fn3.i = bitcast double* %fn.i to i8*
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %54 = load [410 x double]*, [410 x double]** %A.addr.i23, align 8
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %39 = load [410 x double]*, [410 x double]** %A.addr.i23, align 8
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %A.addr1.i28 = bitcast [410 x double]** %A.addr.i23 to i8*
[  %x.addr.i24 = alloca double*, align 8 ]   %43 = load double*, double** %x.addr.i24, align 8
[  %x.addr.i24 = alloca double*, align 8 ]   %x.addr2.i29 = bitcast double** %x.addr.i24 to i8*
[  %y.addr.i25 = alloca double*, align 8 ]   %61 = load double*, double** %y.addr.i25, align 8
[  %y.addr.i25 = alloca double*, align 8 ]   %51 = load double*, double** %y.addr.i25, align 8
[  %y.addr.i25 = alloca double*, align 8 ]   %27 = load double*, double** %y.addr.i25, align 8
[  %y.addr.i25 = alloca double*, align 8 ]   %y.addr3.i = bitcast double** %y.addr.i25 to i8*
[  %tmp.addr.i = alloca double*, align 8 ]   %58 = load double*, double** %tmp.addr.i, align 8
[  %tmp.addr.i = alloca double*, align 8 ]   %46 = load double*, double** %tmp.addr.i, align 8
[  %tmp.addr.i = alloca double*, align 8 ]   %36 = load double*, double** %tmp.addr.i, align 8
[]   %32 = load double*, double** %tmp.addr.i, align 8
[]   %tmp.addr4.i = bitcast double** %tmp.addr.i to i8*
[  %y.addr.i = alloca double*, align 8 ]   %71 = load double*, double** %y.addr.i, align 8
[  %y.addr.i = alloca double*, align 8 ]   %y.addr1.i = bitcast double** %y.addr.i to i8*
[  %A = alloca [390 x [410 x double]], align 16   %A.addr.i23 = alloca [410 x double]*, align 8 ]   store [410 x double]* %arraydecay6, [410 x double]** %A.addr.i23, align 8
[  %A = alloca [390 x [410 x double]], align 16   %A.addr.i = alloca [410 x double]*, align 8 ]   store [410 x double]* %arraydecay, [410 x double]** %A.addr.i, align 8
[  %A = alloca [390 x [410 x double]], align 16 ]   call void @llvm.var.annotation(i8* %A1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 96)
[  %x = alloca [410 x double], align 16   %x.addr.i24 = alloca double*, align 8 ]   store double* %arraydecay7, double** %x.addr.i24, align 8
[  %x = alloca [410 x double], align 16   %x.addr.i = alloca double*, align 8 ]   store double* %arraydecay5, double** %x.addr.i, align 8
[  %x = alloca [410 x double], align 16 ]   call void @llvm.var.annotation(i8* %x2, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 97)
[  %y = alloca [410 x double], align 16   %y.addr.i = alloca double*, align 8 ]   store double* %arraydecay10, double** %y.addr.i, align 8
[  %y = alloca [410 x double], align 16   %y.addr.i25 = alloca double*, align 8 ]   store double* %arraydecay8, double** %y.addr.i25, align 8
[  %y = alloca [410 x double], align 16 ]   call void @llvm.var.annotation(i8* %y3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 98)
[  %tmp = alloca [390 x double], align 16 ]   store double* %arraydecay9, double** %tmp.addr.i, align 8
[  %tmp = alloca [390 x double], align 16 ]   call void @llvm.var.annotation(i8* %tmp4, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 99)
[  %A.addr.i = alloca [410 x double]*, align 8 ]   %arrayidx19.i = getelementptr inbounds [410 x double], [410 x double]* %18, i64 %idxprom18.i
[  %A.addr.i = alloca [410 x double]*, align 8 ]   call void @llvm.var.annotation(i8* %A.addr1.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 27) #1
[  %x.addr.i = alloca double*, align 8 ]   %arrayidx.i = getelementptr inbounds double, double* %7, i64 %idxprom.i
[  %x.addr.i = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %x.addr2.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 28) #1
[  %fn.i = alloca double, align 8 ]   %div.i = fdiv double %conv5.i, %6
[  %fn.i = alloca double, align 8 ]   call void @llvm.var.annotation(i8* %fn3.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 31) #1
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %arrayidx34.i = getelementptr inbounds [410 x double], [410 x double]* %54, i64 %idxprom33.i
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %arrayidx18.i = getelementptr inbounds [410 x double], [410 x double]* %39, i64 %idxprom17.i
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   call void @llvm.var.annotation(i8* %A.addr1.i28, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 66) #1
[  %x.addr.i24 = alloca double*, align 8 ]   %arrayidx22.i = getelementptr inbounds double, double* %43, i64 %idxprom21.i
[  %x.addr.i24 = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %x.addr2.i29, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 67) #1
[  %y.addr.i25 = alloca double*, align 8 ]   %arrayidx42.i = getelementptr inbounds double, double* %61, i64 %idxprom41.i
[  %y.addr.i25 = alloca double*, align 8 ]   %arrayidx32.i = getelementptr inbounds double, double* %51, i64 %idxprom31.i
[  %y.addr.i25 = alloca double*, align 8 ]   %arrayidx.i33 = getelementptr inbounds double, double* %27, i64 %idxprom.i32
[  %y.addr.i25 = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %y.addr3.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 68) #1
[  %tmp.addr.i = alloca double*, align 8 ]   %arrayidx38.i = getelementptr inbounds double, double* %58, i64 %idxprom37.i
[  %tmp.addr.i = alloca double*, align 8 ]   %arrayidx24.i = getelementptr inbounds double, double* %46, i64 %idxprom23.i
[  %tmp.addr.i = alloca double*, align 8 ]   %arrayidx16.i = getelementptr inbounds double, double* %36, i64 %idxprom15.i
[]   %arrayidx11.i = getelementptr inbounds double, double* %32, i64 %idxprom10.i
[]   call void @llvm.var.annotation(i8* %tmp.addr4.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 69) #1
[  %y.addr.i = alloca double*, align 8 ]   %arrayidx.i18 = getelementptr inbounds double, double* %71, i64 %idxprom.i17
[  %y.addr.i = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %y.addr1.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 46) #1
[  %A.addr.i = alloca [410 x double]*, align 8 ]   %arrayidx21.i = getelementptr inbounds [410 x double], [410 x double]* %arrayidx19.i, i64 0, i64 %idxprom20.i
[  %fn.i = alloca double, align 8 ]   %add.i = fadd double 1.000000e+00, %div.i
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %arrayidx36.i = getelementptr inbounds [410 x double], [410 x double]* %arrayidx34.i, i64 0, i64 %idxprom35.i
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %arrayidx20.i = getelementptr inbounds [410 x double], [410 x double]* %arrayidx18.i, i64 0, i64 %idxprom19.i
[  %x.addr.i24 = alloca double*, align 8 ]   %45 = load double, double* %arrayidx22.i, align 8
[  %y.addr.i25 = alloca double*, align 8 ]   %53 = load double, double* %arrayidx32.i, align 8
[  %y.addr.i25 = alloca double*, align 8 ]   store double 0.000000e+00, double* %arrayidx.i33, align 8
[  %tmp.addr.i = alloca double*, align 8 ]   %60 = load double, double* %arrayidx38.i, align 8
[  %tmp.addr.i = alloca double*, align 8 ]   %38 = load double, double* %arrayidx16.i, align 8
[]   store double 0.000000e+00, double* %arrayidx11.i, align 8
[  %y.addr.i = alloca double*, align 8 ]   %73 = load double, double* %arrayidx.i18, align 8
[  %A.addr.i = alloca [410 x double]*, align 8 ]   store double %div17.i, double* %arrayidx21.i, align 8
[  %fn.i = alloca double, align 8   %x.addr.i = alloca double*, align 8 ]   store double %add.i, double* %arrayidx.i, align 8
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %57 = load double, double* %arrayidx36.i, align 8
[]   %42 = load double, double* %arrayidx20.i, align 8
[  %y.addr.i = alloca double*, align 8 ]   %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %70, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %73) #1
[  %A.addr.i23 = alloca [410 x double]*, align 8   %tmp.addr.i = alloca double*, align 8 ]   %mul39.i = fmul double %57, %60
[  %x.addr.i24 = alloca double*, align 8 ]   %mul.i38 = fmul double %42, %45
[  %A.addr.i23 = alloca [410 x double]*, align 8   %tmp.addr.i = alloca double*, align 8   %y.addr.i25 = alloca double*, align 8 ]   %add40.i = fadd double %53, %mul39.i
[  %x.addr.i24 = alloca double*, align 8   %tmp.addr.i = alloca double*, align 8 ]   %add.i39 = fadd double %38, %mul.i38
[  %A.addr.i23 = alloca [410 x double]*, align 8   %tmp.addr.i = alloca double*, align 8   %y.addr.i25 = alloca double*, align 8 ]   store double %add40.i, double* %arrayidx42.i, align 8
[  %x.addr.i24 = alloca double*, align 8   %tmp.addr.i = alloca double*, align 8 ]   store double %add.i39, double* %arrayidx24.i, align 8


[Fallback] attempt to wrap not supported operation:
  %A1 = bitcast [390 x [410 x double]]* %A to i8*
  bail out on missing operand 1 of 1
warning:   %A1 = bitcast [390 x [410 x double]]* %A to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %x2 = bitcast [410 x double]* %x to i8*
  bail out on missing operand 1 of 1
warning:   %x2 = bitcast [410 x double]* %x to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y3 = bitcast [410 x double]* %y to i8*
  bail out on missing operand 1 of 1
warning:   %y3 = bitcast [410 x double]* %y to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %tmp4 = bitcast [390 x double]* %tmp to i8*
  bail out on missing operand 1 of 1
warning:   %tmp4 = bitcast [390 x double]* %tmp to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %A.addr1.i = bitcast [410 x double]** %A.addr.i to i8*
  bail out on missing operand 1 of 1
warning:   %A.addr1.i = bitcast [410 x double]** %A.addr.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %x.addr2.i = bitcast double** %x.addr.i to i8*
  bail out on missing operand 1 of 1
warning:   %x.addr2.i = bitcast double** %x.addr.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %fn3.i = bitcast double* %fn.i to i8*
  bail out on missing operand 1 of 1
warning:   %fn3.i = bitcast double* %fn.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %A.addr1.i28 = bitcast [410 x double]** %A.addr.i23 to i8*
  bail out on missing operand 1 of 1
warning:   %A.addr1.i28 = bitcast [410 x double]** %A.addr.i23 to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %x.addr2.i29 = bitcast double** %x.addr.i24 to i8*
  bail out on missing operand 1 of 1
warning:   %x.addr2.i29 = bitcast double** %x.addr.i24 to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y.addr3.i = bitcast double** %y.addr.i25 to i8*
  bail out on missing operand 1 of 1
warning:   %y.addr3.i = bitcast double** %y.addr.i25 to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %tmp.addr4.i = bitcast double** %tmp.addr.i to i8*
  bail out on missing operand 1 of 1
warning:   %tmp.addr4.i = bitcast double** %tmp.addr.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y.addr1.i = bitcast double** %y.addr.i to i8*
  bail out on missing operand 1 of 1
warning:   %y.addr1.i = bitcast double** %y.addr.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %123, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %128) #1
  Substituted operand number : 3 of 4
  mutated operands to:
  %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %123, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %131) #1
+ /opt/llvm-4.0-d/bin/clang -S -o ./build/_tmp2.atax_out.s ./build/_tmp1.atax_out.ll -O3 -I utilities -I linear-algebra/kernels/atax -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS
clang-4.0: warning: argument unused during compilation: '-I utilities' [-Wunused-command-line-argument]
clang-4.0: warning: argument unused during compilation: '-I linear-algebra/kernels/atax' [-Wunused-command-line-argument]
+ /opt/llvm-4.0-d/bin/clang -o ./build/atax_out ./build/_tmp2.atax_out.s -O3 -I utilities -I linear-algebra/kernels/atax -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS -lm utilities/polybench.c
+ '[' xy '!=' x ']'
+ exit 0
++ dirname ./magiclang.sh
+ ROOT=.
+ '[' 7 -lt 1 ']'
+ '[' -z x ']'
+ '[' x '!=' x ']'
+ OUTDIR=./build
+ mkdir -p ./build
+ SOEXT=so
++ uname -s
+ '[' Darwin = Darwin ']'
+ SOEXT=dylib
+ CLANG=/opt/llvm-4.0-d/bin/clang
+ OPT=/opt/llvm-4.0-d/bin/opt
+ LLC=/opt/llvm-4.0-d/bin/llc
+ PASSLIB=./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib
+ '[' '!' -e ./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib ']'
++ echo atax_out
++ sed -E 's/\.[^\.]$//'
+ OUTNAME=atax_out
++ /opt/llvm-4.0-d/bin/opt --version
++ grep DEBUG
++ wc -l
+ ISDEBUG='       1'
+ DEBUGONLYFLAG=-debug-only=flttofix
+ '[' 1 '!=' 1 ']'
+ /opt/llvm-4.0-d/bin/clang -S -emit-llvm linear-algebra/kernels/atax/atax.c -o ./build/_tmp0.atax_out.ll -I utilities -I linear-algebra/kernels/atax -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS
linear-algebra/kernels/atax/atax.c:28:50: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                 DATA_TYPE POLYBENCH_1D(x,N,n)) __attribute__((always_inline))
                                                               ^
linear-algebra/kernels/atax/atax.c:32:9: warning: 'annotate' attribute ignored when parsing type [-Wignored-attributes]
  fn = (DATA_TYPE)n;
        ^~~~~~~~~
linear-algebra/kernels/atax/atax.h:72:36: note: expanded from macro 'DATA_TYPE'
#  define DATA_TYPE __attribute__((annotate("no_float"))) double
                                   ^~~~~~~~~~~~~~~~~~~~
linear-algebra/kernels/atax/atax.c:38:18: warning: 'annotate' attribute ignored when parsing type [-Wignored-attributes]
      A[i][j] = (DATA_TYPE) ((i+j) % n) / (5*m);
                 ^~~~~~~~~
linear-algebra/kernels/atax/atax.h:72:36: note: expanded from macro 'DATA_TYPE'
#  define DATA_TYPE __attribute__((annotate("no_float"))) double
                                   ^~~~~~~~~~~~~~~~~~~~
linear-algebra/kernels/atax/atax.c:46:50: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                 DATA_TYPE POLYBENCH_1D(y,N,n)) __attribute__((always_inline))
                                                               ^
linear-algebra/kernels/atax/atax.c:69:52: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                 DATA_TYPE POLYBENCH_1D(tmp,M,m)) __attribute__((always_inline))
                                                                 ^
5 warnings generated.
+ '[' x '!=' x ']'
+ /opt/llvm-4.0-d/bin/opt -load=./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib -pass-remarks=flttofix -S -flttofix -dce -debug-only=flttofix ./build/_tmp0.atax_out.ll -o ./build/_tmp1.atax_out.ll -fixpfracbitsamt=53 -fixpbitsamt=64
conversion queue:
[  %A = alloca [390 x [410 x double]], align 16 ]   %A = alloca [390 x [410 x double]], align 16
[  %x = alloca [410 x double], align 16 ]   %x = alloca [410 x double], align 16
[  %y = alloca [410 x double], align 16 ]   %y = alloca [410 x double], align 16
[  %tmp = alloca [390 x double], align 16 ]   %tmp = alloca [390 x double], align 16
[  %A.addr.i = alloca [410 x double]*, align 8 ]   %A.addr.i = alloca [410 x double]*, align 8
[  %x.addr.i = alloca double*, align 8 ]   %x.addr.i = alloca double*, align 8
[  %fn.i = alloca double, align 8 ]   %fn.i = alloca double, align 8
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %A.addr.i23 = alloca [410 x double]*, align 8
[  %x.addr.i24 = alloca double*, align 8 ]   %x.addr.i24 = alloca double*, align 8
[  %y.addr.i25 = alloca double*, align 8 ]   %y.addr.i25 = alloca double*, align 8
[  %tmp.addr.i = alloca double*, align 8 ]   %tmp.addr.i = alloca double*, align 8
[  %y.addr.i = alloca double*, align 8 ]   %y.addr.i = alloca double*, align 8
[  %A = alloca [390 x [410 x double]], align 16 ]   %arraydecay6 = getelementptr inbounds [390 x [410 x double]], [390 x [410 x double]]* %A, i32 0, i32 0
[  %A = alloca [390 x [410 x double]], align 16 ]   %arraydecay = getelementptr inbounds [390 x [410 x double]], [390 x [410 x double]]* %A, i32 0, i32 0
[  %A = alloca [390 x [410 x double]], align 16 ]   %A1 = bitcast [390 x [410 x double]]* %A to i8*
[  %x = alloca [410 x double], align 16 ]   %arraydecay7 = getelementptr inbounds [410 x double], [410 x double]* %x, i32 0, i32 0
[  %x = alloca [410 x double], align 16 ]   %arraydecay5 = getelementptr inbounds [410 x double], [410 x double]* %x, i32 0, i32 0
[  %x = alloca [410 x double], align 16 ]   %x2 = bitcast [410 x double]* %x to i8*
[  %y = alloca [410 x double], align 16 ]   %arraydecay10 = getelementptr inbounds [410 x double], [410 x double]* %y, i32 0, i32 0
[  %y = alloca [410 x double], align 16 ]   %arraydecay8 = getelementptr inbounds [410 x double], [410 x double]* %y, i32 0, i32 0
[  %y = alloca [410 x double], align 16 ]   %y3 = bitcast [410 x double]* %y to i8*
[  %tmp = alloca [390 x double], align 16 ]   %arraydecay9 = getelementptr inbounds [390 x double], [390 x double]* %tmp, i32 0, i32 0
[  %tmp = alloca [390 x double], align 16 ]   %tmp4 = bitcast [390 x double]* %tmp to i8*
[  %A.addr.i = alloca [410 x double]*, align 8 ]   %18 = load [410 x double]*, [410 x double]** %A.addr.i, align 8
[  %A.addr.i = alloca [410 x double]*, align 8 ]   %A.addr1.i = bitcast [410 x double]** %A.addr.i to i8*
[  %x.addr.i = alloca double*, align 8 ]   %7 = load double*, double** %x.addr.i, align 8
[  %x.addr.i = alloca double*, align 8 ]   %x.addr2.i = bitcast double** %x.addr.i to i8*
[  %fn.i = alloca double, align 8 ]   %6 = load double, double* %fn.i, align 8
[  %fn.i = alloca double, align 8 ]   store double %conv.i, double* %fn.i, align 8
[  %fn.i = alloca double, align 8 ]   %fn3.i = bitcast double* %fn.i to i8*
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %54 = load [410 x double]*, [410 x double]** %A.addr.i23, align 8
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %39 = load [410 x double]*, [410 x double]** %A.addr.i23, align 8
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %A.addr1.i28 = bitcast [410 x double]** %A.addr.i23 to i8*
[  %x.addr.i24 = alloca double*, align 8 ]   %43 = load double*, double** %x.addr.i24, align 8
[  %x.addr.i24 = alloca double*, align 8 ]   %x.addr2.i29 = bitcast double** %x.addr.i24 to i8*
[  %y.addr.i25 = alloca double*, align 8 ]   %61 = load double*, double** %y.addr.i25, align 8
[  %y.addr.i25 = alloca double*, align 8 ]   %51 = load double*, double** %y.addr.i25, align 8
[  %y.addr.i25 = alloca double*, align 8 ]   %27 = load double*, double** %y.addr.i25, align 8
[  %y.addr.i25 = alloca double*, align 8 ]   %y.addr3.i = bitcast double** %y.addr.i25 to i8*
[  %tmp.addr.i = alloca double*, align 8 ]   %58 = load double*, double** %tmp.addr.i, align 8
[  %tmp.addr.i = alloca double*, align 8 ]   %46 = load double*, double** %tmp.addr.i, align 8
[  %tmp.addr.i = alloca double*, align 8 ]   %36 = load double*, double** %tmp.addr.i, align 8
[]   %32 = load double*, double** %tmp.addr.i, align 8
[]   %tmp.addr4.i = bitcast double** %tmp.addr.i to i8*
[  %y.addr.i = alloca double*, align 8 ]   %71 = load double*, double** %y.addr.i, align 8
[  %y.addr.i = alloca double*, align 8 ]   %y.addr1.i = bitcast double** %y.addr.i to i8*
[  %A = alloca [390 x [410 x double]], align 16   %A.addr.i23 = alloca [410 x double]*, align 8 ]   store [410 x double]* %arraydecay6, [410 x double]** %A.addr.i23, align 8
[  %A = alloca [390 x [410 x double]], align 16   %A.addr.i = alloca [410 x double]*, align 8 ]   store [410 x double]* %arraydecay, [410 x double]** %A.addr.i, align 8
[  %A = alloca [390 x [410 x double]], align 16 ]   call void @llvm.var.annotation(i8* %A1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 96)
[  %x = alloca [410 x double], align 16   %x.addr.i24 = alloca double*, align 8 ]   store double* %arraydecay7, double** %x.addr.i24, align 8
[  %x = alloca [410 x double], align 16   %x.addr.i = alloca double*, align 8 ]   store double* %arraydecay5, double** %x.addr.i, align 8
[  %x = alloca [410 x double], align 16 ]   call void @llvm.var.annotation(i8* %x2, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 97)
[  %y = alloca [410 x double], align 16   %y.addr.i = alloca double*, align 8 ]   store double* %arraydecay10, double** %y.addr.i, align 8
[  %y = alloca [410 x double], align 16   %y.addr.i25 = alloca double*, align 8 ]   store double* %arraydecay8, double** %y.addr.i25, align 8
[  %y = alloca [410 x double], align 16 ]   call void @llvm.var.annotation(i8* %y3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 98)
[  %tmp = alloca [390 x double], align 16 ]   store double* %arraydecay9, double** %tmp.addr.i, align 8
[  %tmp = alloca [390 x double], align 16 ]   call void @llvm.var.annotation(i8* %tmp4, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 99)
[  %A.addr.i = alloca [410 x double]*, align 8 ]   %arrayidx19.i = getelementptr inbounds [410 x double], [410 x double]* %18, i64 %idxprom18.i
[  %A.addr.i = alloca [410 x double]*, align 8 ]   call void @llvm.var.annotation(i8* %A.addr1.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 27) #1
[  %x.addr.i = alloca double*, align 8 ]   %arrayidx.i = getelementptr inbounds double, double* %7, i64 %idxprom.i
[  %x.addr.i = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %x.addr2.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 28) #1
[  %fn.i = alloca double, align 8 ]   %div.i = fdiv double %conv5.i, %6
[  %fn.i = alloca double, align 8 ]   call void @llvm.var.annotation(i8* %fn3.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 31) #1
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %arrayidx34.i = getelementptr inbounds [410 x double], [410 x double]* %54, i64 %idxprom33.i
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %arrayidx18.i = getelementptr inbounds [410 x double], [410 x double]* %39, i64 %idxprom17.i
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   call void @llvm.var.annotation(i8* %A.addr1.i28, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 66) #1
[  %x.addr.i24 = alloca double*, align 8 ]   %arrayidx22.i = getelementptr inbounds double, double* %43, i64 %idxprom21.i
[  %x.addr.i24 = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %x.addr2.i29, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 67) #1
[  %y.addr.i25 = alloca double*, align 8 ]   %arrayidx42.i = getelementptr inbounds double, double* %61, i64 %idxprom41.i
[  %y.addr.i25 = alloca double*, align 8 ]   %arrayidx32.i = getelementptr inbounds double, double* %51, i64 %idxprom31.i
[  %y.addr.i25 = alloca double*, align 8 ]   %arrayidx.i33 = getelementptr inbounds double, double* %27, i64 %idxprom.i32
[  %y.addr.i25 = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %y.addr3.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 68) #1
[  %tmp.addr.i = alloca double*, align 8 ]   %arrayidx38.i = getelementptr inbounds double, double* %58, i64 %idxprom37.i
[  %tmp.addr.i = alloca double*, align 8 ]   %arrayidx24.i = getelementptr inbounds double, double* %46, i64 %idxprom23.i
[  %tmp.addr.i = alloca double*, align 8 ]   %arrayidx16.i = getelementptr inbounds double, double* %36, i64 %idxprom15.i
[]   %arrayidx11.i = getelementptr inbounds double, double* %32, i64 %idxprom10.i
[]   call void @llvm.var.annotation(i8* %tmp.addr4.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 69) #1
[  %y.addr.i = alloca double*, align 8 ]   %arrayidx.i18 = getelementptr inbounds double, double* %71, i64 %idxprom.i17
[  %y.addr.i = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %y.addr1.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 46) #1
[  %A.addr.i = alloca [410 x double]*, align 8 ]   %arrayidx21.i = getelementptr inbounds [410 x double], [410 x double]* %arrayidx19.i, i64 0, i64 %idxprom20.i
[  %fn.i = alloca double, align 8 ]   %add.i = fadd double 1.000000e+00, %div.i
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %arrayidx36.i = getelementptr inbounds [410 x double], [410 x double]* %arrayidx34.i, i64 0, i64 %idxprom35.i
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %arrayidx20.i = getelementptr inbounds [410 x double], [410 x double]* %arrayidx18.i, i64 0, i64 %idxprom19.i
[  %x.addr.i24 = alloca double*, align 8 ]   %45 = load double, double* %arrayidx22.i, align 8
[  %y.addr.i25 = alloca double*, align 8 ]   %53 = load double, double* %arrayidx32.i, align 8
[  %y.addr.i25 = alloca double*, align 8 ]   store double 0.000000e+00, double* %arrayidx.i33, align 8
[  %tmp.addr.i = alloca double*, align 8 ]   %60 = load double, double* %arrayidx38.i, align 8
[  %tmp.addr.i = alloca double*, align 8 ]   %38 = load double, double* %arrayidx16.i, align 8
[]   store double 0.000000e+00, double* %arrayidx11.i, align 8
[  %y.addr.i = alloca double*, align 8 ]   %73 = load double, double* %arrayidx.i18, align 8
[  %A.addr.i = alloca [410 x double]*, align 8 ]   store double %div17.i, double* %arrayidx21.i, align 8
[  %fn.i = alloca double, align 8   %x.addr.i = alloca double*, align 8 ]   store double %add.i, double* %arrayidx.i, align 8
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %57 = load double, double* %arrayidx36.i, align 8
[]   %42 = load double, double* %arrayidx20.i, align 8
[  %y.addr.i = alloca double*, align 8 ]   %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %70, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %73) #1
[  %A.addr.i23 = alloca [410 x double]*, align 8   %tmp.addr.i = alloca double*, align 8 ]   %mul39.i = fmul double %57, %60
[  %x.addr.i24 = alloca double*, align 8 ]   %mul.i38 = fmul double %42, %45
[  %A.addr.i23 = alloca [410 x double]*, align 8   %tmp.addr.i = alloca double*, align 8   %y.addr.i25 = alloca double*, align 8 ]   %add40.i = fadd double %53, %mul39.i
[  %x.addr.i24 = alloca double*, align 8   %tmp.addr.i = alloca double*, align 8 ]   %add.i39 = fadd double %38, %mul.i38
[  %A.addr.i23 = alloca [410 x double]*, align 8   %tmp.addr.i = alloca double*, align 8   %y.addr.i25 = alloca double*, align 8 ]   store double %add40.i, double* %arrayidx42.i, align 8
[  %x.addr.i24 = alloca double*, align 8   %tmp.addr.i = alloca double*, align 8 ]   store double %add.i39, double* %arrayidx24.i, align 8


[Fallback] attempt to wrap not supported operation:
  %A1 = bitcast [390 x [410 x double]]* %A to i8*
  bail out on missing operand 1 of 1
warning:   %A1 = bitcast [390 x [410 x double]]* %A to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %x2 = bitcast [410 x double]* %x to i8*
  bail out on missing operand 1 of 1
warning:   %x2 = bitcast [410 x double]* %x to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y3 = bitcast [410 x double]* %y to i8*
  bail out on missing operand 1 of 1
warning:   %y3 = bitcast [410 x double]* %y to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %tmp4 = bitcast [390 x double]* %tmp to i8*
  bail out on missing operand 1 of 1
warning:   %tmp4 = bitcast [390 x double]* %tmp to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %A.addr1.i = bitcast [410 x double]** %A.addr.i to i8*
  bail out on missing operand 1 of 1
warning:   %A.addr1.i = bitcast [410 x double]** %A.addr.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %x.addr2.i = bitcast double** %x.addr.i to i8*
  bail out on missing operand 1 of 1
warning:   %x.addr2.i = bitcast double** %x.addr.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %fn3.i = bitcast double* %fn.i to i8*
  bail out on missing operand 1 of 1
warning:   %fn3.i = bitcast double* %fn.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %A.addr1.i28 = bitcast [410 x double]** %A.addr.i23 to i8*
  bail out on missing operand 1 of 1
warning:   %A.addr1.i28 = bitcast [410 x double]** %A.addr.i23 to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %x.addr2.i29 = bitcast double** %x.addr.i24 to i8*
  bail out on missing operand 1 of 1
warning:   %x.addr2.i29 = bitcast double** %x.addr.i24 to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y.addr3.i = bitcast double** %y.addr.i25 to i8*
  bail out on missing operand 1 of 1
warning:   %y.addr3.i = bitcast double** %y.addr.i25 to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %tmp.addr4.i = bitcast double** %tmp.addr.i to i8*
  bail out on missing operand 1 of 1
warning:   %tmp.addr4.i = bitcast double** %tmp.addr.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y.addr1.i = bitcast double** %y.addr.i to i8*
  bail out on missing operand 1 of 1
warning:   %y.addr1.i = bitcast double** %y.addr.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %123, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %128) #1
  Substituted operand number : 3 of 4
  mutated operands to:
  %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %123, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %131) #1
+ /opt/llvm-4.0-d/bin/clang -S -o ./build/_tmp2.atax_out.s ./build/_tmp1.atax_out.ll -O3 -I utilities -I linear-algebra/kernels/atax -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS
clang-4.0: warning: argument unused during compilation: '-I utilities' [-Wunused-command-line-argument]
clang-4.0: warning: argument unused during compilation: '-I linear-algebra/kernels/atax' [-Wunused-command-line-argument]
+ /opt/llvm-4.0-d/bin/clang -o ./build/atax_out ./build/_tmp2.atax_out.s -O3 -I utilities -I linear-algebra/kernels/atax -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS -lm utilities/polybench.c
+ '[' xy '!=' x ']'
+ exit 0
++ dirname ./magiclang.sh
+ ROOT=.
+ '[' 7 -lt 1 ']'
+ '[' -z x ']'
+ '[' x '!=' x ']'
+ OUTDIR=./build
+ mkdir -p ./build
+ SOEXT=so
++ uname -s
+ '[' Darwin = Darwin ']'
+ SOEXT=dylib
+ CLANG=/opt/llvm-4.0-d/bin/clang
+ OPT=/opt/llvm-4.0-d/bin/opt
+ LLC=/opt/llvm-4.0-d/bin/llc
+ PASSLIB=./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib
+ '[' '!' -e ./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib ']'
++ echo atax_out
++ sed -E 's/\.[^\.]$//'
+ OUTNAME=atax_out
++ /opt/llvm-4.0-d/bin/opt --version
++ grep DEBUG
++ wc -l
+ ISDEBUG='       1'
+ DEBUGONLYFLAG=-debug-only=flttofix
+ '[' 1 '!=' 1 ']'
+ /opt/llvm-4.0-d/bin/clang -S -emit-llvm linear-algebra/kernels/atax/atax.c -o ./build/_tmp0.atax_out.ll -I utilities -I linear-algebra/kernels/atax -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS
linear-algebra/kernels/atax/atax.c:28:50: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                 DATA_TYPE POLYBENCH_1D(x,N,n)) __attribute__((always_inline))
                                                               ^
linear-algebra/kernels/atax/atax.c:32:9: warning: 'annotate' attribute ignored when parsing type [-Wignored-attributes]
  fn = (DATA_TYPE)n;
        ^~~~~~~~~
linear-algebra/kernels/atax/atax.h:72:36: note: expanded from macro 'DATA_TYPE'
#  define DATA_TYPE __attribute__((annotate("no_float"))) double
                                   ^~~~~~~~~~~~~~~~~~~~
linear-algebra/kernels/atax/atax.c:38:18: warning: 'annotate' attribute ignored when parsing type [-Wignored-attributes]
      A[i][j] = (DATA_TYPE) ((i+j) % n) / (5*m);
                 ^~~~~~~~~
linear-algebra/kernels/atax/atax.h:72:36: note: expanded from macro 'DATA_TYPE'
#  define DATA_TYPE __attribute__((annotate("no_float"))) double
                                   ^~~~~~~~~~~~~~~~~~~~
linear-algebra/kernels/atax/atax.c:46:50: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                 DATA_TYPE POLYBENCH_1D(y,N,n)) __attribute__((always_inline))
                                                               ^
linear-algebra/kernels/atax/atax.c:69:52: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                 DATA_TYPE POLYBENCH_1D(tmp,M,m)) __attribute__((always_inline))
                                                                 ^
5 warnings generated.
+ '[' x '!=' x ']'
+ /opt/llvm-4.0-d/bin/opt -load=./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib -pass-remarks=flttofix -S -flttofix -dce -debug-only=flttofix ./build/_tmp0.atax_out.ll -o ./build/_tmp1.atax_out.ll -fixpfracbitsamt=52 -fixpbitsamt=64
conversion queue:
[  %A = alloca [390 x [410 x double]], align 16 ]   %A = alloca [390 x [410 x double]], align 16
[  %x = alloca [410 x double], align 16 ]   %x = alloca [410 x double], align 16
[  %y = alloca [410 x double], align 16 ]   %y = alloca [410 x double], align 16
[  %tmp = alloca [390 x double], align 16 ]   %tmp = alloca [390 x double], align 16
[  %A.addr.i = alloca [410 x double]*, align 8 ]   %A.addr.i = alloca [410 x double]*, align 8
[  %x.addr.i = alloca double*, align 8 ]   %x.addr.i = alloca double*, align 8
[  %fn.i = alloca double, align 8 ]   %fn.i = alloca double, align 8
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %A.addr.i23 = alloca [410 x double]*, align 8
[  %x.addr.i24 = alloca double*, align 8 ]   %x.addr.i24 = alloca double*, align 8
[  %y.addr.i25 = alloca double*, align 8 ]   %y.addr.i25 = alloca double*, align 8
[  %tmp.addr.i = alloca double*, align 8 ]   %tmp.addr.i = alloca double*, align 8
[  %y.addr.i = alloca double*, align 8 ]   %y.addr.i = alloca double*, align 8
[  %A = alloca [390 x [410 x double]], align 16 ]   %arraydecay6 = getelementptr inbounds [390 x [410 x double]], [390 x [410 x double]]* %A, i32 0, i32 0
[  %A = alloca [390 x [410 x double]], align 16 ]   %arraydecay = getelementptr inbounds [390 x [410 x double]], [390 x [410 x double]]* %A, i32 0, i32 0
[  %A = alloca [390 x [410 x double]], align 16 ]   %A1 = bitcast [390 x [410 x double]]* %A to i8*
[  %x = alloca [410 x double], align 16 ]   %arraydecay7 = getelementptr inbounds [410 x double], [410 x double]* %x, i32 0, i32 0
[  %x = alloca [410 x double], align 16 ]   %arraydecay5 = getelementptr inbounds [410 x double], [410 x double]* %x, i32 0, i32 0
[  %x = alloca [410 x double], align 16 ]   %x2 = bitcast [410 x double]* %x to i8*
[  %y = alloca [410 x double], align 16 ]   %arraydecay10 = getelementptr inbounds [410 x double], [410 x double]* %y, i32 0, i32 0
[  %y = alloca [410 x double], align 16 ]   %arraydecay8 = getelementptr inbounds [410 x double], [410 x double]* %y, i32 0, i32 0
[  %y = alloca [410 x double], align 16 ]   %y3 = bitcast [410 x double]* %y to i8*
[  %tmp = alloca [390 x double], align 16 ]   %arraydecay9 = getelementptr inbounds [390 x double], [390 x double]* %tmp, i32 0, i32 0
[  %tmp = alloca [390 x double], align 16 ]   %tmp4 = bitcast [390 x double]* %tmp to i8*
[  %A.addr.i = alloca [410 x double]*, align 8 ]   %18 = load [410 x double]*, [410 x double]** %A.addr.i, align 8
[  %A.addr.i = alloca [410 x double]*, align 8 ]   %A.addr1.i = bitcast [410 x double]** %A.addr.i to i8*
[  %x.addr.i = alloca double*, align 8 ]   %7 = load double*, double** %x.addr.i, align 8
[  %x.addr.i = alloca double*, align 8 ]   %x.addr2.i = bitcast double** %x.addr.i to i8*
[  %fn.i = alloca double, align 8 ]   %6 = load double, double* %fn.i, align 8
[  %fn.i = alloca double, align 8 ]   store double %conv.i, double* %fn.i, align 8
[  %fn.i = alloca double, align 8 ]   %fn3.i = bitcast double* %fn.i to i8*
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %54 = load [410 x double]*, [410 x double]** %A.addr.i23, align 8
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %39 = load [410 x double]*, [410 x double]** %A.addr.i23, align 8
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %A.addr1.i28 = bitcast [410 x double]** %A.addr.i23 to i8*
[  %x.addr.i24 = alloca double*, align 8 ]   %43 = load double*, double** %x.addr.i24, align 8
[  %x.addr.i24 = alloca double*, align 8 ]   %x.addr2.i29 = bitcast double** %x.addr.i24 to i8*
[  %y.addr.i25 = alloca double*, align 8 ]   %61 = load double*, double** %y.addr.i25, align 8
[  %y.addr.i25 = alloca double*, align 8 ]   %51 = load double*, double** %y.addr.i25, align 8
[  %y.addr.i25 = alloca double*, align 8 ]   %27 = load double*, double** %y.addr.i25, align 8
[  %y.addr.i25 = alloca double*, align 8 ]   %y.addr3.i = bitcast double** %y.addr.i25 to i8*
[  %tmp.addr.i = alloca double*, align 8 ]   %58 = load double*, double** %tmp.addr.i, align 8
[  %tmp.addr.i = alloca double*, align 8 ]   %46 = load double*, double** %tmp.addr.i, align 8
[  %tmp.addr.i = alloca double*, align 8 ]   %36 = load double*, double** %tmp.addr.i, align 8
[]   %32 = load double*, double** %tmp.addr.i, align 8
[]   %tmp.addr4.i = bitcast double** %tmp.addr.i to i8*
[  %y.addr.i = alloca double*, align 8 ]   %71 = load double*, double** %y.addr.i, align 8
[  %y.addr.i = alloca double*, align 8 ]   %y.addr1.i = bitcast double** %y.addr.i to i8*
[  %A = alloca [390 x [410 x double]], align 16   %A.addr.i23 = alloca [410 x double]*, align 8 ]   store [410 x double]* %arraydecay6, [410 x double]** %A.addr.i23, align 8
[  %A = alloca [390 x [410 x double]], align 16   %A.addr.i = alloca [410 x double]*, align 8 ]   store [410 x double]* %arraydecay, [410 x double]** %A.addr.i, align 8
[  %A = alloca [390 x [410 x double]], align 16 ]   call void @llvm.var.annotation(i8* %A1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 96)
[  %x = alloca [410 x double], align 16   %x.addr.i24 = alloca double*, align 8 ]   store double* %arraydecay7, double** %x.addr.i24, align 8
[  %x = alloca [410 x double], align 16   %x.addr.i = alloca double*, align 8 ]   store double* %arraydecay5, double** %x.addr.i, align 8
[  %x = alloca [410 x double], align 16 ]   call void @llvm.var.annotation(i8* %x2, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 97)
[  %y = alloca [410 x double], align 16   %y.addr.i = alloca double*, align 8 ]   store double* %arraydecay10, double** %y.addr.i, align 8
[  %y = alloca [410 x double], align 16   %y.addr.i25 = alloca double*, align 8 ]   store double* %arraydecay8, double** %y.addr.i25, align 8
[  %y = alloca [410 x double], align 16 ]   call void @llvm.var.annotation(i8* %y3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 98)
[  %tmp = alloca [390 x double], align 16 ]   store double* %arraydecay9, double** %tmp.addr.i, align 8
[  %tmp = alloca [390 x double], align 16 ]   call void @llvm.var.annotation(i8* %tmp4, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 99)
[  %A.addr.i = alloca [410 x double]*, align 8 ]   %arrayidx19.i = getelementptr inbounds [410 x double], [410 x double]* %18, i64 %idxprom18.i
[  %A.addr.i = alloca [410 x double]*, align 8 ]   call void @llvm.var.annotation(i8* %A.addr1.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 27) #1
[  %x.addr.i = alloca double*, align 8 ]   %arrayidx.i = getelementptr inbounds double, double* %7, i64 %idxprom.i
[  %x.addr.i = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %x.addr2.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 28) #1
[  %fn.i = alloca double, align 8 ]   %div.i = fdiv double %conv5.i, %6
[  %fn.i = alloca double, align 8 ]   call void @llvm.var.annotation(i8* %fn3.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 31) #1
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %arrayidx34.i = getelementptr inbounds [410 x double], [410 x double]* %54, i64 %idxprom33.i
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %arrayidx18.i = getelementptr inbounds [410 x double], [410 x double]* %39, i64 %idxprom17.i
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   call void @llvm.var.annotation(i8* %A.addr1.i28, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 66) #1
[  %x.addr.i24 = alloca double*, align 8 ]   %arrayidx22.i = getelementptr inbounds double, double* %43, i64 %idxprom21.i
[  %x.addr.i24 = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %x.addr2.i29, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 67) #1
[  %y.addr.i25 = alloca double*, align 8 ]   %arrayidx42.i = getelementptr inbounds double, double* %61, i64 %idxprom41.i
[  %y.addr.i25 = alloca double*, align 8 ]   %arrayidx32.i = getelementptr inbounds double, double* %51, i64 %idxprom31.i
[  %y.addr.i25 = alloca double*, align 8 ]   %arrayidx.i33 = getelementptr inbounds double, double* %27, i64 %idxprom.i32
[  %y.addr.i25 = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %y.addr3.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 68) #1
[  %tmp.addr.i = alloca double*, align 8 ]   %arrayidx38.i = getelementptr inbounds double, double* %58, i64 %idxprom37.i
[  %tmp.addr.i = alloca double*, align 8 ]   %arrayidx24.i = getelementptr inbounds double, double* %46, i64 %idxprom23.i
[  %tmp.addr.i = alloca double*, align 8 ]   %arrayidx16.i = getelementptr inbounds double, double* %36, i64 %idxprom15.i
[]   %arrayidx11.i = getelementptr inbounds double, double* %32, i64 %idxprom10.i
[]   call void @llvm.var.annotation(i8* %tmp.addr4.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 69) #1
[  %y.addr.i = alloca double*, align 8 ]   %arrayidx.i18 = getelementptr inbounds double, double* %71, i64 %idxprom.i17
[  %y.addr.i = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %y.addr1.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), i32 46) #1
[  %A.addr.i = alloca [410 x double]*, align 8 ]   %arrayidx21.i = getelementptr inbounds [410 x double], [410 x double]* %arrayidx19.i, i64 0, i64 %idxprom20.i
[  %fn.i = alloca double, align 8 ]   %add.i = fadd double 1.000000e+00, %div.i
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %arrayidx36.i = getelementptr inbounds [410 x double], [410 x double]* %arrayidx34.i, i64 0, i64 %idxprom35.i
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %arrayidx20.i = getelementptr inbounds [410 x double], [410 x double]* %arrayidx18.i, i64 0, i64 %idxprom19.i
[  %x.addr.i24 = alloca double*, align 8 ]   %45 = load double, double* %arrayidx22.i, align 8
[  %y.addr.i25 = alloca double*, align 8 ]   %53 = load double, double* %arrayidx32.i, align 8
[  %y.addr.i25 = alloca double*, align 8 ]   store double 0.000000e+00, double* %arrayidx.i33, align 8
[  %tmp.addr.i = alloca double*, align 8 ]   %60 = load double, double* %arrayidx38.i, align 8
[  %tmp.addr.i = alloca double*, align 8 ]   %38 = load double, double* %arrayidx16.i, align 8
[]   store double 0.000000e+00, double* %arrayidx11.i, align 8
[  %y.addr.i = alloca double*, align 8 ]   %73 = load double, double* %arrayidx.i18, align 8
[  %A.addr.i = alloca [410 x double]*, align 8 ]   store double %div17.i, double* %arrayidx21.i, align 8
[  %fn.i = alloca double, align 8   %x.addr.i = alloca double*, align 8 ]   store double %add.i, double* %arrayidx.i, align 8
[  %A.addr.i23 = alloca [410 x double]*, align 8 ]   %57 = load double, double* %arrayidx36.i, align 8
[]   %42 = load double, double* %arrayidx20.i, align 8
[  %y.addr.i = alloca double*, align 8 ]   %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %70, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %73) #1
[  %A.addr.i23 = alloca [410 x double]*, align 8   %tmp.addr.i = alloca double*, align 8 ]   %mul39.i = fmul double %57, %60
[  %x.addr.i24 = alloca double*, align 8 ]   %mul.i38 = fmul double %42, %45
[  %A.addr.i23 = alloca [410 x double]*, align 8   %tmp.addr.i = alloca double*, align 8   %y.addr.i25 = alloca double*, align 8 ]   %add40.i = fadd double %53, %mul39.i
[  %x.addr.i24 = alloca double*, align 8   %tmp.addr.i = alloca double*, align 8 ]   %add.i39 = fadd double %38, %mul.i38
[  %A.addr.i23 = alloca [410 x double]*, align 8   %tmp.addr.i = alloca double*, align 8   %y.addr.i25 = alloca double*, align 8 ]   store double %add40.i, double* %arrayidx42.i, align 8
[  %x.addr.i24 = alloca double*, align 8   %tmp.addr.i = alloca double*, align 8 ]   store double %add.i39, double* %arrayidx24.i, align 8


[Fallback] attempt to wrap not supported operation:
  %A1 = bitcast [390 x [410 x double]]* %A to i8*
  bail out on missing operand 1 of 1
warning:   %A1 = bitcast [390 x [410 x double]]* %A to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %x2 = bitcast [410 x double]* %x to i8*
  bail out on missing operand 1 of 1
warning:   %x2 = bitcast [410 x double]* %x to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y3 = bitcast [410 x double]* %y to i8*
  bail out on missing operand 1 of 1
warning:   %y3 = bitcast [410 x double]* %y to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %tmp4 = bitcast [390 x double]* %tmp to i8*
  bail out on missing operand 1 of 1
warning:   %tmp4 = bitcast [390 x double]* %tmp to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %A.addr1.i = bitcast [410 x double]** %A.addr.i to i8*
  bail out on missing operand 1 of 1
warning:   %A.addr1.i = bitcast [410 x double]** %A.addr.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %x.addr2.i = bitcast double** %x.addr.i to i8*
  bail out on missing operand 1 of 1
warning:   %x.addr2.i = bitcast double** %x.addr.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %fn3.i = bitcast double* %fn.i to i8*
  bail out on missing operand 1 of 1
warning:   %fn3.i = bitcast double* %fn.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %A.addr1.i28 = bitcast [410 x double]** %A.addr.i23 to i8*
  bail out on missing operand 1 of 1
warning:   %A.addr1.i28 = bitcast [410 x double]** %A.addr.i23 to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %x.addr2.i29 = bitcast double** %x.addr.i24 to i8*
  bail out on missing operand 1 of 1
warning:   %x.addr2.i29 = bitcast double** %x.addr.i24 to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y.addr3.i = bitcast double** %y.addr.i25 to i8*
  bail out on missing operand 1 of 1
warning:   %y.addr3.i = bitcast double** %y.addr.i25 to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %tmp.addr4.i = bitcast double** %tmp.addr.i to i8*
  bail out on missing operand 1 of 1
warning:   %tmp.addr4.i = bitcast double** %tmp.addr.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y.addr1.i = bitcast double** %y.addr.i to i8*
  bail out on missing operand 1 of 1
warning:   %y.addr1.i = bitcast double** %y.addr.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %123, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %128) #1
  Substituted operand number : 3 of 4
  mutated operands to:
  %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %123, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %131) #1
+ /opt/llvm-4.0-d/bin/clang -S -o ./build/_tmp2.atax_out.s ./build/_tmp1.atax_out.ll -O3 -I utilities -I linear-algebra/kernels/atax -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS
clang-4.0: warning: argument unused during compilation: '-I utilities' [-Wunused-command-line-argument]
clang-4.0: warning: argument unused during compilation: '-I linear-algebra/kernels/atax' [-Wunused-command-line-argument]
+ /opt/llvm-4.0-d/bin/clang -o ./build/atax_out ./build/_tmp2.atax_out.s -O3 -I utilities -I linear-algebra/kernels/atax -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS -lm utilities/polybench.c
+ '[' xy '!=' x ']'
+ exit 0
++ dirname ./magiclang.sh
+ ROOT=.
+ '[' 7 -lt 1 ']'
+ '[' -z x ']'
+ '[' x '!=' x ']'
+ OUTDIR=./build
+ mkdir -p ./build
+ SOEXT=so
++ uname -s
+ '[' Darwin = Darwin ']'
+ SOEXT=dylib
+ CLANG=/opt/llvm-4.0-d/bin/clang
+ OPT=/opt/llvm-4.0-d/bin/opt
+ LLC=/opt/llvm-4.0-d/bin/llc
+ PASSLIB=./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib
+ '[' '!' -e ./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib ']'
++ echo durbin_out
++ sed -E 's/\.[^\.]$//'
+ OUTNAME=durbin_out
++ /opt/llvm-4.0-d/bin/opt --version
++ grep DEBUG
++ wc -l
+ ISDEBUG='       1'
+ DEBUGONLYFLAG=-debug-only=flttofix
+ '[' 1 '!=' 1 ']'
+ /opt/llvm-4.0-d/bin/clang -S -emit-llvm linear-algebra/solvers/durbin/durbin.c -o ./build/_tmp0.durbin_out.ll -I utilities -I linear-algebra/solvers/durbin -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS
linear-algebra/solvers/durbin/durbin.c:27:50: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                 DATA_TYPE POLYBENCH_1D(r,N,n)) __attribute__((always_inline))
                                                               ^
linear-algebra/solvers/durbin/durbin.c:33:15: warning: 'annotate' attribute ignored when parsing type [-Wignored-attributes]
      r[i] = (DATA_TYPE)(n+1-i) / (n*200.0) + 1.5;
              ^~~~~~~~~
linear-algebra/solvers/durbin/durbin.h:66:36: note: expanded from macro 'DATA_TYPE'
#  define DATA_TYPE __attribute__((annotate("no_float"))) double
                                   ^~~~~~~~~~~~~~~~~~~~
linear-algebra/solvers/durbin/durbin.c:42:50: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                 DATA_TYPE POLYBENCH_1D(y,N,n)) __attribute__((always_inline))
                                                               ^
linear-algebra/solvers/durbin/durbin.c:63:52: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                   DATA_TYPE POLYBENCH_1D(y,N,n)) __attribute__((always_inline))
                                                                 ^
4 warnings generated.
+ '[' x '!=' x ']'
+ /opt/llvm-4.0-d/bin/opt -load=./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib -pass-remarks=flttofix -S -flttofix -dce -debug-only=flttofix ./build/_tmp0.durbin_out.ll -o ./build/_tmp1.durbin_out.ll -fixpfracbitsamt=31 -fixpbitsamt=64
conversion queue:
[  %r = alloca [400 x double], align 16 ]   %r = alloca [400 x double], align 16
[  %y = alloca [400 x double], align 16 ]   %y = alloca [400 x double], align 16
[  %r.addr.i = alloca double*, align 8 ]   %r.addr.i = alloca double*, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %r.addr.i15 = alloca double*, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %y.addr.i16 = alloca double*, align 8
[  %z.i = alloca [400 x double], align 16 ]   %z.i = alloca [400 x double], align 16
[  %alpha.i = alloca double, align 8 ]   %alpha.i = alloca double, align 8
[  %beta.i = alloca double, align 8 ]   %beta.i = alloca double, align 8
[  %sum.i = alloca double, align 8 ]   %sum.i = alloca double, align 8
[  %y.addr.i = alloca double*, align 8 ]   %y.addr.i = alloca double*, align 8
[  %r = alloca [400 x double], align 16 ]   %arraydecay3 = getelementptr inbounds [400 x double], [400 x double]* %r, i32 0, i32 0
[  %r = alloca [400 x double], align 16 ]   %arraydecay = getelementptr inbounds [400 x double], [400 x double]* %r, i32 0, i32 0
[  %r = alloca [400 x double], align 16 ]   %r1 = bitcast [400 x double]* %r to i8*
[  %y = alloca [400 x double], align 16 ]   %arraydecay5 = getelementptr inbounds [400 x double], [400 x double]* %y, i32 0, i32 0
[  %y = alloca [400 x double], align 16 ]   %arraydecay4 = getelementptr inbounds [400 x double], [400 x double]* %y, i32 0, i32 0
[  %y = alloca [400 x double], align 16 ]   %y2 = bitcast [400 x double]* %y to i8*
[  %r.addr.i = alloca double*, align 8 ]   %6 = load double*, double** %r.addr.i, align 8
[  %r.addr.i = alloca double*, align 8 ]   %r.addr1.i = bitcast double** %r.addr.i to i8*
[  %r.addr.i15 = alloca double*, align 8 ]   %31 = load double*, double** %r.addr.i15, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %22 = load double*, double** %r.addr.i15, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %13 = load double*, double** %r.addr.i15, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %10 = load double*, double** %r.addr.i15, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %r.addr1.i18 = bitcast double** %r.addr.i15 to i8*
[  %y.addr.i16 = alloca double*, align 8 ]   %56 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %52 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %42 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %38 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %26 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %12 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %y.addr2.i = bitcast double** %y.addr.i16 to i8*
[  %z.i = alloca [400 x double], align 16 ]   %arrayidx45.i = getelementptr inbounds [400 x double], [400 x double]* %z.i, i64 0, i64 %idxprom44.i
[  %z.i = alloca [400 x double], align 16 ]   %arrayidx37.i = getelementptr inbounds [400 x double], [400 x double]* %z.i, i64 0, i64 %idxprom36.i
[  %z.i = alloca [400 x double], align 16 ]   %z3.i = bitcast [400 x double]* %z.i to i8*
[  %alpha.i = alloca double, align 8 ]   %55 = load double, double* %alpha.i, align 8
[  %alpha.i = alloca double, align 8 ]   %41 = load double, double* %alpha.i, align 8
[  %alpha.i = alloca double, align 8 ]   %18 = load double, double* %alpha.i, align 8
[  %alpha.i = alloca double, align 8 ]   %17 = load double, double* %alpha.i, align 8
[  %alpha.i = alloca double, align 8 ]   %alpha4.i = bitcast double* %alpha.i to i8*
[  %beta.i = alloca double, align 8 ]   %35 = load double, double* %beta.i, align 8
[  %beta.i = alloca double, align 8 ]   %19 = load double, double* %beta.i, align 8
[  %beta.i = alloca double, align 8 ]   store double 1.000000e+00, double* %beta.i, align 8
[  %beta.i = alloca double, align 8 ]   %beta5.i = bitcast double* %beta.i to i8*
[  %sum.i = alloca double, align 8 ]   %34 = load double, double* %sum.i, align 8
[  %sum.i = alloca double, align 8 ]   %29 = load double, double* %sum.i, align 8
[  %sum.i = alloca double, align 8 ]   store double 0.000000e+00, double* %sum.i, align 8
[  %sum.i = alloca double, align 8 ]   %sum6.i = bitcast double* %sum.i to i8*
[  %y.addr.i = alloca double*, align 8 ]   %65 = load double*, double** %y.addr.i, align 8
[  %y.addr.i = alloca double*, align 8 ]   %y.addr1.i = bitcast double** %y.addr.i to i8*
[  %r = alloca [400 x double], align 16   %r.addr.i15 = alloca double*, align 8 ]   store double* %arraydecay3, double** %r.addr.i15, align 8
[  %r = alloca [400 x double], align 16   %r.addr.i = alloca double*, align 8 ]   store double* %arraydecay, double** %r.addr.i, align 8
[  %r = alloca [400 x double], align 16 ]   call void @llvm.var.annotation(i8* %r1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 104)
[  %y = alloca [400 x double], align 16   %y.addr.i = alloca double*, align 8 ]   store double* %arraydecay5, double** %y.addr.i, align 8
[  %y = alloca [400 x double], align 16   %y.addr.i16 = alloca double*, align 8 ]   store double* %arraydecay4, double** %y.addr.i16, align 8
[  %y = alloca [400 x double], align 16 ]   call void @llvm.var.annotation(i8* %y2, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 105)
[  %r.addr.i = alloca double*, align 8 ]   %arrayidx.i = getelementptr inbounds double, double* %6, i64 %idxprom.i
[  %r.addr.i = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %r.addr1.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 27) #1
[  %r.addr.i15 = alloca double*, align 8 ]   %arrayidx22.i = getelementptr inbounds double, double* %31, i64 %idxprom21.i
[  %r.addr.i15 = alloca double*, align 8 ]   %arrayidx17.i = getelementptr inbounds double, double* %22, i64 %idxprom.i24
[  %r.addr.i15 = alloca double*, align 8 ]   %14 = load double, double* %13, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %11 = load double, double* %10, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %r.addr1.i18, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 62) #1
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx52.i = getelementptr inbounds double, double* %56, i64 %idxprom51.i
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx47.i = getelementptr inbounds double, double* %52, i64 %idxprom46.i
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx33.i = getelementptr inbounds double, double* %42, i64 %idxprom32.i
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx29.i = getelementptr inbounds double, double* %38, i64 %idxprom28.i
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx19.i = getelementptr inbounds double, double* %26, i64 %idxprom18.i
[  %y.addr.i16 = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %y.addr2.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 63) #1
[  %z.i = alloca [400 x double], align 16 ]   %51 = load double, double* %arrayidx45.i, align 8
[  %z.i = alloca [400 x double], align 16 ]   call void @llvm.var.annotation(i8* %z3.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 65) #1
[  %alpha.i = alloca double, align 8 ]   %mul.i22 = fmul double %17, %18
[  %alpha.i = alloca double, align 8 ]   call void @llvm.var.annotation(i8* %alpha4.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 66) #1
[  %beta.i = alloca double, align 8 ]   call void @llvm.var.annotation(i8* %beta5.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 67) #1
[  %sum.i = alloca double, align 8 ]   call void @llvm.var.annotation(i8* %sum6.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 68) #1
[  %y.addr.i = alloca double*, align 8 ]   %arrayidx.i12 = getelementptr inbounds double, double* %65, i64 %idxprom.i11
[  %y.addr.i = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %y.addr1.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 42) #1
[  %r.addr.i = alloca double*, align 8 ]   store double %add3.i, double* %arrayidx.i, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %33 = load double, double* %arrayidx22.i, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %25 = load double, double* %arrayidx17.i, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %sub9.i = fsub double -0.000000e+00, %14
[  %r.addr.i15 = alloca double*, align 8 ]   %sub.i19 = fsub double -0.000000e+00, %11
[  %y.addr.i16 = alloca double*, align 8   %alpha.i = alloca double, align 8 ]   store double %55, double* %arrayidx52.i, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %45 = load double, double* %arrayidx33.i, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %40 = load double, double* %arrayidx29.i, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %28 = load double, double* %arrayidx19.i, align 8
[  %z.i = alloca [400 x double], align 16   %y.addr.i16 = alloca double*, align 8 ]   store double %51, double* %arrayidx47.i, align 8
[  %alpha.i = alloca double, align 8 ]   %sub10.i = fsub double 1.000000e+00, %mul.i22
[  %y.addr.i = alloca double*, align 8 ]   %67 = load double, double* %arrayidx.i12, align 8
[  %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8 ]   %add23.i = fadd double %33, %34
[  %r.addr.i15 = alloca double*, align 8   %alpha.i = alloca double, align 8 ]   store double %sub9.i, double* %alpha.i, align 8
[  %r.addr.i15 = alloca double*, align 8   %y.addr.i16 = alloca double*, align 8 ]   store double %sub.i19, double* %12, align 8
[  %y.addr.i16 = alloca double*, align 8   %alpha.i = alloca double, align 8 ]   %mul34.i = fmul double %41, %45
[  %y.addr.i16 = alloca double*, align 8   %r.addr.i15 = alloca double*, align 8 ]   %mul20.i = fmul double %25, %28
[  %alpha.i = alloca double, align 8   %beta.i = alloca double, align 8 ]   %mul11.i = fmul double %sub10.i, %19
[  %y.addr.i = alloca double*, align 8 ]   %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %64, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %67) #1
[  %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8 ]   %sub24.i = fsub double -0.000000e+00, %add23.i
[  %y.addr.i16 = alloca double*, align 8   %alpha.i = alloca double, align 8 ]   %add35.i = fadd double %40, %mul34.i
[  %y.addr.i16 = alloca double*, align 8   %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8 ]   %add.i25 = fadd double %29, %mul20.i
[  %alpha.i = alloca double, align 8   %beta.i = alloca double, align 8 ]   store double %mul11.i, double* %beta.i, align 8
[  %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8   %beta.i = alloca double, align 8 ]   %div.i27 = fdiv double %sub24.i, %35
[  %y.addr.i16 = alloca double*, align 8   %alpha.i = alloca double, align 8   %z.i = alloca [400 x double], align 16 ]   store double %add35.i, double* %arrayidx37.i, align 8
[  %y.addr.i16 = alloca double*, align 8   %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8 ]   store double %add.i25, double* %sum.i, align 8
[  %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8   %beta.i = alloca double, align 8   %alpha.i = alloca double, align 8 ]   store double %div.i27, double* %alpha.i, align 8


[Fallback] attempt to wrap not supported operation:
  %r1 = bitcast [400 x double]* %r to i8*
  bail out on missing operand 1 of 1
warning:   %r1 = bitcast [400 x double]* %r to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y2 = bitcast [400 x double]* %y to i8*
  bail out on missing operand 1 of 1
warning:   %y2 = bitcast [400 x double]* %y to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %r.addr1.i = bitcast double** %r.addr.i to i8*
  bail out on missing operand 1 of 1
warning:   %r.addr1.i = bitcast double** %r.addr.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %r.addr1.i18 = bitcast double** %r.addr.i15 to i8*
  bail out on missing operand 1 of 1
warning:   %r.addr1.i18 = bitcast double** %r.addr.i15 to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y.addr2.i = bitcast double** %y.addr.i16 to i8*
  bail out on missing operand 1 of 1
warning:   %y.addr2.i = bitcast double** %y.addr.i16 to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %z3.i = bitcast [400 x double]* %z.i to i8*
  bail out on missing operand 1 of 1
warning:   %z3.i = bitcast [400 x double]* %z.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %alpha4.i = bitcast double* %alpha.i to i8*
  bail out on missing operand 1 of 1
warning:   %alpha4.i = bitcast double* %alpha.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %beta5.i = bitcast double* %beta.i to i8*
  bail out on missing operand 1 of 1
warning:   %beta5.i = bitcast double* %beta.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %sum6.i = bitcast double* %sum.i to i8*
  bail out on missing operand 1 of 1
warning:   %sum6.i = bitcast double* %sum.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y.addr1.i = bitcast double** %y.addr.i to i8*
  bail out on missing operand 1 of 1
warning:   %y.addr1.i = bitcast double** %y.addr.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %131, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %136) #1
  Substituted operand number : 3 of 4
  mutated operands to:
  %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %131, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %139) #1
+ /opt/llvm-4.0-d/bin/clang -S -o ./build/_tmp2.durbin_out.s ./build/_tmp1.durbin_out.ll -O3 -I utilities -I linear-algebra/solvers/durbin -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS
clang-4.0: warning: argument unused during compilation: '-I utilities' [-Wunused-command-line-argument]
clang-4.0: warning: argument unused during compilation: '-I linear-algebra/solvers/durbin' [-Wunused-command-line-argument]
+ /opt/llvm-4.0-d/bin/clang -o ./build/durbin_out ./build/_tmp2.durbin_out.s -O3 -I utilities -I linear-algebra/solvers/durbin -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS -lm utilities/polybench.c
+ '[' x '!=' x ']'
+ /opt/llvm-4.0-d/bin/clang -S -o ./build/_tmp2_not_opt.durbin_out.s ./build/_tmp0.durbin_out.ll -O3 -I utilities -I linear-algebra/solvers/durbin -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS
clang-4.0: warning: argument unused during compilation: '-I utilities' [-Wunused-command-line-argument]
clang-4.0: warning: argument unused during compilation: '-I linear-algebra/solvers/durbin' [-Wunused-command-line-argument]
+ /opt/llvm-4.0-d/bin/clang -o ./build/durbin_out_not_opt ./build/_tmp2_not_opt.durbin_out.s -O3 -I utilities -I linear-algebra/solvers/durbin -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS -lm utilities/polybench.c
++ dirname ./magiclang.sh
+ ROOT=.
+ '[' 7 -lt 1 ']'
+ '[' -z x ']'
+ '[' x '!=' x ']'
+ OUTDIR=./build
+ mkdir -p ./build
+ SOEXT=so
++ uname -s
+ '[' Darwin = Darwin ']'
+ SOEXT=dylib
+ CLANG=/opt/llvm-4.0-d/bin/clang
+ OPT=/opt/llvm-4.0-d/bin/opt
+ LLC=/opt/llvm-4.0-d/bin/llc
+ PASSLIB=./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib
+ '[' '!' -e ./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib ']'
++ echo durbin_out
++ sed -E 's/\.[^\.]$//'
+ OUTNAME=durbin_out
++ /opt/llvm-4.0-d/bin/opt --version
++ grep DEBUG
++ wc -l
+ ISDEBUG='       1'
+ DEBUGONLYFLAG=-debug-only=flttofix
+ '[' 1 '!=' 1 ']'
+ /opt/llvm-4.0-d/bin/clang -S -emit-llvm linear-algebra/solvers/durbin/durbin.c -o ./build/_tmp0.durbin_out.ll -I utilities -I linear-algebra/solvers/durbin -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS
linear-algebra/solvers/durbin/durbin.c:27:50: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                 DATA_TYPE POLYBENCH_1D(r,N,n)) __attribute__((always_inline))
                                                               ^
linear-algebra/solvers/durbin/durbin.c:33:15: warning: 'annotate' attribute ignored when parsing type [-Wignored-attributes]
      r[i] = (DATA_TYPE)(n+1-i) / (n*200.0) + 1.5;
              ^~~~~~~~~
linear-algebra/solvers/durbin/durbin.h:66:36: note: expanded from macro 'DATA_TYPE'
#  define DATA_TYPE __attribute__((annotate("no_float"))) double
                                   ^~~~~~~~~~~~~~~~~~~~
linear-algebra/solvers/durbin/durbin.c:42:50: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                 DATA_TYPE POLYBENCH_1D(y,N,n)) __attribute__((always_inline))
                                                               ^
linear-algebra/solvers/durbin/durbin.c:63:52: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                   DATA_TYPE POLYBENCH_1D(y,N,n)) __attribute__((always_inline))
                                                                 ^
4 warnings generated.
+ '[' x '!=' x ']'
+ /opt/llvm-4.0-d/bin/opt -load=./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib -pass-remarks=flttofix -S -flttofix -dce -debug-only=flttofix ./build/_tmp0.durbin_out.ll -o ./build/_tmp1.durbin_out.ll -fixpfracbitsamt=47 -fixpbitsamt=64
conversion queue:
[  %r = alloca [400 x double], align 16 ]   %r = alloca [400 x double], align 16
[  %y = alloca [400 x double], align 16 ]   %y = alloca [400 x double], align 16
[  %r.addr.i = alloca double*, align 8 ]   %r.addr.i = alloca double*, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %r.addr.i15 = alloca double*, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %y.addr.i16 = alloca double*, align 8
[  %z.i = alloca [400 x double], align 16 ]   %z.i = alloca [400 x double], align 16
[  %alpha.i = alloca double, align 8 ]   %alpha.i = alloca double, align 8
[  %beta.i = alloca double, align 8 ]   %beta.i = alloca double, align 8
[  %sum.i = alloca double, align 8 ]   %sum.i = alloca double, align 8
[  %y.addr.i = alloca double*, align 8 ]   %y.addr.i = alloca double*, align 8
[  %r = alloca [400 x double], align 16 ]   %arraydecay3 = getelementptr inbounds [400 x double], [400 x double]* %r, i32 0, i32 0
[  %r = alloca [400 x double], align 16 ]   %arraydecay = getelementptr inbounds [400 x double], [400 x double]* %r, i32 0, i32 0
[  %r = alloca [400 x double], align 16 ]   %r1 = bitcast [400 x double]* %r to i8*
[  %y = alloca [400 x double], align 16 ]   %arraydecay5 = getelementptr inbounds [400 x double], [400 x double]* %y, i32 0, i32 0
[  %y = alloca [400 x double], align 16 ]   %arraydecay4 = getelementptr inbounds [400 x double], [400 x double]* %y, i32 0, i32 0
[  %y = alloca [400 x double], align 16 ]   %y2 = bitcast [400 x double]* %y to i8*
[  %r.addr.i = alloca double*, align 8 ]   %6 = load double*, double** %r.addr.i, align 8
[  %r.addr.i = alloca double*, align 8 ]   %r.addr1.i = bitcast double** %r.addr.i to i8*
[  %r.addr.i15 = alloca double*, align 8 ]   %31 = load double*, double** %r.addr.i15, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %22 = load double*, double** %r.addr.i15, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %13 = load double*, double** %r.addr.i15, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %10 = load double*, double** %r.addr.i15, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %r.addr1.i18 = bitcast double** %r.addr.i15 to i8*
[  %y.addr.i16 = alloca double*, align 8 ]   %56 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %52 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %42 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %38 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %26 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %12 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %y.addr2.i = bitcast double** %y.addr.i16 to i8*
[  %z.i = alloca [400 x double], align 16 ]   %arrayidx45.i = getelementptr inbounds [400 x double], [400 x double]* %z.i, i64 0, i64 %idxprom44.i
[  %z.i = alloca [400 x double], align 16 ]   %arrayidx37.i = getelementptr inbounds [400 x double], [400 x double]* %z.i, i64 0, i64 %idxprom36.i
[  %z.i = alloca [400 x double], align 16 ]   %z3.i = bitcast [400 x double]* %z.i to i8*
[  %alpha.i = alloca double, align 8 ]   %55 = load double, double* %alpha.i, align 8
[  %alpha.i = alloca double, align 8 ]   %41 = load double, double* %alpha.i, align 8
[  %alpha.i = alloca double, align 8 ]   %18 = load double, double* %alpha.i, align 8
[  %alpha.i = alloca double, align 8 ]   %17 = load double, double* %alpha.i, align 8
[  %alpha.i = alloca double, align 8 ]   %alpha4.i = bitcast double* %alpha.i to i8*
[  %beta.i = alloca double, align 8 ]   %35 = load double, double* %beta.i, align 8
[  %beta.i = alloca double, align 8 ]   %19 = load double, double* %beta.i, align 8
[  %beta.i = alloca double, align 8 ]   store double 1.000000e+00, double* %beta.i, align 8
[  %beta.i = alloca double, align 8 ]   %beta5.i = bitcast double* %beta.i to i8*
[  %sum.i = alloca double, align 8 ]   %34 = load double, double* %sum.i, align 8
[  %sum.i = alloca double, align 8 ]   %29 = load double, double* %sum.i, align 8
[  %sum.i = alloca double, align 8 ]   store double 0.000000e+00, double* %sum.i, align 8
[  %sum.i = alloca double, align 8 ]   %sum6.i = bitcast double* %sum.i to i8*
[  %y.addr.i = alloca double*, align 8 ]   %65 = load double*, double** %y.addr.i, align 8
[  %y.addr.i = alloca double*, align 8 ]   %y.addr1.i = bitcast double** %y.addr.i to i8*
[  %r = alloca [400 x double], align 16   %r.addr.i15 = alloca double*, align 8 ]   store double* %arraydecay3, double** %r.addr.i15, align 8
[  %r = alloca [400 x double], align 16   %r.addr.i = alloca double*, align 8 ]   store double* %arraydecay, double** %r.addr.i, align 8
[  %r = alloca [400 x double], align 16 ]   call void @llvm.var.annotation(i8* %r1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 104)
[  %y = alloca [400 x double], align 16   %y.addr.i = alloca double*, align 8 ]   store double* %arraydecay5, double** %y.addr.i, align 8
[  %y = alloca [400 x double], align 16   %y.addr.i16 = alloca double*, align 8 ]   store double* %arraydecay4, double** %y.addr.i16, align 8
[  %y = alloca [400 x double], align 16 ]   call void @llvm.var.annotation(i8* %y2, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 105)
[  %r.addr.i = alloca double*, align 8 ]   %arrayidx.i = getelementptr inbounds double, double* %6, i64 %idxprom.i
[  %r.addr.i = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %r.addr1.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 27) #1
[  %r.addr.i15 = alloca double*, align 8 ]   %arrayidx22.i = getelementptr inbounds double, double* %31, i64 %idxprom21.i
[  %r.addr.i15 = alloca double*, align 8 ]   %arrayidx17.i = getelementptr inbounds double, double* %22, i64 %idxprom.i24
[  %r.addr.i15 = alloca double*, align 8 ]   %14 = load double, double* %13, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %11 = load double, double* %10, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %r.addr1.i18, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 62) #1
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx52.i = getelementptr inbounds double, double* %56, i64 %idxprom51.i
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx47.i = getelementptr inbounds double, double* %52, i64 %idxprom46.i
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx33.i = getelementptr inbounds double, double* %42, i64 %idxprom32.i
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx29.i = getelementptr inbounds double, double* %38, i64 %idxprom28.i
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx19.i = getelementptr inbounds double, double* %26, i64 %idxprom18.i
[  %y.addr.i16 = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %y.addr2.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 63) #1
[  %z.i = alloca [400 x double], align 16 ]   %51 = load double, double* %arrayidx45.i, align 8
[  %z.i = alloca [400 x double], align 16 ]   call void @llvm.var.annotation(i8* %z3.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 65) #1
[  %alpha.i = alloca double, align 8 ]   %mul.i22 = fmul double %17, %18
[  %alpha.i = alloca double, align 8 ]   call void @llvm.var.annotation(i8* %alpha4.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 66) #1
[  %beta.i = alloca double, align 8 ]   call void @llvm.var.annotation(i8* %beta5.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 67) #1
[  %sum.i = alloca double, align 8 ]   call void @llvm.var.annotation(i8* %sum6.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 68) #1
[  %y.addr.i = alloca double*, align 8 ]   %arrayidx.i12 = getelementptr inbounds double, double* %65, i64 %idxprom.i11
[  %y.addr.i = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %y.addr1.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 42) #1
[  %r.addr.i = alloca double*, align 8 ]   store double %add3.i, double* %arrayidx.i, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %33 = load double, double* %arrayidx22.i, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %25 = load double, double* %arrayidx17.i, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %sub9.i = fsub double -0.000000e+00, %14
[  %r.addr.i15 = alloca double*, align 8 ]   %sub.i19 = fsub double -0.000000e+00, %11
[  %y.addr.i16 = alloca double*, align 8   %alpha.i = alloca double, align 8 ]   store double %55, double* %arrayidx52.i, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %45 = load double, double* %arrayidx33.i, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %40 = load double, double* %arrayidx29.i, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %28 = load double, double* %arrayidx19.i, align 8
[  %z.i = alloca [400 x double], align 16   %y.addr.i16 = alloca double*, align 8 ]   store double %51, double* %arrayidx47.i, align 8
[  %alpha.i = alloca double, align 8 ]   %sub10.i = fsub double 1.000000e+00, %mul.i22
[  %y.addr.i = alloca double*, align 8 ]   %67 = load double, double* %arrayidx.i12, align 8
[  %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8 ]   %add23.i = fadd double %33, %34
[  %r.addr.i15 = alloca double*, align 8   %alpha.i = alloca double, align 8 ]   store double %sub9.i, double* %alpha.i, align 8
[  %r.addr.i15 = alloca double*, align 8   %y.addr.i16 = alloca double*, align 8 ]   store double %sub.i19, double* %12, align 8
[  %y.addr.i16 = alloca double*, align 8   %alpha.i = alloca double, align 8 ]   %mul34.i = fmul double %41, %45
[  %y.addr.i16 = alloca double*, align 8   %r.addr.i15 = alloca double*, align 8 ]   %mul20.i = fmul double %25, %28
[  %alpha.i = alloca double, align 8   %beta.i = alloca double, align 8 ]   %mul11.i = fmul double %sub10.i, %19
[  %y.addr.i = alloca double*, align 8 ]   %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %64, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %67) #1
[  %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8 ]   %sub24.i = fsub double -0.000000e+00, %add23.i
[  %y.addr.i16 = alloca double*, align 8   %alpha.i = alloca double, align 8 ]   %add35.i = fadd double %40, %mul34.i
[  %y.addr.i16 = alloca double*, align 8   %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8 ]   %add.i25 = fadd double %29, %mul20.i
[  %alpha.i = alloca double, align 8   %beta.i = alloca double, align 8 ]   store double %mul11.i, double* %beta.i, align 8
[  %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8   %beta.i = alloca double, align 8 ]   %div.i27 = fdiv double %sub24.i, %35
[  %y.addr.i16 = alloca double*, align 8   %alpha.i = alloca double, align 8   %z.i = alloca [400 x double], align 16 ]   store double %add35.i, double* %arrayidx37.i, align 8
[  %y.addr.i16 = alloca double*, align 8   %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8 ]   store double %add.i25, double* %sum.i, align 8
[  %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8   %beta.i = alloca double, align 8   %alpha.i = alloca double, align 8 ]   store double %div.i27, double* %alpha.i, align 8


[Fallback] attempt to wrap not supported operation:
  %r1 = bitcast [400 x double]* %r to i8*
  bail out on missing operand 1 of 1
warning:   %r1 = bitcast [400 x double]* %r to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y2 = bitcast [400 x double]* %y to i8*
  bail out on missing operand 1 of 1
warning:   %y2 = bitcast [400 x double]* %y to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %r.addr1.i = bitcast double** %r.addr.i to i8*
  bail out on missing operand 1 of 1
warning:   %r.addr1.i = bitcast double** %r.addr.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %r.addr1.i18 = bitcast double** %r.addr.i15 to i8*
  bail out on missing operand 1 of 1
warning:   %r.addr1.i18 = bitcast double** %r.addr.i15 to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y.addr2.i = bitcast double** %y.addr.i16 to i8*
  bail out on missing operand 1 of 1
warning:   %y.addr2.i = bitcast double** %y.addr.i16 to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %z3.i = bitcast [400 x double]* %z.i to i8*
  bail out on missing operand 1 of 1
warning:   %z3.i = bitcast [400 x double]* %z.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %alpha4.i = bitcast double* %alpha.i to i8*
  bail out on missing operand 1 of 1
warning:   %alpha4.i = bitcast double* %alpha.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %beta5.i = bitcast double* %beta.i to i8*
  bail out on missing operand 1 of 1
warning:   %beta5.i = bitcast double* %beta.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %sum6.i = bitcast double* %sum.i to i8*
  bail out on missing operand 1 of 1
warning:   %sum6.i = bitcast double* %sum.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y.addr1.i = bitcast double** %y.addr.i to i8*
  bail out on missing operand 1 of 1
warning:   %y.addr1.i = bitcast double** %y.addr.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %131, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %136) #1
  Substituted operand number : 3 of 4
  mutated operands to:
  %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %131, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %139) #1
+ /opt/llvm-4.0-d/bin/clang -S -o ./build/_tmp2.durbin_out.s ./build/_tmp1.durbin_out.ll -O3 -I utilities -I linear-algebra/solvers/durbin -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS
clang-4.0: warning: argument unused during compilation: '-I utilities' [-Wunused-command-line-argument]
clang-4.0: warning: argument unused during compilation: '-I linear-algebra/solvers/durbin' [-Wunused-command-line-argument]
+ /opt/llvm-4.0-d/bin/clang -o ./build/durbin_out ./build/_tmp2.durbin_out.s -O3 -I utilities -I linear-algebra/solvers/durbin -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS -lm utilities/polybench.c
+ '[' xy '!=' x ']'
+ exit 0
++ dirname ./magiclang.sh
+ ROOT=.
+ '[' 7 -lt 1 ']'
+ '[' -z x ']'
+ '[' x '!=' x ']'
+ OUTDIR=./build
+ mkdir -p ./build
+ SOEXT=so
++ uname -s
+ '[' Darwin = Darwin ']'
+ SOEXT=dylib
+ CLANG=/opt/llvm-4.0-d/bin/clang
+ OPT=/opt/llvm-4.0-d/bin/opt
+ LLC=/opt/llvm-4.0-d/bin/llc
+ PASSLIB=./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib
+ '[' '!' -e ./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib ']'
++ echo durbin_out
++ sed -E 's/\.[^\.]$//'
+ OUTNAME=durbin_out
++ /opt/llvm-4.0-d/bin/opt --version
++ grep DEBUG
++ wc -l
+ ISDEBUG='       1'
+ DEBUGONLYFLAG=-debug-only=flttofix
+ '[' 1 '!=' 1 ']'
+ /opt/llvm-4.0-d/bin/clang -S -emit-llvm linear-algebra/solvers/durbin/durbin.c -o ./build/_tmp0.durbin_out.ll -I utilities -I linear-algebra/solvers/durbin -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS
linear-algebra/solvers/durbin/durbin.c:27:50: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                 DATA_TYPE POLYBENCH_1D(r,N,n)) __attribute__((always_inline))
                                                               ^
linear-algebra/solvers/durbin/durbin.c:33:15: warning: 'annotate' attribute ignored when parsing type [-Wignored-attributes]
      r[i] = (DATA_TYPE)(n+1-i) / (n*200.0) + 1.5;
              ^~~~~~~~~
linear-algebra/solvers/durbin/durbin.h:66:36: note: expanded from macro 'DATA_TYPE'
#  define DATA_TYPE __attribute__((annotate("no_float"))) double
                                   ^~~~~~~~~~~~~~~~~~~~
linear-algebra/solvers/durbin/durbin.c:42:50: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                 DATA_TYPE POLYBENCH_1D(y,N,n)) __attribute__((always_inline))
                                                               ^
linear-algebra/solvers/durbin/durbin.c:63:52: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                   DATA_TYPE POLYBENCH_1D(y,N,n)) __attribute__((always_inline))
                                                                 ^
4 warnings generated.
+ '[' x '!=' x ']'
+ /opt/llvm-4.0-d/bin/opt -load=./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib -pass-remarks=flttofix -S -flttofix -dce -debug-only=flttofix ./build/_tmp0.durbin_out.ll -o ./build/_tmp1.durbin_out.ll -fixpfracbitsamt=55 -fixpbitsamt=64
conversion queue:
[  %r = alloca [400 x double], align 16 ]   %r = alloca [400 x double], align 16
[  %y = alloca [400 x double], align 16 ]   %y = alloca [400 x double], align 16
[  %r.addr.i = alloca double*, align 8 ]   %r.addr.i = alloca double*, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %r.addr.i15 = alloca double*, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %y.addr.i16 = alloca double*, align 8
[  %z.i = alloca [400 x double], align 16 ]   %z.i = alloca [400 x double], align 16
[  %alpha.i = alloca double, align 8 ]   %alpha.i = alloca double, align 8
[  %beta.i = alloca double, align 8 ]   %beta.i = alloca double, align 8
[  %sum.i = alloca double, align 8 ]   %sum.i = alloca double, align 8
[  %y.addr.i = alloca double*, align 8 ]   %y.addr.i = alloca double*, align 8
[  %r = alloca [400 x double], align 16 ]   %arraydecay3 = getelementptr inbounds [400 x double], [400 x double]* %r, i32 0, i32 0
[  %r = alloca [400 x double], align 16 ]   %arraydecay = getelementptr inbounds [400 x double], [400 x double]* %r, i32 0, i32 0
[  %r = alloca [400 x double], align 16 ]   %r1 = bitcast [400 x double]* %r to i8*
[  %y = alloca [400 x double], align 16 ]   %arraydecay5 = getelementptr inbounds [400 x double], [400 x double]* %y, i32 0, i32 0
[  %y = alloca [400 x double], align 16 ]   %arraydecay4 = getelementptr inbounds [400 x double], [400 x double]* %y, i32 0, i32 0
[  %y = alloca [400 x double], align 16 ]   %y2 = bitcast [400 x double]* %y to i8*
[  %r.addr.i = alloca double*, align 8 ]   %6 = load double*, double** %r.addr.i, align 8
[  %r.addr.i = alloca double*, align 8 ]   %r.addr1.i = bitcast double** %r.addr.i to i8*
[  %r.addr.i15 = alloca double*, align 8 ]   %31 = load double*, double** %r.addr.i15, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %22 = load double*, double** %r.addr.i15, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %13 = load double*, double** %r.addr.i15, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %10 = load double*, double** %r.addr.i15, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %r.addr1.i18 = bitcast double** %r.addr.i15 to i8*
[  %y.addr.i16 = alloca double*, align 8 ]   %56 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %52 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %42 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %38 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %26 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %12 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %y.addr2.i = bitcast double** %y.addr.i16 to i8*
[  %z.i = alloca [400 x double], align 16 ]   %arrayidx45.i = getelementptr inbounds [400 x double], [400 x double]* %z.i, i64 0, i64 %idxprom44.i
[  %z.i = alloca [400 x double], align 16 ]   %arrayidx37.i = getelementptr inbounds [400 x double], [400 x double]* %z.i, i64 0, i64 %idxprom36.i
[  %z.i = alloca [400 x double], align 16 ]   %z3.i = bitcast [400 x double]* %z.i to i8*
[  %alpha.i = alloca double, align 8 ]   %55 = load double, double* %alpha.i, align 8
[  %alpha.i = alloca double, align 8 ]   %41 = load double, double* %alpha.i, align 8
[  %alpha.i = alloca double, align 8 ]   %18 = load double, double* %alpha.i, align 8
[  %alpha.i = alloca double, align 8 ]   %17 = load double, double* %alpha.i, align 8
[  %alpha.i = alloca double, align 8 ]   %alpha4.i = bitcast double* %alpha.i to i8*
[  %beta.i = alloca double, align 8 ]   %35 = load double, double* %beta.i, align 8
[  %beta.i = alloca double, align 8 ]   %19 = load double, double* %beta.i, align 8
[  %beta.i = alloca double, align 8 ]   store double 1.000000e+00, double* %beta.i, align 8
[  %beta.i = alloca double, align 8 ]   %beta5.i = bitcast double* %beta.i to i8*
[  %sum.i = alloca double, align 8 ]   %34 = load double, double* %sum.i, align 8
[  %sum.i = alloca double, align 8 ]   %29 = load double, double* %sum.i, align 8
[  %sum.i = alloca double, align 8 ]   store double 0.000000e+00, double* %sum.i, align 8
[  %sum.i = alloca double, align 8 ]   %sum6.i = bitcast double* %sum.i to i8*
[  %y.addr.i = alloca double*, align 8 ]   %65 = load double*, double** %y.addr.i, align 8
[  %y.addr.i = alloca double*, align 8 ]   %y.addr1.i = bitcast double** %y.addr.i to i8*
[  %r = alloca [400 x double], align 16   %r.addr.i15 = alloca double*, align 8 ]   store double* %arraydecay3, double** %r.addr.i15, align 8
[  %r = alloca [400 x double], align 16   %r.addr.i = alloca double*, align 8 ]   store double* %arraydecay, double** %r.addr.i, align 8
[  %r = alloca [400 x double], align 16 ]   call void @llvm.var.annotation(i8* %r1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 104)
[  %y = alloca [400 x double], align 16   %y.addr.i = alloca double*, align 8 ]   store double* %arraydecay5, double** %y.addr.i, align 8
[  %y = alloca [400 x double], align 16   %y.addr.i16 = alloca double*, align 8 ]   store double* %arraydecay4, double** %y.addr.i16, align 8
[  %y = alloca [400 x double], align 16 ]   call void @llvm.var.annotation(i8* %y2, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 105)
[  %r.addr.i = alloca double*, align 8 ]   %arrayidx.i = getelementptr inbounds double, double* %6, i64 %idxprom.i
[  %r.addr.i = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %r.addr1.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 27) #1
[  %r.addr.i15 = alloca double*, align 8 ]   %arrayidx22.i = getelementptr inbounds double, double* %31, i64 %idxprom21.i
[  %r.addr.i15 = alloca double*, align 8 ]   %arrayidx17.i = getelementptr inbounds double, double* %22, i64 %idxprom.i24
[  %r.addr.i15 = alloca double*, align 8 ]   %14 = load double, double* %13, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %11 = load double, double* %10, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %r.addr1.i18, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 62) #1
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx52.i = getelementptr inbounds double, double* %56, i64 %idxprom51.i
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx47.i = getelementptr inbounds double, double* %52, i64 %idxprom46.i
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx33.i = getelementptr inbounds double, double* %42, i64 %idxprom32.i
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx29.i = getelementptr inbounds double, double* %38, i64 %idxprom28.i
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx19.i = getelementptr inbounds double, double* %26, i64 %idxprom18.i
[  %y.addr.i16 = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %y.addr2.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 63) #1
[  %z.i = alloca [400 x double], align 16 ]   %51 = load double, double* %arrayidx45.i, align 8
[  %z.i = alloca [400 x double], align 16 ]   call void @llvm.var.annotation(i8* %z3.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 65) #1
[  %alpha.i = alloca double, align 8 ]   %mul.i22 = fmul double %17, %18
[  %alpha.i = alloca double, align 8 ]   call void @llvm.var.annotation(i8* %alpha4.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 66) #1
[  %beta.i = alloca double, align 8 ]   call void @llvm.var.annotation(i8* %beta5.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 67) #1
[  %sum.i = alloca double, align 8 ]   call void @llvm.var.annotation(i8* %sum6.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 68) #1
[  %y.addr.i = alloca double*, align 8 ]   %arrayidx.i12 = getelementptr inbounds double, double* %65, i64 %idxprom.i11
[  %y.addr.i = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %y.addr1.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 42) #1
[  %r.addr.i = alloca double*, align 8 ]   store double %add3.i, double* %arrayidx.i, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %33 = load double, double* %arrayidx22.i, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %25 = load double, double* %arrayidx17.i, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %sub9.i = fsub double -0.000000e+00, %14
[  %r.addr.i15 = alloca double*, align 8 ]   %sub.i19 = fsub double -0.000000e+00, %11
[  %y.addr.i16 = alloca double*, align 8   %alpha.i = alloca double, align 8 ]   store double %55, double* %arrayidx52.i, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %45 = load double, double* %arrayidx33.i, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %40 = load double, double* %arrayidx29.i, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %28 = load double, double* %arrayidx19.i, align 8
[  %z.i = alloca [400 x double], align 16   %y.addr.i16 = alloca double*, align 8 ]   store double %51, double* %arrayidx47.i, align 8
[  %alpha.i = alloca double, align 8 ]   %sub10.i = fsub double 1.000000e+00, %mul.i22
[  %y.addr.i = alloca double*, align 8 ]   %67 = load double, double* %arrayidx.i12, align 8
[  %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8 ]   %add23.i = fadd double %33, %34
[  %r.addr.i15 = alloca double*, align 8   %alpha.i = alloca double, align 8 ]   store double %sub9.i, double* %alpha.i, align 8
[  %r.addr.i15 = alloca double*, align 8   %y.addr.i16 = alloca double*, align 8 ]   store double %sub.i19, double* %12, align 8
[  %y.addr.i16 = alloca double*, align 8   %alpha.i = alloca double, align 8 ]   %mul34.i = fmul double %41, %45
[  %y.addr.i16 = alloca double*, align 8   %r.addr.i15 = alloca double*, align 8 ]   %mul20.i = fmul double %25, %28
[  %alpha.i = alloca double, align 8   %beta.i = alloca double, align 8 ]   %mul11.i = fmul double %sub10.i, %19
[  %y.addr.i = alloca double*, align 8 ]   %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %64, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %67) #1
[  %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8 ]   %sub24.i = fsub double -0.000000e+00, %add23.i
[  %y.addr.i16 = alloca double*, align 8   %alpha.i = alloca double, align 8 ]   %add35.i = fadd double %40, %mul34.i
[  %y.addr.i16 = alloca double*, align 8   %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8 ]   %add.i25 = fadd double %29, %mul20.i
[  %alpha.i = alloca double, align 8   %beta.i = alloca double, align 8 ]   store double %mul11.i, double* %beta.i, align 8
[  %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8   %beta.i = alloca double, align 8 ]   %div.i27 = fdiv double %sub24.i, %35
[  %y.addr.i16 = alloca double*, align 8   %alpha.i = alloca double, align 8   %z.i = alloca [400 x double], align 16 ]   store double %add35.i, double* %arrayidx37.i, align 8
[  %y.addr.i16 = alloca double*, align 8   %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8 ]   store double %add.i25, double* %sum.i, align 8
[  %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8   %beta.i = alloca double, align 8   %alpha.i = alloca double, align 8 ]   store double %div.i27, double* %alpha.i, align 8


[Fallback] attempt to wrap not supported operation:
  %r1 = bitcast [400 x double]* %r to i8*
  bail out on missing operand 1 of 1
warning:   %r1 = bitcast [400 x double]* %r to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y2 = bitcast [400 x double]* %y to i8*
  bail out on missing operand 1 of 1
warning:   %y2 = bitcast [400 x double]* %y to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %r.addr1.i = bitcast double** %r.addr.i to i8*
  bail out on missing operand 1 of 1
warning:   %r.addr1.i = bitcast double** %r.addr.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %r.addr1.i18 = bitcast double** %r.addr.i15 to i8*
  bail out on missing operand 1 of 1
warning:   %r.addr1.i18 = bitcast double** %r.addr.i15 to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y.addr2.i = bitcast double** %y.addr.i16 to i8*
  bail out on missing operand 1 of 1
warning:   %y.addr2.i = bitcast double** %y.addr.i16 to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %z3.i = bitcast [400 x double]* %z.i to i8*
  bail out on missing operand 1 of 1
warning:   %z3.i = bitcast [400 x double]* %z.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %alpha4.i = bitcast double* %alpha.i to i8*
  bail out on missing operand 1 of 1
warning:   %alpha4.i = bitcast double* %alpha.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %beta5.i = bitcast double* %beta.i to i8*
  bail out on missing operand 1 of 1
warning:   %beta5.i = bitcast double* %beta.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %sum6.i = bitcast double* %sum.i to i8*
  bail out on missing operand 1 of 1
warning:   %sum6.i = bitcast double* %sum.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y.addr1.i = bitcast double** %y.addr.i to i8*
  bail out on missing operand 1 of 1
warning:   %y.addr1.i = bitcast double** %y.addr.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %131, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %136) #1
  Substituted operand number : 3 of 4
  mutated operands to:
  %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %131, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %139) #1
+ /opt/llvm-4.0-d/bin/clang -S -o ./build/_tmp2.durbin_out.s ./build/_tmp1.durbin_out.ll -O3 -I utilities -I linear-algebra/solvers/durbin -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS
clang-4.0: warning: argument unused during compilation: '-I utilities' [-Wunused-command-line-argument]
clang-4.0: warning: argument unused during compilation: '-I linear-algebra/solvers/durbin' [-Wunused-command-line-argument]
+ /opt/llvm-4.0-d/bin/clang -o ./build/durbin_out ./build/_tmp2.durbin_out.s -O3 -I utilities -I linear-algebra/solvers/durbin -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS -lm utilities/polybench.c
+ '[' xy '!=' x ']'
+ exit 0
++ dirname ./magiclang.sh
+ ROOT=.
+ '[' 7 -lt 1 ']'
+ '[' -z x ']'
+ '[' x '!=' x ']'
+ OUTDIR=./build
+ mkdir -p ./build
+ SOEXT=so
++ uname -s
+ '[' Darwin = Darwin ']'
+ SOEXT=dylib
+ CLANG=/opt/llvm-4.0-d/bin/clang
+ OPT=/opt/llvm-4.0-d/bin/opt
+ LLC=/opt/llvm-4.0-d/bin/llc
+ PASSLIB=./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib
+ '[' '!' -e ./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib ']'
++ echo durbin_out
++ sed -E 's/\.[^\.]$//'
+ OUTNAME=durbin_out
++ /opt/llvm-4.0-d/bin/opt --version
++ grep DEBUG
++ wc -l
+ ISDEBUG='       1'
+ DEBUGONLYFLAG=-debug-only=flttofix
+ '[' 1 '!=' 1 ']'
+ /opt/llvm-4.0-d/bin/clang -S -emit-llvm linear-algebra/solvers/durbin/durbin.c -o ./build/_tmp0.durbin_out.ll -I utilities -I linear-algebra/solvers/durbin -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS
linear-algebra/solvers/durbin/durbin.c:27:50: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                 DATA_TYPE POLYBENCH_1D(r,N,n)) __attribute__((always_inline))
                                                               ^
linear-algebra/solvers/durbin/durbin.c:33:15: warning: 'annotate' attribute ignored when parsing type [-Wignored-attributes]
      r[i] = (DATA_TYPE)(n+1-i) / (n*200.0) + 1.5;
              ^~~~~~~~~
linear-algebra/solvers/durbin/durbin.h:66:36: note: expanded from macro 'DATA_TYPE'
#  define DATA_TYPE __attribute__((annotate("no_float"))) double
                                   ^~~~~~~~~~~~~~~~~~~~
linear-algebra/solvers/durbin/durbin.c:42:50: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                 DATA_TYPE POLYBENCH_1D(y,N,n)) __attribute__((always_inline))
                                                               ^
linear-algebra/solvers/durbin/durbin.c:63:52: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                   DATA_TYPE POLYBENCH_1D(y,N,n)) __attribute__((always_inline))
                                                                 ^
4 warnings generated.
+ '[' x '!=' x ']'
+ /opt/llvm-4.0-d/bin/opt -load=./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib -pass-remarks=flttofix -S -flttofix -dce -debug-only=flttofix ./build/_tmp0.durbin_out.ll -o ./build/_tmp1.durbin_out.ll -fixpfracbitsamt=59 -fixpbitsamt=64
conversion queue:
[  %r = alloca [400 x double], align 16 ]   %r = alloca [400 x double], align 16
[  %y = alloca [400 x double], align 16 ]   %y = alloca [400 x double], align 16
[  %r.addr.i = alloca double*, align 8 ]   %r.addr.i = alloca double*, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %r.addr.i15 = alloca double*, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %y.addr.i16 = alloca double*, align 8
[  %z.i = alloca [400 x double], align 16 ]   %z.i = alloca [400 x double], align 16
[  %alpha.i = alloca double, align 8 ]   %alpha.i = alloca double, align 8
[  %beta.i = alloca double, align 8 ]   %beta.i = alloca double, align 8
[  %sum.i = alloca double, align 8 ]   %sum.i = alloca double, align 8
[  %y.addr.i = alloca double*, align 8 ]   %y.addr.i = alloca double*, align 8
[  %r = alloca [400 x double], align 16 ]   %arraydecay3 = getelementptr inbounds [400 x double], [400 x double]* %r, i32 0, i32 0
[  %r = alloca [400 x double], align 16 ]   %arraydecay = getelementptr inbounds [400 x double], [400 x double]* %r, i32 0, i32 0
[  %r = alloca [400 x double], align 16 ]   %r1 = bitcast [400 x double]* %r to i8*
[  %y = alloca [400 x double], align 16 ]   %arraydecay5 = getelementptr inbounds [400 x double], [400 x double]* %y, i32 0, i32 0
[  %y = alloca [400 x double], align 16 ]   %arraydecay4 = getelementptr inbounds [400 x double], [400 x double]* %y, i32 0, i32 0
[  %y = alloca [400 x double], align 16 ]   %y2 = bitcast [400 x double]* %y to i8*
[  %r.addr.i = alloca double*, align 8 ]   %6 = load double*, double** %r.addr.i, align 8
[  %r.addr.i = alloca double*, align 8 ]   %r.addr1.i = bitcast double** %r.addr.i to i8*
[  %r.addr.i15 = alloca double*, align 8 ]   %31 = load double*, double** %r.addr.i15, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %22 = load double*, double** %r.addr.i15, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %13 = load double*, double** %r.addr.i15, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %10 = load double*, double** %r.addr.i15, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %r.addr1.i18 = bitcast double** %r.addr.i15 to i8*
[  %y.addr.i16 = alloca double*, align 8 ]   %56 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %52 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %42 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %38 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %26 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %12 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %y.addr2.i = bitcast double** %y.addr.i16 to i8*
[  %z.i = alloca [400 x double], align 16 ]   %arrayidx45.i = getelementptr inbounds [400 x double], [400 x double]* %z.i, i64 0, i64 %idxprom44.i
[  %z.i = alloca [400 x double], align 16 ]   %arrayidx37.i = getelementptr inbounds [400 x double], [400 x double]* %z.i, i64 0, i64 %idxprom36.i
[  %z.i = alloca [400 x double], align 16 ]   %z3.i = bitcast [400 x double]* %z.i to i8*
[  %alpha.i = alloca double, align 8 ]   %55 = load double, double* %alpha.i, align 8
[  %alpha.i = alloca double, align 8 ]   %41 = load double, double* %alpha.i, align 8
[  %alpha.i = alloca double, align 8 ]   %18 = load double, double* %alpha.i, align 8
[  %alpha.i = alloca double, align 8 ]   %17 = load double, double* %alpha.i, align 8
[  %alpha.i = alloca double, align 8 ]   %alpha4.i = bitcast double* %alpha.i to i8*
[  %beta.i = alloca double, align 8 ]   %35 = load double, double* %beta.i, align 8
[  %beta.i = alloca double, align 8 ]   %19 = load double, double* %beta.i, align 8
[  %beta.i = alloca double, align 8 ]   store double 1.000000e+00, double* %beta.i, align 8
[  %beta.i = alloca double, align 8 ]   %beta5.i = bitcast double* %beta.i to i8*
[  %sum.i = alloca double, align 8 ]   %34 = load double, double* %sum.i, align 8
[  %sum.i = alloca double, align 8 ]   %29 = load double, double* %sum.i, align 8
[  %sum.i = alloca double, align 8 ]   store double 0.000000e+00, double* %sum.i, align 8
[  %sum.i = alloca double, align 8 ]   %sum6.i = bitcast double* %sum.i to i8*
[  %y.addr.i = alloca double*, align 8 ]   %65 = load double*, double** %y.addr.i, align 8
[  %y.addr.i = alloca double*, align 8 ]   %y.addr1.i = bitcast double** %y.addr.i to i8*
[  %r = alloca [400 x double], align 16   %r.addr.i15 = alloca double*, align 8 ]   store double* %arraydecay3, double** %r.addr.i15, align 8
[  %r = alloca [400 x double], align 16   %r.addr.i = alloca double*, align 8 ]   store double* %arraydecay, double** %r.addr.i, align 8
[  %r = alloca [400 x double], align 16 ]   call void @llvm.var.annotation(i8* %r1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 104)
[  %y = alloca [400 x double], align 16   %y.addr.i = alloca double*, align 8 ]   store double* %arraydecay5, double** %y.addr.i, align 8
[  %y = alloca [400 x double], align 16   %y.addr.i16 = alloca double*, align 8 ]   store double* %arraydecay4, double** %y.addr.i16, align 8
[  %y = alloca [400 x double], align 16 ]   call void @llvm.var.annotation(i8* %y2, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 105)
[  %r.addr.i = alloca double*, align 8 ]   %arrayidx.i = getelementptr inbounds double, double* %6, i64 %idxprom.i
[  %r.addr.i = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %r.addr1.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 27) #1
[  %r.addr.i15 = alloca double*, align 8 ]   %arrayidx22.i = getelementptr inbounds double, double* %31, i64 %idxprom21.i
[  %r.addr.i15 = alloca double*, align 8 ]   %arrayidx17.i = getelementptr inbounds double, double* %22, i64 %idxprom.i24
[  %r.addr.i15 = alloca double*, align 8 ]   %14 = load double, double* %13, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %11 = load double, double* %10, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %r.addr1.i18, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 62) #1
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx52.i = getelementptr inbounds double, double* %56, i64 %idxprom51.i
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx47.i = getelementptr inbounds double, double* %52, i64 %idxprom46.i
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx33.i = getelementptr inbounds double, double* %42, i64 %idxprom32.i
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx29.i = getelementptr inbounds double, double* %38, i64 %idxprom28.i
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx19.i = getelementptr inbounds double, double* %26, i64 %idxprom18.i
[  %y.addr.i16 = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %y.addr2.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 63) #1
[  %z.i = alloca [400 x double], align 16 ]   %51 = load double, double* %arrayidx45.i, align 8
[  %z.i = alloca [400 x double], align 16 ]   call void @llvm.var.annotation(i8* %z3.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 65) #1
[  %alpha.i = alloca double, align 8 ]   %mul.i22 = fmul double %17, %18
[  %alpha.i = alloca double, align 8 ]   call void @llvm.var.annotation(i8* %alpha4.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 66) #1
[  %beta.i = alloca double, align 8 ]   call void @llvm.var.annotation(i8* %beta5.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 67) #1
[  %sum.i = alloca double, align 8 ]   call void @llvm.var.annotation(i8* %sum6.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 68) #1
[  %y.addr.i = alloca double*, align 8 ]   %arrayidx.i12 = getelementptr inbounds double, double* %65, i64 %idxprom.i11
[  %y.addr.i = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %y.addr1.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 42) #1
[  %r.addr.i = alloca double*, align 8 ]   store double %add3.i, double* %arrayidx.i, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %33 = load double, double* %arrayidx22.i, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %25 = load double, double* %arrayidx17.i, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %sub9.i = fsub double -0.000000e+00, %14
[  %r.addr.i15 = alloca double*, align 8 ]   %sub.i19 = fsub double -0.000000e+00, %11
[  %y.addr.i16 = alloca double*, align 8   %alpha.i = alloca double, align 8 ]   store double %55, double* %arrayidx52.i, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %45 = load double, double* %arrayidx33.i, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %40 = load double, double* %arrayidx29.i, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %28 = load double, double* %arrayidx19.i, align 8
[  %z.i = alloca [400 x double], align 16   %y.addr.i16 = alloca double*, align 8 ]   store double %51, double* %arrayidx47.i, align 8
[  %alpha.i = alloca double, align 8 ]   %sub10.i = fsub double 1.000000e+00, %mul.i22
[  %y.addr.i = alloca double*, align 8 ]   %67 = load double, double* %arrayidx.i12, align 8
[  %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8 ]   %add23.i = fadd double %33, %34
[  %r.addr.i15 = alloca double*, align 8   %alpha.i = alloca double, align 8 ]   store double %sub9.i, double* %alpha.i, align 8
[  %r.addr.i15 = alloca double*, align 8   %y.addr.i16 = alloca double*, align 8 ]   store double %sub.i19, double* %12, align 8
[  %y.addr.i16 = alloca double*, align 8   %alpha.i = alloca double, align 8 ]   %mul34.i = fmul double %41, %45
[  %y.addr.i16 = alloca double*, align 8   %r.addr.i15 = alloca double*, align 8 ]   %mul20.i = fmul double %25, %28
[  %alpha.i = alloca double, align 8   %beta.i = alloca double, align 8 ]   %mul11.i = fmul double %sub10.i, %19
[  %y.addr.i = alloca double*, align 8 ]   %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %64, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %67) #1
[  %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8 ]   %sub24.i = fsub double -0.000000e+00, %add23.i
[  %y.addr.i16 = alloca double*, align 8   %alpha.i = alloca double, align 8 ]   %add35.i = fadd double %40, %mul34.i
[  %y.addr.i16 = alloca double*, align 8   %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8 ]   %add.i25 = fadd double %29, %mul20.i
[  %alpha.i = alloca double, align 8   %beta.i = alloca double, align 8 ]   store double %mul11.i, double* %beta.i, align 8
[  %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8   %beta.i = alloca double, align 8 ]   %div.i27 = fdiv double %sub24.i, %35
[  %y.addr.i16 = alloca double*, align 8   %alpha.i = alloca double, align 8   %z.i = alloca [400 x double], align 16 ]   store double %add35.i, double* %arrayidx37.i, align 8
[  %y.addr.i16 = alloca double*, align 8   %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8 ]   store double %add.i25, double* %sum.i, align 8
[  %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8   %beta.i = alloca double, align 8   %alpha.i = alloca double, align 8 ]   store double %div.i27, double* %alpha.i, align 8


[Fallback] attempt to wrap not supported operation:
  %r1 = bitcast [400 x double]* %r to i8*
  bail out on missing operand 1 of 1
warning:   %r1 = bitcast [400 x double]* %r to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y2 = bitcast [400 x double]* %y to i8*
  bail out on missing operand 1 of 1
warning:   %y2 = bitcast [400 x double]* %y to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %r.addr1.i = bitcast double** %r.addr.i to i8*
  bail out on missing operand 1 of 1
warning:   %r.addr1.i = bitcast double** %r.addr.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %r.addr1.i18 = bitcast double** %r.addr.i15 to i8*
  bail out on missing operand 1 of 1
warning:   %r.addr1.i18 = bitcast double** %r.addr.i15 to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y.addr2.i = bitcast double** %y.addr.i16 to i8*
  bail out on missing operand 1 of 1
warning:   %y.addr2.i = bitcast double** %y.addr.i16 to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %z3.i = bitcast [400 x double]* %z.i to i8*
  bail out on missing operand 1 of 1
warning:   %z3.i = bitcast [400 x double]* %z.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %alpha4.i = bitcast double* %alpha.i to i8*
  bail out on missing operand 1 of 1
warning:   %alpha4.i = bitcast double* %alpha.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %beta5.i = bitcast double* %beta.i to i8*
  bail out on missing operand 1 of 1
warning:   %beta5.i = bitcast double* %beta.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %sum6.i = bitcast double* %sum.i to i8*
  bail out on missing operand 1 of 1
warning:   %sum6.i = bitcast double* %sum.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y.addr1.i = bitcast double** %y.addr.i to i8*
  bail out on missing operand 1 of 1
warning:   %y.addr1.i = bitcast double** %y.addr.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %131, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %136) #1
  Substituted operand number : 3 of 4
  mutated operands to:
  %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %131, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %139) #1
+ /opt/llvm-4.0-d/bin/clang -S -o ./build/_tmp2.durbin_out.s ./build/_tmp1.durbin_out.ll -O3 -I utilities -I linear-algebra/solvers/durbin -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS
clang-4.0: warning: argument unused during compilation: '-I utilities' [-Wunused-command-line-argument]
clang-4.0: warning: argument unused during compilation: '-I linear-algebra/solvers/durbin' [-Wunused-command-line-argument]
+ /opt/llvm-4.0-d/bin/clang -o ./build/durbin_out ./build/_tmp2.durbin_out.s -O3 -I utilities -I linear-algebra/solvers/durbin -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS -lm utilities/polybench.c
+ '[' xy '!=' x ']'
+ exit 0
++ dirname ./magiclang.sh
+ ROOT=.
+ '[' 7 -lt 1 ']'
+ '[' -z x ']'
+ '[' x '!=' x ']'
+ OUTDIR=./build
+ mkdir -p ./build
+ SOEXT=so
++ uname -s
+ '[' Darwin = Darwin ']'
+ SOEXT=dylib
+ CLANG=/opt/llvm-4.0-d/bin/clang
+ OPT=/opt/llvm-4.0-d/bin/opt
+ LLC=/opt/llvm-4.0-d/bin/llc
+ PASSLIB=./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib
+ '[' '!' -e ./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib ']'
++ echo durbin_out
++ sed -E 's/\.[^\.]$//'
+ OUTNAME=durbin_out
++ /opt/llvm-4.0-d/bin/opt --version
++ grep DEBUG
++ wc -l
+ ISDEBUG='       1'
+ DEBUGONLYFLAG=-debug-only=flttofix
+ '[' 1 '!=' 1 ']'
+ /opt/llvm-4.0-d/bin/clang -S -emit-llvm linear-algebra/solvers/durbin/durbin.c -o ./build/_tmp0.durbin_out.ll -I utilities -I linear-algebra/solvers/durbin -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS
linear-algebra/solvers/durbin/durbin.c:27:50: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                 DATA_TYPE POLYBENCH_1D(r,N,n)) __attribute__((always_inline))
                                                               ^
linear-algebra/solvers/durbin/durbin.c:33:15: warning: 'annotate' attribute ignored when parsing type [-Wignored-attributes]
      r[i] = (DATA_TYPE)(n+1-i) / (n*200.0) + 1.5;
              ^~~~~~~~~
linear-algebra/solvers/durbin/durbin.h:66:36: note: expanded from macro 'DATA_TYPE'
#  define DATA_TYPE __attribute__((annotate("no_float"))) double
                                   ^~~~~~~~~~~~~~~~~~~~
linear-algebra/solvers/durbin/durbin.c:42:50: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                 DATA_TYPE POLYBENCH_1D(y,N,n)) __attribute__((always_inline))
                                                               ^
linear-algebra/solvers/durbin/durbin.c:63:52: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                   DATA_TYPE POLYBENCH_1D(y,N,n)) __attribute__((always_inline))
                                                                 ^
4 warnings generated.
+ '[' x '!=' x ']'
+ /opt/llvm-4.0-d/bin/opt -load=./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib -pass-remarks=flttofix -S -flttofix -dce -debug-only=flttofix ./build/_tmp0.durbin_out.ll -o ./build/_tmp1.durbin_out.ll -fixpfracbitsamt=61 -fixpbitsamt=64
conversion queue:
[  %r = alloca [400 x double], align 16 ]   %r = alloca [400 x double], align 16
[  %y = alloca [400 x double], align 16 ]   %y = alloca [400 x double], align 16
[  %r.addr.i = alloca double*, align 8 ]   %r.addr.i = alloca double*, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %r.addr.i15 = alloca double*, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %y.addr.i16 = alloca double*, align 8
[  %z.i = alloca [400 x double], align 16 ]   %z.i = alloca [400 x double], align 16
[  %alpha.i = alloca double, align 8 ]   %alpha.i = alloca double, align 8
[  %beta.i = alloca double, align 8 ]   %beta.i = alloca double, align 8
[  %sum.i = alloca double, align 8 ]   %sum.i = alloca double, align 8
[  %y.addr.i = alloca double*, align 8 ]   %y.addr.i = alloca double*, align 8
[  %r = alloca [400 x double], align 16 ]   %arraydecay3 = getelementptr inbounds [400 x double], [400 x double]* %r, i32 0, i32 0
[  %r = alloca [400 x double], align 16 ]   %arraydecay = getelementptr inbounds [400 x double], [400 x double]* %r, i32 0, i32 0
[  %r = alloca [400 x double], align 16 ]   %r1 = bitcast [400 x double]* %r to i8*
[  %y = alloca [400 x double], align 16 ]   %arraydecay5 = getelementptr inbounds [400 x double], [400 x double]* %y, i32 0, i32 0
[  %y = alloca [400 x double], align 16 ]   %arraydecay4 = getelementptr inbounds [400 x double], [400 x double]* %y, i32 0, i32 0
[  %y = alloca [400 x double], align 16 ]   %y2 = bitcast [400 x double]* %y to i8*
[  %r.addr.i = alloca double*, align 8 ]   %6 = load double*, double** %r.addr.i, align 8
[  %r.addr.i = alloca double*, align 8 ]   %r.addr1.i = bitcast double** %r.addr.i to i8*
[  %r.addr.i15 = alloca double*, align 8 ]   %31 = load double*, double** %r.addr.i15, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %22 = load double*, double** %r.addr.i15, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %13 = load double*, double** %r.addr.i15, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %10 = load double*, double** %r.addr.i15, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %r.addr1.i18 = bitcast double** %r.addr.i15 to i8*
[  %y.addr.i16 = alloca double*, align 8 ]   %56 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %52 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %42 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %38 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %26 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %12 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %y.addr2.i = bitcast double** %y.addr.i16 to i8*
[  %z.i = alloca [400 x double], align 16 ]   %arrayidx45.i = getelementptr inbounds [400 x double], [400 x double]* %z.i, i64 0, i64 %idxprom44.i
[  %z.i = alloca [400 x double], align 16 ]   %arrayidx37.i = getelementptr inbounds [400 x double], [400 x double]* %z.i, i64 0, i64 %idxprom36.i
[  %z.i = alloca [400 x double], align 16 ]   %z3.i = bitcast [400 x double]* %z.i to i8*
[  %alpha.i = alloca double, align 8 ]   %55 = load double, double* %alpha.i, align 8
[  %alpha.i = alloca double, align 8 ]   %41 = load double, double* %alpha.i, align 8
[  %alpha.i = alloca double, align 8 ]   %18 = load double, double* %alpha.i, align 8
[  %alpha.i = alloca double, align 8 ]   %17 = load double, double* %alpha.i, align 8
[  %alpha.i = alloca double, align 8 ]   %alpha4.i = bitcast double* %alpha.i to i8*
[  %beta.i = alloca double, align 8 ]   %35 = load double, double* %beta.i, align 8
[  %beta.i = alloca double, align 8 ]   %19 = load double, double* %beta.i, align 8
[  %beta.i = alloca double, align 8 ]   store double 1.000000e+00, double* %beta.i, align 8
[  %beta.i = alloca double, align 8 ]   %beta5.i = bitcast double* %beta.i to i8*
[  %sum.i = alloca double, align 8 ]   %34 = load double, double* %sum.i, align 8
[  %sum.i = alloca double, align 8 ]   %29 = load double, double* %sum.i, align 8
[  %sum.i = alloca double, align 8 ]   store double 0.000000e+00, double* %sum.i, align 8
[  %sum.i = alloca double, align 8 ]   %sum6.i = bitcast double* %sum.i to i8*
[  %y.addr.i = alloca double*, align 8 ]   %65 = load double*, double** %y.addr.i, align 8
[  %y.addr.i = alloca double*, align 8 ]   %y.addr1.i = bitcast double** %y.addr.i to i8*
[  %r = alloca [400 x double], align 16   %r.addr.i15 = alloca double*, align 8 ]   store double* %arraydecay3, double** %r.addr.i15, align 8
[  %r = alloca [400 x double], align 16   %r.addr.i = alloca double*, align 8 ]   store double* %arraydecay, double** %r.addr.i, align 8
[  %r = alloca [400 x double], align 16 ]   call void @llvm.var.annotation(i8* %r1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 104)
[  %y = alloca [400 x double], align 16   %y.addr.i = alloca double*, align 8 ]   store double* %arraydecay5, double** %y.addr.i, align 8
[  %y = alloca [400 x double], align 16   %y.addr.i16 = alloca double*, align 8 ]   store double* %arraydecay4, double** %y.addr.i16, align 8
[  %y = alloca [400 x double], align 16 ]   call void @llvm.var.annotation(i8* %y2, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 105)
[  %r.addr.i = alloca double*, align 8 ]   %arrayidx.i = getelementptr inbounds double, double* %6, i64 %idxprom.i
[  %r.addr.i = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %r.addr1.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 27) #1
[  %r.addr.i15 = alloca double*, align 8 ]   %arrayidx22.i = getelementptr inbounds double, double* %31, i64 %idxprom21.i
[  %r.addr.i15 = alloca double*, align 8 ]   %arrayidx17.i = getelementptr inbounds double, double* %22, i64 %idxprom.i24
[  %r.addr.i15 = alloca double*, align 8 ]   %14 = load double, double* %13, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %11 = load double, double* %10, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %r.addr1.i18, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 62) #1
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx52.i = getelementptr inbounds double, double* %56, i64 %idxprom51.i
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx47.i = getelementptr inbounds double, double* %52, i64 %idxprom46.i
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx33.i = getelementptr inbounds double, double* %42, i64 %idxprom32.i
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx29.i = getelementptr inbounds double, double* %38, i64 %idxprom28.i
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx19.i = getelementptr inbounds double, double* %26, i64 %idxprom18.i
[  %y.addr.i16 = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %y.addr2.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 63) #1
[  %z.i = alloca [400 x double], align 16 ]   %51 = load double, double* %arrayidx45.i, align 8
[  %z.i = alloca [400 x double], align 16 ]   call void @llvm.var.annotation(i8* %z3.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 65) #1
[  %alpha.i = alloca double, align 8 ]   %mul.i22 = fmul double %17, %18
[  %alpha.i = alloca double, align 8 ]   call void @llvm.var.annotation(i8* %alpha4.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 66) #1
[  %beta.i = alloca double, align 8 ]   call void @llvm.var.annotation(i8* %beta5.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 67) #1
[  %sum.i = alloca double, align 8 ]   call void @llvm.var.annotation(i8* %sum6.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 68) #1
[  %y.addr.i = alloca double*, align 8 ]   %arrayidx.i12 = getelementptr inbounds double, double* %65, i64 %idxprom.i11
[  %y.addr.i = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %y.addr1.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 42) #1
[  %r.addr.i = alloca double*, align 8 ]   store double %add3.i, double* %arrayidx.i, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %33 = load double, double* %arrayidx22.i, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %25 = load double, double* %arrayidx17.i, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %sub9.i = fsub double -0.000000e+00, %14
[  %r.addr.i15 = alloca double*, align 8 ]   %sub.i19 = fsub double -0.000000e+00, %11
[  %y.addr.i16 = alloca double*, align 8   %alpha.i = alloca double, align 8 ]   store double %55, double* %arrayidx52.i, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %45 = load double, double* %arrayidx33.i, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %40 = load double, double* %arrayidx29.i, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %28 = load double, double* %arrayidx19.i, align 8
[  %z.i = alloca [400 x double], align 16   %y.addr.i16 = alloca double*, align 8 ]   store double %51, double* %arrayidx47.i, align 8
[  %alpha.i = alloca double, align 8 ]   %sub10.i = fsub double 1.000000e+00, %mul.i22
[  %y.addr.i = alloca double*, align 8 ]   %67 = load double, double* %arrayidx.i12, align 8
[  %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8 ]   %add23.i = fadd double %33, %34
[  %r.addr.i15 = alloca double*, align 8   %alpha.i = alloca double, align 8 ]   store double %sub9.i, double* %alpha.i, align 8
[  %r.addr.i15 = alloca double*, align 8   %y.addr.i16 = alloca double*, align 8 ]   store double %sub.i19, double* %12, align 8
[  %y.addr.i16 = alloca double*, align 8   %alpha.i = alloca double, align 8 ]   %mul34.i = fmul double %41, %45
[  %y.addr.i16 = alloca double*, align 8   %r.addr.i15 = alloca double*, align 8 ]   %mul20.i = fmul double %25, %28
[  %alpha.i = alloca double, align 8   %beta.i = alloca double, align 8 ]   %mul11.i = fmul double %sub10.i, %19
[  %y.addr.i = alloca double*, align 8 ]   %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %64, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %67) #1
[  %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8 ]   %sub24.i = fsub double -0.000000e+00, %add23.i
[  %y.addr.i16 = alloca double*, align 8   %alpha.i = alloca double, align 8 ]   %add35.i = fadd double %40, %mul34.i
[  %y.addr.i16 = alloca double*, align 8   %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8 ]   %add.i25 = fadd double %29, %mul20.i
[  %alpha.i = alloca double, align 8   %beta.i = alloca double, align 8 ]   store double %mul11.i, double* %beta.i, align 8
[  %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8   %beta.i = alloca double, align 8 ]   %div.i27 = fdiv double %sub24.i, %35
[  %y.addr.i16 = alloca double*, align 8   %alpha.i = alloca double, align 8   %z.i = alloca [400 x double], align 16 ]   store double %add35.i, double* %arrayidx37.i, align 8
[  %y.addr.i16 = alloca double*, align 8   %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8 ]   store double %add.i25, double* %sum.i, align 8
[  %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8   %beta.i = alloca double, align 8   %alpha.i = alloca double, align 8 ]   store double %div.i27, double* %alpha.i, align 8


[Fallback] attempt to wrap not supported operation:
  %r1 = bitcast [400 x double]* %r to i8*
  bail out on missing operand 1 of 1
warning:   %r1 = bitcast [400 x double]* %r to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y2 = bitcast [400 x double]* %y to i8*
  bail out on missing operand 1 of 1
warning:   %y2 = bitcast [400 x double]* %y to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %r.addr1.i = bitcast double** %r.addr.i to i8*
  bail out on missing operand 1 of 1
warning:   %r.addr1.i = bitcast double** %r.addr.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %r.addr1.i18 = bitcast double** %r.addr.i15 to i8*
  bail out on missing operand 1 of 1
warning:   %r.addr1.i18 = bitcast double** %r.addr.i15 to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y.addr2.i = bitcast double** %y.addr.i16 to i8*
  bail out on missing operand 1 of 1
warning:   %y.addr2.i = bitcast double** %y.addr.i16 to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %z3.i = bitcast [400 x double]* %z.i to i8*
  bail out on missing operand 1 of 1
warning:   %z3.i = bitcast [400 x double]* %z.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %alpha4.i = bitcast double* %alpha.i to i8*
  bail out on missing operand 1 of 1
warning:   %alpha4.i = bitcast double* %alpha.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %beta5.i = bitcast double* %beta.i to i8*
  bail out on missing operand 1 of 1
warning:   %beta5.i = bitcast double* %beta.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %sum6.i = bitcast double* %sum.i to i8*
  bail out on missing operand 1 of 1
warning:   %sum6.i = bitcast double* %sum.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y.addr1.i = bitcast double** %y.addr.i to i8*
  bail out on missing operand 1 of 1
warning:   %y.addr1.i = bitcast double** %y.addr.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %131, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %136) #1
  Substituted operand number : 3 of 4
  mutated operands to:
  %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %131, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %139) #1
+ /opt/llvm-4.0-d/bin/clang -S -o ./build/_tmp2.durbin_out.s ./build/_tmp1.durbin_out.ll -O3 -I utilities -I linear-algebra/solvers/durbin -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS
clang-4.0: warning: argument unused during compilation: '-I utilities' [-Wunused-command-line-argument]
clang-4.0: warning: argument unused during compilation: '-I linear-algebra/solvers/durbin' [-Wunused-command-line-argument]
+ /opt/llvm-4.0-d/bin/clang -o ./build/durbin_out ./build/_tmp2.durbin_out.s -O3 -I utilities -I linear-algebra/solvers/durbin -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS -lm utilities/polybench.c
+ '[' xy '!=' x ']'
+ exit 0
++ dirname ./magiclang.sh
+ ROOT=.
+ '[' 7 -lt 1 ']'
+ '[' -z x ']'
+ '[' x '!=' x ']'
+ OUTDIR=./build
+ mkdir -p ./build
+ SOEXT=so
++ uname -s
+ '[' Darwin = Darwin ']'
+ SOEXT=dylib
+ CLANG=/opt/llvm-4.0-d/bin/clang
+ OPT=/opt/llvm-4.0-d/bin/opt
+ LLC=/opt/llvm-4.0-d/bin/llc
+ PASSLIB=./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib
+ '[' '!' -e ./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib ']'
++ echo durbin_out
++ sed -E 's/\.[^\.]$//'
+ OUTNAME=durbin_out
++ /opt/llvm-4.0-d/bin/opt --version
++ grep DEBUG
++ wc -l
+ ISDEBUG='       1'
+ DEBUGONLYFLAG=-debug-only=flttofix
+ '[' 1 '!=' 1 ']'
+ /opt/llvm-4.0-d/bin/clang -S -emit-llvm linear-algebra/solvers/durbin/durbin.c -o ./build/_tmp0.durbin_out.ll -I utilities -I linear-algebra/solvers/durbin -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS
linear-algebra/solvers/durbin/durbin.c:27:50: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                 DATA_TYPE POLYBENCH_1D(r,N,n)) __attribute__((always_inline))
                                                               ^
linear-algebra/solvers/durbin/durbin.c:33:15: warning: 'annotate' attribute ignored when parsing type [-Wignored-attributes]
      r[i] = (DATA_TYPE)(n+1-i) / (n*200.0) + 1.5;
              ^~~~~~~~~
linear-algebra/solvers/durbin/durbin.h:66:36: note: expanded from macro 'DATA_TYPE'
#  define DATA_TYPE __attribute__((annotate("no_float"))) double
                                   ^~~~~~~~~~~~~~~~~~~~
linear-algebra/solvers/durbin/durbin.c:42:50: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                 DATA_TYPE POLYBENCH_1D(y,N,n)) __attribute__((always_inline))
                                                               ^
linear-algebra/solvers/durbin/durbin.c:63:52: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                   DATA_TYPE POLYBENCH_1D(y,N,n)) __attribute__((always_inline))
                                                                 ^
4 warnings generated.
+ '[' x '!=' x ']'
+ /opt/llvm-4.0-d/bin/opt -load=./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib -pass-remarks=flttofix -S -flttofix -dce -debug-only=flttofix ./build/_tmp0.durbin_out.ll -o ./build/_tmp1.durbin_out.ll -fixpfracbitsamt=62 -fixpbitsamt=64
conversion queue:
[  %r = alloca [400 x double], align 16 ]   %r = alloca [400 x double], align 16
[  %y = alloca [400 x double], align 16 ]   %y = alloca [400 x double], align 16
[  %r.addr.i = alloca double*, align 8 ]   %r.addr.i = alloca double*, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %r.addr.i15 = alloca double*, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %y.addr.i16 = alloca double*, align 8
[  %z.i = alloca [400 x double], align 16 ]   %z.i = alloca [400 x double], align 16
[  %alpha.i = alloca double, align 8 ]   %alpha.i = alloca double, align 8
[  %beta.i = alloca double, align 8 ]   %beta.i = alloca double, align 8
[  %sum.i = alloca double, align 8 ]   %sum.i = alloca double, align 8
[  %y.addr.i = alloca double*, align 8 ]   %y.addr.i = alloca double*, align 8
[  %r = alloca [400 x double], align 16 ]   %arraydecay3 = getelementptr inbounds [400 x double], [400 x double]* %r, i32 0, i32 0
[  %r = alloca [400 x double], align 16 ]   %arraydecay = getelementptr inbounds [400 x double], [400 x double]* %r, i32 0, i32 0
[  %r = alloca [400 x double], align 16 ]   %r1 = bitcast [400 x double]* %r to i8*
[  %y = alloca [400 x double], align 16 ]   %arraydecay5 = getelementptr inbounds [400 x double], [400 x double]* %y, i32 0, i32 0
[  %y = alloca [400 x double], align 16 ]   %arraydecay4 = getelementptr inbounds [400 x double], [400 x double]* %y, i32 0, i32 0
[  %y = alloca [400 x double], align 16 ]   %y2 = bitcast [400 x double]* %y to i8*
[  %r.addr.i = alloca double*, align 8 ]   %6 = load double*, double** %r.addr.i, align 8
[  %r.addr.i = alloca double*, align 8 ]   %r.addr1.i = bitcast double** %r.addr.i to i8*
[  %r.addr.i15 = alloca double*, align 8 ]   %31 = load double*, double** %r.addr.i15, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %22 = load double*, double** %r.addr.i15, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %13 = load double*, double** %r.addr.i15, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %10 = load double*, double** %r.addr.i15, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %r.addr1.i18 = bitcast double** %r.addr.i15 to i8*
[  %y.addr.i16 = alloca double*, align 8 ]   %56 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %52 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %42 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %38 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %26 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %12 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %y.addr2.i = bitcast double** %y.addr.i16 to i8*
[  %z.i = alloca [400 x double], align 16 ]   %arrayidx45.i = getelementptr inbounds [400 x double], [400 x double]* %z.i, i64 0, i64 %idxprom44.i
[  %z.i = alloca [400 x double], align 16 ]   %arrayidx37.i = getelementptr inbounds [400 x double], [400 x double]* %z.i, i64 0, i64 %idxprom36.i
[  %z.i = alloca [400 x double], align 16 ]   %z3.i = bitcast [400 x double]* %z.i to i8*
[  %alpha.i = alloca double, align 8 ]   %55 = load double, double* %alpha.i, align 8
[  %alpha.i = alloca double, align 8 ]   %41 = load double, double* %alpha.i, align 8
[  %alpha.i = alloca double, align 8 ]   %18 = load double, double* %alpha.i, align 8
[  %alpha.i = alloca double, align 8 ]   %17 = load double, double* %alpha.i, align 8
[  %alpha.i = alloca double, align 8 ]   %alpha4.i = bitcast double* %alpha.i to i8*
[  %beta.i = alloca double, align 8 ]   %35 = load double, double* %beta.i, align 8
[  %beta.i = alloca double, align 8 ]   %19 = load double, double* %beta.i, align 8
[  %beta.i = alloca double, align 8 ]   store double 1.000000e+00, double* %beta.i, align 8
[  %beta.i = alloca double, align 8 ]   %beta5.i = bitcast double* %beta.i to i8*
[  %sum.i = alloca double, align 8 ]   %34 = load double, double* %sum.i, align 8
[  %sum.i = alloca double, align 8 ]   %29 = load double, double* %sum.i, align 8
[  %sum.i = alloca double, align 8 ]   store double 0.000000e+00, double* %sum.i, align 8
[  %sum.i = alloca double, align 8 ]   %sum6.i = bitcast double* %sum.i to i8*
[  %y.addr.i = alloca double*, align 8 ]   %65 = load double*, double** %y.addr.i, align 8
[  %y.addr.i = alloca double*, align 8 ]   %y.addr1.i = bitcast double** %y.addr.i to i8*
[  %r = alloca [400 x double], align 16   %r.addr.i15 = alloca double*, align 8 ]   store double* %arraydecay3, double** %r.addr.i15, align 8
[  %r = alloca [400 x double], align 16   %r.addr.i = alloca double*, align 8 ]   store double* %arraydecay, double** %r.addr.i, align 8
[  %r = alloca [400 x double], align 16 ]   call void @llvm.var.annotation(i8* %r1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 104)
[  %y = alloca [400 x double], align 16   %y.addr.i = alloca double*, align 8 ]   store double* %arraydecay5, double** %y.addr.i, align 8
[  %y = alloca [400 x double], align 16   %y.addr.i16 = alloca double*, align 8 ]   store double* %arraydecay4, double** %y.addr.i16, align 8
[  %y = alloca [400 x double], align 16 ]   call void @llvm.var.annotation(i8* %y2, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 105)
[  %r.addr.i = alloca double*, align 8 ]   %arrayidx.i = getelementptr inbounds double, double* %6, i64 %idxprom.i
[  %r.addr.i = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %r.addr1.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 27) #1
[  %r.addr.i15 = alloca double*, align 8 ]   %arrayidx22.i = getelementptr inbounds double, double* %31, i64 %idxprom21.i
[  %r.addr.i15 = alloca double*, align 8 ]   %arrayidx17.i = getelementptr inbounds double, double* %22, i64 %idxprom.i24
[  %r.addr.i15 = alloca double*, align 8 ]   %14 = load double, double* %13, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %11 = load double, double* %10, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %r.addr1.i18, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 62) #1
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx52.i = getelementptr inbounds double, double* %56, i64 %idxprom51.i
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx47.i = getelementptr inbounds double, double* %52, i64 %idxprom46.i
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx33.i = getelementptr inbounds double, double* %42, i64 %idxprom32.i
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx29.i = getelementptr inbounds double, double* %38, i64 %idxprom28.i
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx19.i = getelementptr inbounds double, double* %26, i64 %idxprom18.i
[  %y.addr.i16 = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %y.addr2.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 63) #1
[  %z.i = alloca [400 x double], align 16 ]   %51 = load double, double* %arrayidx45.i, align 8
[  %z.i = alloca [400 x double], align 16 ]   call void @llvm.var.annotation(i8* %z3.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 65) #1
[  %alpha.i = alloca double, align 8 ]   %mul.i22 = fmul double %17, %18
[  %alpha.i = alloca double, align 8 ]   call void @llvm.var.annotation(i8* %alpha4.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 66) #1
[  %beta.i = alloca double, align 8 ]   call void @llvm.var.annotation(i8* %beta5.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 67) #1
[  %sum.i = alloca double, align 8 ]   call void @llvm.var.annotation(i8* %sum6.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 68) #1
[  %y.addr.i = alloca double*, align 8 ]   %arrayidx.i12 = getelementptr inbounds double, double* %65, i64 %idxprom.i11
[  %y.addr.i = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %y.addr1.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 42) #1
[  %r.addr.i = alloca double*, align 8 ]   store double %add3.i, double* %arrayidx.i, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %33 = load double, double* %arrayidx22.i, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %25 = load double, double* %arrayidx17.i, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %sub9.i = fsub double -0.000000e+00, %14
[  %r.addr.i15 = alloca double*, align 8 ]   %sub.i19 = fsub double -0.000000e+00, %11
[  %y.addr.i16 = alloca double*, align 8   %alpha.i = alloca double, align 8 ]   store double %55, double* %arrayidx52.i, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %45 = load double, double* %arrayidx33.i, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %40 = load double, double* %arrayidx29.i, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %28 = load double, double* %arrayidx19.i, align 8
[  %z.i = alloca [400 x double], align 16   %y.addr.i16 = alloca double*, align 8 ]   store double %51, double* %arrayidx47.i, align 8
[  %alpha.i = alloca double, align 8 ]   %sub10.i = fsub double 1.000000e+00, %mul.i22
[  %y.addr.i = alloca double*, align 8 ]   %67 = load double, double* %arrayidx.i12, align 8
[  %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8 ]   %add23.i = fadd double %33, %34
[  %r.addr.i15 = alloca double*, align 8   %alpha.i = alloca double, align 8 ]   store double %sub9.i, double* %alpha.i, align 8
[  %r.addr.i15 = alloca double*, align 8   %y.addr.i16 = alloca double*, align 8 ]   store double %sub.i19, double* %12, align 8
[  %y.addr.i16 = alloca double*, align 8   %alpha.i = alloca double, align 8 ]   %mul34.i = fmul double %41, %45
[  %y.addr.i16 = alloca double*, align 8   %r.addr.i15 = alloca double*, align 8 ]   %mul20.i = fmul double %25, %28
[  %alpha.i = alloca double, align 8   %beta.i = alloca double, align 8 ]   %mul11.i = fmul double %sub10.i, %19
[  %y.addr.i = alloca double*, align 8 ]   %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %64, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %67) #1
[  %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8 ]   %sub24.i = fsub double -0.000000e+00, %add23.i
[  %y.addr.i16 = alloca double*, align 8   %alpha.i = alloca double, align 8 ]   %add35.i = fadd double %40, %mul34.i
[  %y.addr.i16 = alloca double*, align 8   %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8 ]   %add.i25 = fadd double %29, %mul20.i
[  %alpha.i = alloca double, align 8   %beta.i = alloca double, align 8 ]   store double %mul11.i, double* %beta.i, align 8
[  %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8   %beta.i = alloca double, align 8 ]   %div.i27 = fdiv double %sub24.i, %35
[  %y.addr.i16 = alloca double*, align 8   %alpha.i = alloca double, align 8   %z.i = alloca [400 x double], align 16 ]   store double %add35.i, double* %arrayidx37.i, align 8
[  %y.addr.i16 = alloca double*, align 8   %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8 ]   store double %add.i25, double* %sum.i, align 8
[  %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8   %beta.i = alloca double, align 8   %alpha.i = alloca double, align 8 ]   store double %div.i27, double* %alpha.i, align 8


[Fallback] attempt to wrap not supported operation:
  %r1 = bitcast [400 x double]* %r to i8*
  bail out on missing operand 1 of 1
warning:   %r1 = bitcast [400 x double]* %r to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y2 = bitcast [400 x double]* %y to i8*
  bail out on missing operand 1 of 1
warning:   %y2 = bitcast [400 x double]* %y to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %r.addr1.i = bitcast double** %r.addr.i to i8*
  bail out on missing operand 1 of 1
warning:   %r.addr1.i = bitcast double** %r.addr.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %r.addr1.i18 = bitcast double** %r.addr.i15 to i8*
  bail out on missing operand 1 of 1
warning:   %r.addr1.i18 = bitcast double** %r.addr.i15 to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y.addr2.i = bitcast double** %y.addr.i16 to i8*
  bail out on missing operand 1 of 1
warning:   %y.addr2.i = bitcast double** %y.addr.i16 to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %z3.i = bitcast [400 x double]* %z.i to i8*
  bail out on missing operand 1 of 1
warning:   %z3.i = bitcast [400 x double]* %z.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %alpha4.i = bitcast double* %alpha.i to i8*
  bail out on missing operand 1 of 1
warning:   %alpha4.i = bitcast double* %alpha.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %beta5.i = bitcast double* %beta.i to i8*
  bail out on missing operand 1 of 1
warning:   %beta5.i = bitcast double* %beta.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %sum6.i = bitcast double* %sum.i to i8*
  bail out on missing operand 1 of 1
warning:   %sum6.i = bitcast double* %sum.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y.addr1.i = bitcast double** %y.addr.i to i8*
  bail out on missing operand 1 of 1
warning:   %y.addr1.i = bitcast double** %y.addr.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %131, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %136) #1
  Substituted operand number : 3 of 4
  mutated operands to:
  %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %131, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %139) #1
+ /opt/llvm-4.0-d/bin/clang -S -o ./build/_tmp2.durbin_out.s ./build/_tmp1.durbin_out.ll -O3 -I utilities -I linear-algebra/solvers/durbin -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS
clang-4.0: warning: argument unused during compilation: '-I utilities' [-Wunused-command-line-argument]
clang-4.0: warning: argument unused during compilation: '-I linear-algebra/solvers/durbin' [-Wunused-command-line-argument]
+ /opt/llvm-4.0-d/bin/clang -o ./build/durbin_out ./build/_tmp2.durbin_out.s -O3 -I utilities -I linear-algebra/solvers/durbin -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS -lm utilities/polybench.c
+ '[' xy '!=' x ']'
+ exit 0
++ dirname ./magiclang.sh
+ ROOT=.
+ '[' 7 -lt 1 ']'
+ '[' -z x ']'
+ '[' x '!=' x ']'
+ OUTDIR=./build
+ mkdir -p ./build
+ SOEXT=so
++ uname -s
+ '[' Darwin = Darwin ']'
+ SOEXT=dylib
+ CLANG=/opt/llvm-4.0-d/bin/clang
+ OPT=/opt/llvm-4.0-d/bin/opt
+ LLC=/opt/llvm-4.0-d/bin/llc
+ PASSLIB=./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib
+ '[' '!' -e ./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib ']'
++ echo durbin_out
++ sed -E 's/\.[^\.]$//'
+ OUTNAME=durbin_out
++ /opt/llvm-4.0-d/bin/opt --version
++ grep DEBUG
++ wc -l
+ ISDEBUG='       1'
+ DEBUGONLYFLAG=-debug-only=flttofix
+ '[' 1 '!=' 1 ']'
+ /opt/llvm-4.0-d/bin/clang -S -emit-llvm linear-algebra/solvers/durbin/durbin.c -o ./build/_tmp0.durbin_out.ll -I utilities -I linear-algebra/solvers/durbin -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS
linear-algebra/solvers/durbin/durbin.c:27:50: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                 DATA_TYPE POLYBENCH_1D(r,N,n)) __attribute__((always_inline))
                                                               ^
linear-algebra/solvers/durbin/durbin.c:33:15: warning: 'annotate' attribute ignored when parsing type [-Wignored-attributes]
      r[i] = (DATA_TYPE)(n+1-i) / (n*200.0) + 1.5;
              ^~~~~~~~~
linear-algebra/solvers/durbin/durbin.h:66:36: note: expanded from macro 'DATA_TYPE'
#  define DATA_TYPE __attribute__((annotate("no_float"))) double
                                   ^~~~~~~~~~~~~~~~~~~~
linear-algebra/solvers/durbin/durbin.c:42:50: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                 DATA_TYPE POLYBENCH_1D(y,N,n)) __attribute__((always_inline))
                                                               ^
linear-algebra/solvers/durbin/durbin.c:63:52: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                   DATA_TYPE POLYBENCH_1D(y,N,n)) __attribute__((always_inline))
                                                                 ^
4 warnings generated.
+ '[' x '!=' x ']'
+ /opt/llvm-4.0-d/bin/opt -load=./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib -pass-remarks=flttofix -S -flttofix -dce -debug-only=flttofix ./build/_tmp0.durbin_out.ll -o ./build/_tmp1.durbin_out.ll -fixpfracbitsamt=63 -fixpbitsamt=64
conversion queue:
[  %r = alloca [400 x double], align 16 ]   %r = alloca [400 x double], align 16
[  %y = alloca [400 x double], align 16 ]   %y = alloca [400 x double], align 16
[  %r.addr.i = alloca double*, align 8 ]   %r.addr.i = alloca double*, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %r.addr.i15 = alloca double*, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %y.addr.i16 = alloca double*, align 8
[  %z.i = alloca [400 x double], align 16 ]   %z.i = alloca [400 x double], align 16
[  %alpha.i = alloca double, align 8 ]   %alpha.i = alloca double, align 8
[  %beta.i = alloca double, align 8 ]   %beta.i = alloca double, align 8
[  %sum.i = alloca double, align 8 ]   %sum.i = alloca double, align 8
[  %y.addr.i = alloca double*, align 8 ]   %y.addr.i = alloca double*, align 8
[  %r = alloca [400 x double], align 16 ]   %arraydecay3 = getelementptr inbounds [400 x double], [400 x double]* %r, i32 0, i32 0
[  %r = alloca [400 x double], align 16 ]   %arraydecay = getelementptr inbounds [400 x double], [400 x double]* %r, i32 0, i32 0
[  %r = alloca [400 x double], align 16 ]   %r1 = bitcast [400 x double]* %r to i8*
[  %y = alloca [400 x double], align 16 ]   %arraydecay5 = getelementptr inbounds [400 x double], [400 x double]* %y, i32 0, i32 0
[  %y = alloca [400 x double], align 16 ]   %arraydecay4 = getelementptr inbounds [400 x double], [400 x double]* %y, i32 0, i32 0
[  %y = alloca [400 x double], align 16 ]   %y2 = bitcast [400 x double]* %y to i8*
[  %r.addr.i = alloca double*, align 8 ]   %6 = load double*, double** %r.addr.i, align 8
[  %r.addr.i = alloca double*, align 8 ]   %r.addr1.i = bitcast double** %r.addr.i to i8*
[  %r.addr.i15 = alloca double*, align 8 ]   %31 = load double*, double** %r.addr.i15, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %22 = load double*, double** %r.addr.i15, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %13 = load double*, double** %r.addr.i15, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %10 = load double*, double** %r.addr.i15, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %r.addr1.i18 = bitcast double** %r.addr.i15 to i8*
[  %y.addr.i16 = alloca double*, align 8 ]   %56 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %52 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %42 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %38 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %26 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %12 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %y.addr2.i = bitcast double** %y.addr.i16 to i8*
[  %z.i = alloca [400 x double], align 16 ]   %arrayidx45.i = getelementptr inbounds [400 x double], [400 x double]* %z.i, i64 0, i64 %idxprom44.i
[  %z.i = alloca [400 x double], align 16 ]   %arrayidx37.i = getelementptr inbounds [400 x double], [400 x double]* %z.i, i64 0, i64 %idxprom36.i
[  %z.i = alloca [400 x double], align 16 ]   %z3.i = bitcast [400 x double]* %z.i to i8*
[  %alpha.i = alloca double, align 8 ]   %55 = load double, double* %alpha.i, align 8
[  %alpha.i = alloca double, align 8 ]   %41 = load double, double* %alpha.i, align 8
[  %alpha.i = alloca double, align 8 ]   %18 = load double, double* %alpha.i, align 8
[  %alpha.i = alloca double, align 8 ]   %17 = load double, double* %alpha.i, align 8
[  %alpha.i = alloca double, align 8 ]   %alpha4.i = bitcast double* %alpha.i to i8*
[  %beta.i = alloca double, align 8 ]   %35 = load double, double* %beta.i, align 8
[  %beta.i = alloca double, align 8 ]   %19 = load double, double* %beta.i, align 8
[  %beta.i = alloca double, align 8 ]   store double 1.000000e+00, double* %beta.i, align 8
[  %beta.i = alloca double, align 8 ]   %beta5.i = bitcast double* %beta.i to i8*
[  %sum.i = alloca double, align 8 ]   %34 = load double, double* %sum.i, align 8
[  %sum.i = alloca double, align 8 ]   %29 = load double, double* %sum.i, align 8
[  %sum.i = alloca double, align 8 ]   store double 0.000000e+00, double* %sum.i, align 8
[  %sum.i = alloca double, align 8 ]   %sum6.i = bitcast double* %sum.i to i8*
[  %y.addr.i = alloca double*, align 8 ]   %65 = load double*, double** %y.addr.i, align 8
[  %y.addr.i = alloca double*, align 8 ]   %y.addr1.i = bitcast double** %y.addr.i to i8*
[  %r = alloca [400 x double], align 16   %r.addr.i15 = alloca double*, align 8 ]   store double* %arraydecay3, double** %r.addr.i15, align 8
[  %r = alloca [400 x double], align 16   %r.addr.i = alloca double*, align 8 ]   store double* %arraydecay, double** %r.addr.i, align 8
[  %r = alloca [400 x double], align 16 ]   call void @llvm.var.annotation(i8* %r1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 104)
[  %y = alloca [400 x double], align 16   %y.addr.i = alloca double*, align 8 ]   store double* %arraydecay5, double** %y.addr.i, align 8
[  %y = alloca [400 x double], align 16   %y.addr.i16 = alloca double*, align 8 ]   store double* %arraydecay4, double** %y.addr.i16, align 8
[  %y = alloca [400 x double], align 16 ]   call void @llvm.var.annotation(i8* %y2, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 105)
[  %r.addr.i = alloca double*, align 8 ]   %arrayidx.i = getelementptr inbounds double, double* %6, i64 %idxprom.i
[  %r.addr.i = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %r.addr1.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 27) #1
[  %r.addr.i15 = alloca double*, align 8 ]   %arrayidx22.i = getelementptr inbounds double, double* %31, i64 %idxprom21.i
[  %r.addr.i15 = alloca double*, align 8 ]   %arrayidx17.i = getelementptr inbounds double, double* %22, i64 %idxprom.i24
[  %r.addr.i15 = alloca double*, align 8 ]   %14 = load double, double* %13, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %11 = load double, double* %10, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %r.addr1.i18, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 62) #1
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx52.i = getelementptr inbounds double, double* %56, i64 %idxprom51.i
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx47.i = getelementptr inbounds double, double* %52, i64 %idxprom46.i
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx33.i = getelementptr inbounds double, double* %42, i64 %idxprom32.i
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx29.i = getelementptr inbounds double, double* %38, i64 %idxprom28.i
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx19.i = getelementptr inbounds double, double* %26, i64 %idxprom18.i
[  %y.addr.i16 = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %y.addr2.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 63) #1
[  %z.i = alloca [400 x double], align 16 ]   %51 = load double, double* %arrayidx45.i, align 8
[  %z.i = alloca [400 x double], align 16 ]   call void @llvm.var.annotation(i8* %z3.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 65) #1
[  %alpha.i = alloca double, align 8 ]   %mul.i22 = fmul double %17, %18
[  %alpha.i = alloca double, align 8 ]   call void @llvm.var.annotation(i8* %alpha4.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 66) #1
[  %beta.i = alloca double, align 8 ]   call void @llvm.var.annotation(i8* %beta5.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 67) #1
[  %sum.i = alloca double, align 8 ]   call void @llvm.var.annotation(i8* %sum6.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 68) #1
[  %y.addr.i = alloca double*, align 8 ]   %arrayidx.i12 = getelementptr inbounds double, double* %65, i64 %idxprom.i11
[  %y.addr.i = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %y.addr1.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 42) #1
[  %r.addr.i = alloca double*, align 8 ]   store double %add3.i, double* %arrayidx.i, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %33 = load double, double* %arrayidx22.i, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %25 = load double, double* %arrayidx17.i, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %sub9.i = fsub double -0.000000e+00, %14
[  %r.addr.i15 = alloca double*, align 8 ]   %sub.i19 = fsub double -0.000000e+00, %11
[  %y.addr.i16 = alloca double*, align 8   %alpha.i = alloca double, align 8 ]   store double %55, double* %arrayidx52.i, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %45 = load double, double* %arrayidx33.i, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %40 = load double, double* %arrayidx29.i, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %28 = load double, double* %arrayidx19.i, align 8
[  %z.i = alloca [400 x double], align 16   %y.addr.i16 = alloca double*, align 8 ]   store double %51, double* %arrayidx47.i, align 8
[  %alpha.i = alloca double, align 8 ]   %sub10.i = fsub double 1.000000e+00, %mul.i22
[  %y.addr.i = alloca double*, align 8 ]   %67 = load double, double* %arrayidx.i12, align 8
[  %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8 ]   %add23.i = fadd double %33, %34
[  %r.addr.i15 = alloca double*, align 8   %alpha.i = alloca double, align 8 ]   store double %sub9.i, double* %alpha.i, align 8
[  %r.addr.i15 = alloca double*, align 8   %y.addr.i16 = alloca double*, align 8 ]   store double %sub.i19, double* %12, align 8
[  %y.addr.i16 = alloca double*, align 8   %alpha.i = alloca double, align 8 ]   %mul34.i = fmul double %41, %45
[  %y.addr.i16 = alloca double*, align 8   %r.addr.i15 = alloca double*, align 8 ]   %mul20.i = fmul double %25, %28
[  %alpha.i = alloca double, align 8   %beta.i = alloca double, align 8 ]   %mul11.i = fmul double %sub10.i, %19
[  %y.addr.i = alloca double*, align 8 ]   %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %64, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %67) #1
[  %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8 ]   %sub24.i = fsub double -0.000000e+00, %add23.i
[  %y.addr.i16 = alloca double*, align 8   %alpha.i = alloca double, align 8 ]   %add35.i = fadd double %40, %mul34.i
[  %y.addr.i16 = alloca double*, align 8   %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8 ]   %add.i25 = fadd double %29, %mul20.i
[  %alpha.i = alloca double, align 8   %beta.i = alloca double, align 8 ]   store double %mul11.i, double* %beta.i, align 8
[  %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8   %beta.i = alloca double, align 8 ]   %div.i27 = fdiv double %sub24.i, %35
[  %y.addr.i16 = alloca double*, align 8   %alpha.i = alloca double, align 8   %z.i = alloca [400 x double], align 16 ]   store double %add35.i, double* %arrayidx37.i, align 8
[  %y.addr.i16 = alloca double*, align 8   %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8 ]   store double %add.i25, double* %sum.i, align 8
[  %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8   %beta.i = alloca double, align 8   %alpha.i = alloca double, align 8 ]   store double %div.i27, double* %alpha.i, align 8


[Fallback] attempt to wrap not supported operation:
  %r1 = bitcast [400 x double]* %r to i8*
  bail out on missing operand 1 of 1
warning:   %r1 = bitcast [400 x double]* %r to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y2 = bitcast [400 x double]* %y to i8*
  bail out on missing operand 1 of 1
warning:   %y2 = bitcast [400 x double]* %y to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %r.addr1.i = bitcast double** %r.addr.i to i8*
  bail out on missing operand 1 of 1
warning:   %r.addr1.i = bitcast double** %r.addr.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %r.addr1.i18 = bitcast double** %r.addr.i15 to i8*
  bail out on missing operand 1 of 1
warning:   %r.addr1.i18 = bitcast double** %r.addr.i15 to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y.addr2.i = bitcast double** %y.addr.i16 to i8*
  bail out on missing operand 1 of 1
warning:   %y.addr2.i = bitcast double** %y.addr.i16 to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %z3.i = bitcast [400 x double]* %z.i to i8*
  bail out on missing operand 1 of 1
warning:   %z3.i = bitcast [400 x double]* %z.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %alpha4.i = bitcast double* %alpha.i to i8*
  bail out on missing operand 1 of 1
warning:   %alpha4.i = bitcast double* %alpha.i to i8* not converted
remark: <unknown>:0:0: impossible to convert constant 9.2233720368547758E+18 to fixed point

warning:   store double 1.000000e+00, double* %beta.i, align 8 not converted
[Fallback] attempt to wrap not supported operation:
  %beta5.i = bitcast double* %beta.i to i8*
  bail out on missing operand 1 of 1
warning:   %beta5.i = bitcast double* %beta.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %sum6.i = bitcast double* %sum.i to i8*
  bail out on missing operand 1 of 1
warning:   %sum6.i = bitcast double* %sum.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y.addr1.i = bitcast double** %y.addr.i to i8*
  bail out on missing operand 1 of 1
warning:   %y.addr1.i = bitcast double** %y.addr.i to i8* not converted
remark: <unknown>:0:0: impossible to convert constant 9.2233720368547758E+18 to fixed point

warning:   %sub10.i = fsub double 1.000000e+00, %mul.i22 not converted
warning:   %mul11.i = fmul double %sub10.i, %40 not converted
[Fallback] attempt to wrap not supported operation:
  %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %125, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %130) #1
  Substituted operand number : 3 of 4
  mutated operands to:
  %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %125, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %133) #1
warning:   store double %mul11.i, double* %beta.i, align 8 not converted
  store double 1.000000e+00, double* %beta.i, align 8 not converted; invalidates roots   %beta.i = alloca double, align 8
  %sub10.i = fsub double 1.000000e+00, %mul.i22 not converted; invalidates roots   %alpha.i = alloca double, align 8
  %mul11.i = fmul double %sub10.i, %40 not converted; invalidates roots   %alpha.i = alloca double, align 8  %beta.i = alloca double, align 8
  store double %mul11.i, double* %beta.i, align 8 not converted; invalidates roots   %alpha.i = alloca double, align 8  %beta.i = alloca double, align 8
  store double 1.000000e+00, double* %beta.i, align 8 not deleted: involves root   %beta.i = alloca double, align 8
  store double %120, double* %arrayidx52.i, align 8 not deleted: involves root   %alpha.i = alloca double, align 8
  store double %sub9.i, double* %alpha.i, align 8 not deleted: involves root   %alpha.i = alloca double, align 8
  store double %mul11.i, double* %beta.i, align 8 not deleted: involves root   %alpha.i = alloca double, align 8
  store double %add35.i, double* %arrayidx37.i, align 8 not deleted: involves root   %alpha.i = alloca double, align 8
  store double %div.i27, double* %alpha.i, align 8 not deleted: involves root   %beta.i = alloca double, align 8
+ /opt/llvm-4.0-d/bin/clang -S -o ./build/_tmp2.durbin_out.s ./build/_tmp1.durbin_out.ll -O3 -I utilities -I linear-algebra/solvers/durbin -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS
clang-4.0: warning: argument unused during compilation: '-I utilities' [-Wunused-command-line-argument]
clang-4.0: warning: argument unused during compilation: '-I linear-algebra/solvers/durbin' [-Wunused-command-line-argument]
+ /opt/llvm-4.0-d/bin/clang -o ./build/durbin_out ./build/_tmp2.durbin_out.s -O3 -I utilities -I linear-algebra/solvers/durbin -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS -lm utilities/polybench.c
+ '[' xy '!=' x ']'
+ exit 0
++ dirname ./magiclang.sh
+ ROOT=.
+ '[' 7 -lt 1 ']'
+ '[' -z x ']'
+ '[' x '!=' x ']'
+ OUTDIR=./build
+ mkdir -p ./build
+ SOEXT=so
++ uname -s
+ '[' Darwin = Darwin ']'
+ SOEXT=dylib
+ CLANG=/opt/llvm-4.0-d/bin/clang
+ OPT=/opt/llvm-4.0-d/bin/opt
+ LLC=/opt/llvm-4.0-d/bin/llc
+ PASSLIB=./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib
+ '[' '!' -e ./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib ']'
++ echo durbin_out
++ sed -E 's/\.[^\.]$//'
+ OUTNAME=durbin_out
++ /opt/llvm-4.0-d/bin/opt --version
++ grep DEBUG
++ wc -l
+ ISDEBUG='       1'
+ DEBUGONLYFLAG=-debug-only=flttofix
+ '[' 1 '!=' 1 ']'
+ /opt/llvm-4.0-d/bin/clang -S -emit-llvm linear-algebra/solvers/durbin/durbin.c -o ./build/_tmp0.durbin_out.ll -I utilities -I linear-algebra/solvers/durbin -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS
linear-algebra/solvers/durbin/durbin.c:27:50: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                 DATA_TYPE POLYBENCH_1D(r,N,n)) __attribute__((always_inline))
                                                               ^
linear-algebra/solvers/durbin/durbin.c:33:15: warning: 'annotate' attribute ignored when parsing type [-Wignored-attributes]
      r[i] = (DATA_TYPE)(n+1-i) / (n*200.0) + 1.5;
              ^~~~~~~~~
linear-algebra/solvers/durbin/durbin.h:66:36: note: expanded from macro 'DATA_TYPE'
#  define DATA_TYPE __attribute__((annotate("no_float"))) double
                                   ^~~~~~~~~~~~~~~~~~~~
linear-algebra/solvers/durbin/durbin.c:42:50: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                 DATA_TYPE POLYBENCH_1D(y,N,n)) __attribute__((always_inline))
                                                               ^
linear-algebra/solvers/durbin/durbin.c:63:52: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                   DATA_TYPE POLYBENCH_1D(y,N,n)) __attribute__((always_inline))
                                                                 ^
4 warnings generated.
+ '[' x '!=' x ']'
+ /opt/llvm-4.0-d/bin/opt -load=./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib -pass-remarks=flttofix -S -flttofix -dce -debug-only=flttofix ./build/_tmp0.durbin_out.ll -o ./build/_tmp1.durbin_out.ll -fixpfracbitsamt=31 -fixpbitsamt=64
conversion queue:
[  %r = alloca [400 x double], align 16 ]   %r = alloca [400 x double], align 16
[  %y = alloca [400 x double], align 16 ]   %y = alloca [400 x double], align 16
[  %r.addr.i = alloca double*, align 8 ]   %r.addr.i = alloca double*, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %r.addr.i15 = alloca double*, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %y.addr.i16 = alloca double*, align 8
[  %z.i = alloca [400 x double], align 16 ]   %z.i = alloca [400 x double], align 16
[  %alpha.i = alloca double, align 8 ]   %alpha.i = alloca double, align 8
[  %beta.i = alloca double, align 8 ]   %beta.i = alloca double, align 8
[  %sum.i = alloca double, align 8 ]   %sum.i = alloca double, align 8
[  %y.addr.i = alloca double*, align 8 ]   %y.addr.i = alloca double*, align 8
[  %r = alloca [400 x double], align 16 ]   %arraydecay3 = getelementptr inbounds [400 x double], [400 x double]* %r, i32 0, i32 0
[  %r = alloca [400 x double], align 16 ]   %arraydecay = getelementptr inbounds [400 x double], [400 x double]* %r, i32 0, i32 0
[  %r = alloca [400 x double], align 16 ]   %r1 = bitcast [400 x double]* %r to i8*
[  %y = alloca [400 x double], align 16 ]   %arraydecay5 = getelementptr inbounds [400 x double], [400 x double]* %y, i32 0, i32 0
[  %y = alloca [400 x double], align 16 ]   %arraydecay4 = getelementptr inbounds [400 x double], [400 x double]* %y, i32 0, i32 0
[  %y = alloca [400 x double], align 16 ]   %y2 = bitcast [400 x double]* %y to i8*
[  %r.addr.i = alloca double*, align 8 ]   %6 = load double*, double** %r.addr.i, align 8
[  %r.addr.i = alloca double*, align 8 ]   %r.addr1.i = bitcast double** %r.addr.i to i8*
[  %r.addr.i15 = alloca double*, align 8 ]   %31 = load double*, double** %r.addr.i15, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %22 = load double*, double** %r.addr.i15, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %13 = load double*, double** %r.addr.i15, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %10 = load double*, double** %r.addr.i15, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %r.addr1.i18 = bitcast double** %r.addr.i15 to i8*
[  %y.addr.i16 = alloca double*, align 8 ]   %56 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %52 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %42 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %38 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %26 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %12 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %y.addr2.i = bitcast double** %y.addr.i16 to i8*
[  %z.i = alloca [400 x double], align 16 ]   %arrayidx45.i = getelementptr inbounds [400 x double], [400 x double]* %z.i, i64 0, i64 %idxprom44.i
[  %z.i = alloca [400 x double], align 16 ]   %arrayidx37.i = getelementptr inbounds [400 x double], [400 x double]* %z.i, i64 0, i64 %idxprom36.i
[  %z.i = alloca [400 x double], align 16 ]   %z3.i = bitcast [400 x double]* %z.i to i8*
[  %alpha.i = alloca double, align 8 ]   %55 = load double, double* %alpha.i, align 8
[  %alpha.i = alloca double, align 8 ]   %41 = load double, double* %alpha.i, align 8
[  %alpha.i = alloca double, align 8 ]   %18 = load double, double* %alpha.i, align 8
[  %alpha.i = alloca double, align 8 ]   %17 = load double, double* %alpha.i, align 8
[  %alpha.i = alloca double, align 8 ]   %alpha4.i = bitcast double* %alpha.i to i8*
[  %beta.i = alloca double, align 8 ]   %35 = load double, double* %beta.i, align 8
[  %beta.i = alloca double, align 8 ]   %19 = load double, double* %beta.i, align 8
[  %beta.i = alloca double, align 8 ]   store double 1.000000e+00, double* %beta.i, align 8
[  %beta.i = alloca double, align 8 ]   %beta5.i = bitcast double* %beta.i to i8*
[  %sum.i = alloca double, align 8 ]   %34 = load double, double* %sum.i, align 8
[  %sum.i = alloca double, align 8 ]   %29 = load double, double* %sum.i, align 8
[  %sum.i = alloca double, align 8 ]   store double 0.000000e+00, double* %sum.i, align 8
[  %sum.i = alloca double, align 8 ]   %sum6.i = bitcast double* %sum.i to i8*
[  %y.addr.i = alloca double*, align 8 ]   %65 = load double*, double** %y.addr.i, align 8
[  %y.addr.i = alloca double*, align 8 ]   %y.addr1.i = bitcast double** %y.addr.i to i8*
[  %r = alloca [400 x double], align 16   %r.addr.i15 = alloca double*, align 8 ]   store double* %arraydecay3, double** %r.addr.i15, align 8
[  %r = alloca [400 x double], align 16   %r.addr.i = alloca double*, align 8 ]   store double* %arraydecay, double** %r.addr.i, align 8
[  %r = alloca [400 x double], align 16 ]   call void @llvm.var.annotation(i8* %r1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 104)
[  %y = alloca [400 x double], align 16   %y.addr.i = alloca double*, align 8 ]   store double* %arraydecay5, double** %y.addr.i, align 8
[  %y = alloca [400 x double], align 16   %y.addr.i16 = alloca double*, align 8 ]   store double* %arraydecay4, double** %y.addr.i16, align 8
[  %y = alloca [400 x double], align 16 ]   call void @llvm.var.annotation(i8* %y2, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 105)
[  %r.addr.i = alloca double*, align 8 ]   %arrayidx.i = getelementptr inbounds double, double* %6, i64 %idxprom.i
[  %r.addr.i = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %r.addr1.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 27) #1
[  %r.addr.i15 = alloca double*, align 8 ]   %arrayidx22.i = getelementptr inbounds double, double* %31, i64 %idxprom21.i
[  %r.addr.i15 = alloca double*, align 8 ]   %arrayidx17.i = getelementptr inbounds double, double* %22, i64 %idxprom.i24
[  %r.addr.i15 = alloca double*, align 8 ]   %14 = load double, double* %13, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %11 = load double, double* %10, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %r.addr1.i18, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 62) #1
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx52.i = getelementptr inbounds double, double* %56, i64 %idxprom51.i
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx47.i = getelementptr inbounds double, double* %52, i64 %idxprom46.i
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx33.i = getelementptr inbounds double, double* %42, i64 %idxprom32.i
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx29.i = getelementptr inbounds double, double* %38, i64 %idxprom28.i
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx19.i = getelementptr inbounds double, double* %26, i64 %idxprom18.i
[  %y.addr.i16 = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %y.addr2.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 63) #1
[  %z.i = alloca [400 x double], align 16 ]   %51 = load double, double* %arrayidx45.i, align 8
[  %z.i = alloca [400 x double], align 16 ]   call void @llvm.var.annotation(i8* %z3.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 65) #1
[  %alpha.i = alloca double, align 8 ]   %mul.i22 = fmul double %17, %18
[  %alpha.i = alloca double, align 8 ]   call void @llvm.var.annotation(i8* %alpha4.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 66) #1
[  %beta.i = alloca double, align 8 ]   call void @llvm.var.annotation(i8* %beta5.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 67) #1
[  %sum.i = alloca double, align 8 ]   call void @llvm.var.annotation(i8* %sum6.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 68) #1
[  %y.addr.i = alloca double*, align 8 ]   %arrayidx.i12 = getelementptr inbounds double, double* %65, i64 %idxprom.i11
[  %y.addr.i = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %y.addr1.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 42) #1
[  %r.addr.i = alloca double*, align 8 ]   store double %add3.i, double* %arrayidx.i, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %33 = load double, double* %arrayidx22.i, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %25 = load double, double* %arrayidx17.i, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %sub9.i = fsub double -0.000000e+00, %14
[  %r.addr.i15 = alloca double*, align 8 ]   %sub.i19 = fsub double -0.000000e+00, %11
[  %y.addr.i16 = alloca double*, align 8   %alpha.i = alloca double, align 8 ]   store double %55, double* %arrayidx52.i, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %45 = load double, double* %arrayidx33.i, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %40 = load double, double* %arrayidx29.i, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %28 = load double, double* %arrayidx19.i, align 8
[  %z.i = alloca [400 x double], align 16   %y.addr.i16 = alloca double*, align 8 ]   store double %51, double* %arrayidx47.i, align 8
[  %alpha.i = alloca double, align 8 ]   %sub10.i = fsub double 1.000000e+00, %mul.i22
[  %y.addr.i = alloca double*, align 8 ]   %67 = load double, double* %arrayidx.i12, align 8
[  %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8 ]   %add23.i = fadd double %33, %34
[  %r.addr.i15 = alloca double*, align 8   %alpha.i = alloca double, align 8 ]   store double %sub9.i, double* %alpha.i, align 8
[  %r.addr.i15 = alloca double*, align 8   %y.addr.i16 = alloca double*, align 8 ]   store double %sub.i19, double* %12, align 8
[  %y.addr.i16 = alloca double*, align 8   %alpha.i = alloca double, align 8 ]   %mul34.i = fmul double %41, %45
[  %y.addr.i16 = alloca double*, align 8   %r.addr.i15 = alloca double*, align 8 ]   %mul20.i = fmul double %25, %28
[  %alpha.i = alloca double, align 8   %beta.i = alloca double, align 8 ]   %mul11.i = fmul double %sub10.i, %19
[  %y.addr.i = alloca double*, align 8 ]   %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %64, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %67) #1
[  %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8 ]   %sub24.i = fsub double -0.000000e+00, %add23.i
[  %y.addr.i16 = alloca double*, align 8   %alpha.i = alloca double, align 8 ]   %add35.i = fadd double %40, %mul34.i
[  %y.addr.i16 = alloca double*, align 8   %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8 ]   %add.i25 = fadd double %29, %mul20.i
[  %alpha.i = alloca double, align 8   %beta.i = alloca double, align 8 ]   store double %mul11.i, double* %beta.i, align 8
[  %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8   %beta.i = alloca double, align 8 ]   %div.i27 = fdiv double %sub24.i, %35
[  %y.addr.i16 = alloca double*, align 8   %alpha.i = alloca double, align 8   %z.i = alloca [400 x double], align 16 ]   store double %add35.i, double* %arrayidx37.i, align 8
[  %y.addr.i16 = alloca double*, align 8   %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8 ]   store double %add.i25, double* %sum.i, align 8
[  %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8   %beta.i = alloca double, align 8   %alpha.i = alloca double, align 8 ]   store double %div.i27, double* %alpha.i, align 8


[Fallback] attempt to wrap not supported operation:
  %r1 = bitcast [400 x double]* %r to i8*
  bail out on missing operand 1 of 1
warning:   %r1 = bitcast [400 x double]* %r to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y2 = bitcast [400 x double]* %y to i8*
  bail out on missing operand 1 of 1
warning:   %y2 = bitcast [400 x double]* %y to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %r.addr1.i = bitcast double** %r.addr.i to i8*
  bail out on missing operand 1 of 1
warning:   %r.addr1.i = bitcast double** %r.addr.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %r.addr1.i18 = bitcast double** %r.addr.i15 to i8*
  bail out on missing operand 1 of 1
warning:   %r.addr1.i18 = bitcast double** %r.addr.i15 to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y.addr2.i = bitcast double** %y.addr.i16 to i8*
  bail out on missing operand 1 of 1
warning:   %y.addr2.i = bitcast double** %y.addr.i16 to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %z3.i = bitcast [400 x double]* %z.i to i8*
  bail out on missing operand 1 of 1
warning:   %z3.i = bitcast [400 x double]* %z.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %alpha4.i = bitcast double* %alpha.i to i8*
  bail out on missing operand 1 of 1
warning:   %alpha4.i = bitcast double* %alpha.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %beta5.i = bitcast double* %beta.i to i8*
  bail out on missing operand 1 of 1
warning:   %beta5.i = bitcast double* %beta.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %sum6.i = bitcast double* %sum.i to i8*
  bail out on missing operand 1 of 1
warning:   %sum6.i = bitcast double* %sum.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y.addr1.i = bitcast double** %y.addr.i to i8*
  bail out on missing operand 1 of 1
warning:   %y.addr1.i = bitcast double** %y.addr.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %131, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %136) #1
  Substituted operand number : 3 of 4
  mutated operands to:
  %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %131, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %139) #1
+ /opt/llvm-4.0-d/bin/clang -S -o ./build/_tmp2.durbin_out.s ./build/_tmp1.durbin_out.ll -O3 -I utilities -I linear-algebra/solvers/durbin -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS
clang-4.0: warning: argument unused during compilation: '-I utilities' [-Wunused-command-line-argument]
clang-4.0: warning: argument unused during compilation: '-I linear-algebra/solvers/durbin' [-Wunused-command-line-argument]
+ /opt/llvm-4.0-d/bin/clang -o ./build/durbin_out ./build/_tmp2.durbin_out.s -O3 -I utilities -I linear-algebra/solvers/durbin -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS -lm utilities/polybench.c
+ '[' x '!=' x ']'
+ /opt/llvm-4.0-d/bin/clang -S -o ./build/_tmp2_not_opt.durbin_out.s ./build/_tmp0.durbin_out.ll -O3 -I utilities -I linear-algebra/solvers/durbin -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS
clang-4.0: warning: argument unused during compilation: '-I utilities' [-Wunused-command-line-argument]
clang-4.0: warning: argument unused during compilation: '-I linear-algebra/solvers/durbin' [-Wunused-command-line-argument]
+ /opt/llvm-4.0-d/bin/clang -o ./build/durbin_out_not_opt ./build/_tmp2_not_opt.durbin_out.s -O3 -I utilities -I linear-algebra/solvers/durbin -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS -lm utilities/polybench.c
++ dirname ./magiclang.sh
+ ROOT=.
+ '[' 7 -lt 1 ']'
+ '[' -z x ']'
+ '[' x '!=' x ']'
+ OUTDIR=./build
+ mkdir -p ./build
+ SOEXT=so
++ uname -s
+ '[' Darwin = Darwin ']'
+ SOEXT=dylib
+ CLANG=/opt/llvm-4.0-d/bin/clang
+ OPT=/opt/llvm-4.0-d/bin/opt
+ LLC=/opt/llvm-4.0-d/bin/llc
+ PASSLIB=./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib
+ '[' '!' -e ./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib ']'
++ echo durbin_out
++ sed -E 's/\.[^\.]$//'
+ OUTNAME=durbin_out
++ /opt/llvm-4.0-d/bin/opt --version
++ grep DEBUG
++ wc -l
+ ISDEBUG='       1'
+ DEBUGONLYFLAG=-debug-only=flttofix
+ '[' 1 '!=' 1 ']'
+ /opt/llvm-4.0-d/bin/clang -S -emit-llvm linear-algebra/solvers/durbin/durbin.c -o ./build/_tmp0.durbin_out.ll -I utilities -I linear-algebra/solvers/durbin -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS
linear-algebra/solvers/durbin/durbin.c:27:50: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                 DATA_TYPE POLYBENCH_1D(r,N,n)) __attribute__((always_inline))
                                                               ^
linear-algebra/solvers/durbin/durbin.c:33:15: warning: 'annotate' attribute ignored when parsing type [-Wignored-attributes]
      r[i] = (DATA_TYPE)(n+1-i) / (n*200.0) + 1.5;
              ^~~~~~~~~
linear-algebra/solvers/durbin/durbin.h:66:36: note: expanded from macro 'DATA_TYPE'
#  define DATA_TYPE __attribute__((annotate("no_float"))) double
                                   ^~~~~~~~~~~~~~~~~~~~
linear-algebra/solvers/durbin/durbin.c:42:50: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                 DATA_TYPE POLYBENCH_1D(y,N,n)) __attribute__((always_inline))
                                                               ^
linear-algebra/solvers/durbin/durbin.c:63:52: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                   DATA_TYPE POLYBENCH_1D(y,N,n)) __attribute__((always_inline))
                                                                 ^
4 warnings generated.
+ '[' x '!=' x ']'
+ /opt/llvm-4.0-d/bin/opt -load=./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib -pass-remarks=flttofix -S -flttofix -dce -debug-only=flttofix ./build/_tmp0.durbin_out.ll -o ./build/_tmp1.durbin_out.ll -fixpfracbitsamt=31 -fixpbitsamt=64
conversion queue:
[  %r = alloca [400 x double], align 16 ]   %r = alloca [400 x double], align 16
[  %y = alloca [400 x double], align 16 ]   %y = alloca [400 x double], align 16
[  %r.addr.i = alloca double*, align 8 ]   %r.addr.i = alloca double*, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %r.addr.i15 = alloca double*, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %y.addr.i16 = alloca double*, align 8
[  %z.i = alloca [400 x double], align 16 ]   %z.i = alloca [400 x double], align 16
[  %alpha.i = alloca double, align 8 ]   %alpha.i = alloca double, align 8
[  %beta.i = alloca double, align 8 ]   %beta.i = alloca double, align 8
[  %sum.i = alloca double, align 8 ]   %sum.i = alloca double, align 8
[  %y.addr.i = alloca double*, align 8 ]   %y.addr.i = alloca double*, align 8
[  %r = alloca [400 x double], align 16 ]   %arraydecay3 = getelementptr inbounds [400 x double], [400 x double]* %r, i32 0, i32 0
[  %r = alloca [400 x double], align 16 ]   %arraydecay = getelementptr inbounds [400 x double], [400 x double]* %r, i32 0, i32 0
[  %r = alloca [400 x double], align 16 ]   %r1 = bitcast [400 x double]* %r to i8*
[  %y = alloca [400 x double], align 16 ]   %arraydecay5 = getelementptr inbounds [400 x double], [400 x double]* %y, i32 0, i32 0
[  %y = alloca [400 x double], align 16 ]   %arraydecay4 = getelementptr inbounds [400 x double], [400 x double]* %y, i32 0, i32 0
[  %y = alloca [400 x double], align 16 ]   %y2 = bitcast [400 x double]* %y to i8*
[  %r.addr.i = alloca double*, align 8 ]   %6 = load double*, double** %r.addr.i, align 8
[  %r.addr.i = alloca double*, align 8 ]   %r.addr1.i = bitcast double** %r.addr.i to i8*
[  %r.addr.i15 = alloca double*, align 8 ]   %31 = load double*, double** %r.addr.i15, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %22 = load double*, double** %r.addr.i15, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %13 = load double*, double** %r.addr.i15, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %10 = load double*, double** %r.addr.i15, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %r.addr1.i18 = bitcast double** %r.addr.i15 to i8*
[  %y.addr.i16 = alloca double*, align 8 ]   %56 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %52 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %42 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %38 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %26 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %12 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %y.addr2.i = bitcast double** %y.addr.i16 to i8*
[  %z.i = alloca [400 x double], align 16 ]   %arrayidx45.i = getelementptr inbounds [400 x double], [400 x double]* %z.i, i64 0, i64 %idxprom44.i
[  %z.i = alloca [400 x double], align 16 ]   %arrayidx37.i = getelementptr inbounds [400 x double], [400 x double]* %z.i, i64 0, i64 %idxprom36.i
[  %z.i = alloca [400 x double], align 16 ]   %z3.i = bitcast [400 x double]* %z.i to i8*
[  %alpha.i = alloca double, align 8 ]   %55 = load double, double* %alpha.i, align 8
[  %alpha.i = alloca double, align 8 ]   %41 = load double, double* %alpha.i, align 8
[  %alpha.i = alloca double, align 8 ]   %18 = load double, double* %alpha.i, align 8
[  %alpha.i = alloca double, align 8 ]   %17 = load double, double* %alpha.i, align 8
[  %alpha.i = alloca double, align 8 ]   %alpha4.i = bitcast double* %alpha.i to i8*
[  %beta.i = alloca double, align 8 ]   %35 = load double, double* %beta.i, align 8
[  %beta.i = alloca double, align 8 ]   %19 = load double, double* %beta.i, align 8
[  %beta.i = alloca double, align 8 ]   store double 1.000000e+00, double* %beta.i, align 8
[  %beta.i = alloca double, align 8 ]   %beta5.i = bitcast double* %beta.i to i8*
[  %sum.i = alloca double, align 8 ]   %34 = load double, double* %sum.i, align 8
[  %sum.i = alloca double, align 8 ]   %29 = load double, double* %sum.i, align 8
[  %sum.i = alloca double, align 8 ]   store double 0.000000e+00, double* %sum.i, align 8
[  %sum.i = alloca double, align 8 ]   %sum6.i = bitcast double* %sum.i to i8*
[  %y.addr.i = alloca double*, align 8 ]   %65 = load double*, double** %y.addr.i, align 8
[  %y.addr.i = alloca double*, align 8 ]   %y.addr1.i = bitcast double** %y.addr.i to i8*
[  %r = alloca [400 x double], align 16   %r.addr.i15 = alloca double*, align 8 ]   store double* %arraydecay3, double** %r.addr.i15, align 8
[  %r = alloca [400 x double], align 16   %r.addr.i = alloca double*, align 8 ]   store double* %arraydecay, double** %r.addr.i, align 8
[  %r = alloca [400 x double], align 16 ]   call void @llvm.var.annotation(i8* %r1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 104)
[  %y = alloca [400 x double], align 16   %y.addr.i = alloca double*, align 8 ]   store double* %arraydecay5, double** %y.addr.i, align 8
[  %y = alloca [400 x double], align 16   %y.addr.i16 = alloca double*, align 8 ]   store double* %arraydecay4, double** %y.addr.i16, align 8
[  %y = alloca [400 x double], align 16 ]   call void @llvm.var.annotation(i8* %y2, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 105)
[  %r.addr.i = alloca double*, align 8 ]   %arrayidx.i = getelementptr inbounds double, double* %6, i64 %idxprom.i
[  %r.addr.i = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %r.addr1.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 27) #1
[  %r.addr.i15 = alloca double*, align 8 ]   %arrayidx22.i = getelementptr inbounds double, double* %31, i64 %idxprom21.i
[  %r.addr.i15 = alloca double*, align 8 ]   %arrayidx17.i = getelementptr inbounds double, double* %22, i64 %idxprom.i24
[  %r.addr.i15 = alloca double*, align 8 ]   %14 = load double, double* %13, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %11 = load double, double* %10, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %r.addr1.i18, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 62) #1
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx52.i = getelementptr inbounds double, double* %56, i64 %idxprom51.i
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx47.i = getelementptr inbounds double, double* %52, i64 %idxprom46.i
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx33.i = getelementptr inbounds double, double* %42, i64 %idxprom32.i
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx29.i = getelementptr inbounds double, double* %38, i64 %idxprom28.i
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx19.i = getelementptr inbounds double, double* %26, i64 %idxprom18.i
[  %y.addr.i16 = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %y.addr2.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 63) #1
[  %z.i = alloca [400 x double], align 16 ]   %51 = load double, double* %arrayidx45.i, align 8
[  %z.i = alloca [400 x double], align 16 ]   call void @llvm.var.annotation(i8* %z3.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 65) #1
[  %alpha.i = alloca double, align 8 ]   %mul.i22 = fmul double %17, %18
[  %alpha.i = alloca double, align 8 ]   call void @llvm.var.annotation(i8* %alpha4.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 66) #1
[  %beta.i = alloca double, align 8 ]   call void @llvm.var.annotation(i8* %beta5.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 67) #1
[  %sum.i = alloca double, align 8 ]   call void @llvm.var.annotation(i8* %sum6.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 68) #1
[  %y.addr.i = alloca double*, align 8 ]   %arrayidx.i12 = getelementptr inbounds double, double* %65, i64 %idxprom.i11
[  %y.addr.i = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %y.addr1.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 42) #1
[  %r.addr.i = alloca double*, align 8 ]   store double %add3.i, double* %arrayidx.i, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %33 = load double, double* %arrayidx22.i, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %25 = load double, double* %arrayidx17.i, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %sub9.i = fsub double -0.000000e+00, %14
[  %r.addr.i15 = alloca double*, align 8 ]   %sub.i19 = fsub double -0.000000e+00, %11
[  %y.addr.i16 = alloca double*, align 8   %alpha.i = alloca double, align 8 ]   store double %55, double* %arrayidx52.i, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %45 = load double, double* %arrayidx33.i, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %40 = load double, double* %arrayidx29.i, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %28 = load double, double* %arrayidx19.i, align 8
[  %z.i = alloca [400 x double], align 16   %y.addr.i16 = alloca double*, align 8 ]   store double %51, double* %arrayidx47.i, align 8
[  %alpha.i = alloca double, align 8 ]   %sub10.i = fsub double 1.000000e+00, %mul.i22
[  %y.addr.i = alloca double*, align 8 ]   %67 = load double, double* %arrayidx.i12, align 8
[  %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8 ]   %add23.i = fadd double %33, %34
[  %r.addr.i15 = alloca double*, align 8   %alpha.i = alloca double, align 8 ]   store double %sub9.i, double* %alpha.i, align 8
[  %r.addr.i15 = alloca double*, align 8   %y.addr.i16 = alloca double*, align 8 ]   store double %sub.i19, double* %12, align 8
[  %y.addr.i16 = alloca double*, align 8   %alpha.i = alloca double, align 8 ]   %mul34.i = fmul double %41, %45
[  %y.addr.i16 = alloca double*, align 8   %r.addr.i15 = alloca double*, align 8 ]   %mul20.i = fmul double %25, %28
[  %alpha.i = alloca double, align 8   %beta.i = alloca double, align 8 ]   %mul11.i = fmul double %sub10.i, %19
[  %y.addr.i = alloca double*, align 8 ]   %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %64, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %67) #1
[  %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8 ]   %sub24.i = fsub double -0.000000e+00, %add23.i
[  %y.addr.i16 = alloca double*, align 8   %alpha.i = alloca double, align 8 ]   %add35.i = fadd double %40, %mul34.i
[  %y.addr.i16 = alloca double*, align 8   %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8 ]   %add.i25 = fadd double %29, %mul20.i
[  %alpha.i = alloca double, align 8   %beta.i = alloca double, align 8 ]   store double %mul11.i, double* %beta.i, align 8
[  %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8   %beta.i = alloca double, align 8 ]   %div.i27 = fdiv double %sub24.i, %35
[  %y.addr.i16 = alloca double*, align 8   %alpha.i = alloca double, align 8   %z.i = alloca [400 x double], align 16 ]   store double %add35.i, double* %arrayidx37.i, align 8
[  %y.addr.i16 = alloca double*, align 8   %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8 ]   store double %add.i25, double* %sum.i, align 8
[  %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8   %beta.i = alloca double, align 8   %alpha.i = alloca double, align 8 ]   store double %div.i27, double* %alpha.i, align 8


[Fallback] attempt to wrap not supported operation:
  %r1 = bitcast [400 x double]* %r to i8*
  bail out on missing operand 1 of 1
warning:   %r1 = bitcast [400 x double]* %r to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y2 = bitcast [400 x double]* %y to i8*
  bail out on missing operand 1 of 1
warning:   %y2 = bitcast [400 x double]* %y to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %r.addr1.i = bitcast double** %r.addr.i to i8*
  bail out on missing operand 1 of 1
warning:   %r.addr1.i = bitcast double** %r.addr.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %r.addr1.i18 = bitcast double** %r.addr.i15 to i8*
  bail out on missing operand 1 of 1
warning:   %r.addr1.i18 = bitcast double** %r.addr.i15 to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y.addr2.i = bitcast double** %y.addr.i16 to i8*
  bail out on missing operand 1 of 1
warning:   %y.addr2.i = bitcast double** %y.addr.i16 to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %z3.i = bitcast [400 x double]* %z.i to i8*
  bail out on missing operand 1 of 1
warning:   %z3.i = bitcast [400 x double]* %z.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %alpha4.i = bitcast double* %alpha.i to i8*
  bail out on missing operand 1 of 1
warning:   %alpha4.i = bitcast double* %alpha.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %beta5.i = bitcast double* %beta.i to i8*
  bail out on missing operand 1 of 1
warning:   %beta5.i = bitcast double* %beta.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %sum6.i = bitcast double* %sum.i to i8*
  bail out on missing operand 1 of 1
warning:   %sum6.i = bitcast double* %sum.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y.addr1.i = bitcast double** %y.addr.i to i8*
  bail out on missing operand 1 of 1
warning:   %y.addr1.i = bitcast double** %y.addr.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %131, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %136) #1
  Substituted operand number : 3 of 4
  mutated operands to:
  %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %131, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %139) #1
+ /opt/llvm-4.0-d/bin/clang -S -o ./build/_tmp2.durbin_out.s ./build/_tmp1.durbin_out.ll -O3 -I utilities -I linear-algebra/solvers/durbin -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS
clang-4.0: warning: argument unused during compilation: '-I utilities' [-Wunused-command-line-argument]
clang-4.0: warning: argument unused during compilation: '-I linear-algebra/solvers/durbin' [-Wunused-command-line-argument]
+ /opt/llvm-4.0-d/bin/clang -o ./build/durbin_out ./build/_tmp2.durbin_out.s -O3 -I utilities -I linear-algebra/solvers/durbin -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS -lm utilities/polybench.c
+ '[' x '!=' x ']'
+ /opt/llvm-4.0-d/bin/clang -S -o ./build/_tmp2_not_opt.durbin_out.s ./build/_tmp0.durbin_out.ll -O3 -I utilities -I linear-algebra/solvers/durbin -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS
clang-4.0: warning: argument unused during compilation: '-I utilities' [-Wunused-command-line-argument]
clang-4.0: warning: argument unused during compilation: '-I linear-algebra/solvers/durbin' [-Wunused-command-line-argument]
+ /opt/llvm-4.0-d/bin/clang -o ./build/durbin_out_not_opt ./build/_tmp2_not_opt.durbin_out.s -O3 -I utilities -I linear-algebra/solvers/durbin -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS -lm utilities/polybench.c
++ dirname ./magiclang.sh
+ ROOT=.
+ '[' 7 -lt 1 ']'
+ '[' -z x ']'
+ '[' x '!=' x ']'
+ OUTDIR=./build
+ mkdir -p ./build
+ SOEXT=so
++ uname -s
+ '[' Darwin = Darwin ']'
+ SOEXT=dylib
+ CLANG=/opt/llvm-4.0-d/bin/clang
+ OPT=/opt/llvm-4.0-d/bin/opt
+ LLC=/opt/llvm-4.0-d/bin/llc
+ PASSLIB=./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib
+ '[' '!' -e ./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib ']'
++ echo durbin_out
++ sed -E 's/\.[^\.]$//'
+ OUTNAME=durbin_out
++ /opt/llvm-4.0-d/bin/opt --version
++ grep DEBUG
++ wc -l
+ ISDEBUG='       1'
+ DEBUGONLYFLAG=-debug-only=flttofix
+ '[' 1 '!=' 1 ']'
+ /opt/llvm-4.0-d/bin/clang -S -emit-llvm linear-algebra/solvers/durbin/durbin.c -o ./build/_tmp0.durbin_out.ll -I utilities -I linear-algebra/solvers/durbin -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS
linear-algebra/solvers/durbin/durbin.c:27:50: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                 DATA_TYPE POLYBENCH_1D(r,N,n)) __attribute__((always_inline))
                                                               ^
linear-algebra/solvers/durbin/durbin.c:33:15: warning: 'annotate' attribute ignored when parsing type [-Wignored-attributes]
      r[i] = (DATA_TYPE)(n+1-i) / (n*200.0) + 1.5;
              ^~~~~~~~~
linear-algebra/solvers/durbin/durbin.h:66:36: note: expanded from macro 'DATA_TYPE'
#  define DATA_TYPE __attribute__((annotate("no_float"))) double
                                   ^~~~~~~~~~~~~~~~~~~~
linear-algebra/solvers/durbin/durbin.c:42:50: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                 DATA_TYPE POLYBENCH_1D(y,N,n)) __attribute__((always_inline))
                                                               ^
linear-algebra/solvers/durbin/durbin.c:63:52: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                   DATA_TYPE POLYBENCH_1D(y,N,n)) __attribute__((always_inline))
                                                                 ^
4 warnings generated.
+ '[' x '!=' x ']'
+ /opt/llvm-4.0-d/bin/opt -load=./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib -pass-remarks=flttofix -S -flttofix -dce -debug-only=flttofix ./build/_tmp0.durbin_out.ll -o ./build/_tmp1.durbin_out.ll -fixpfracbitsamt=31 -fixpbitsamt=64
conversion queue:
[  %r = alloca [400 x double], align 16 ]   %r = alloca [400 x double], align 16
[  %y = alloca [400 x double], align 16 ]   %y = alloca [400 x double], align 16
[  %r.addr.i = alloca double*, align 8 ]   %r.addr.i = alloca double*, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %r.addr.i15 = alloca double*, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %y.addr.i16 = alloca double*, align 8
[  %z.i = alloca [400 x double], align 16 ]   %z.i = alloca [400 x double], align 16
[  %alpha.i = alloca double, align 8 ]   %alpha.i = alloca double, align 8
[  %beta.i = alloca double, align 8 ]   %beta.i = alloca double, align 8
[  %sum.i = alloca double, align 8 ]   %sum.i = alloca double, align 8
[  %y.addr.i = alloca double*, align 8 ]   %y.addr.i = alloca double*, align 8
[  %r = alloca [400 x double], align 16 ]   %arraydecay3 = getelementptr inbounds [400 x double], [400 x double]* %r, i32 0, i32 0
[  %r = alloca [400 x double], align 16 ]   %arraydecay = getelementptr inbounds [400 x double], [400 x double]* %r, i32 0, i32 0
[  %r = alloca [400 x double], align 16 ]   %r1 = bitcast [400 x double]* %r to i8*
[  %y = alloca [400 x double], align 16 ]   %arraydecay5 = getelementptr inbounds [400 x double], [400 x double]* %y, i32 0, i32 0
[  %y = alloca [400 x double], align 16 ]   %arraydecay4 = getelementptr inbounds [400 x double], [400 x double]* %y, i32 0, i32 0
[  %y = alloca [400 x double], align 16 ]   %y2 = bitcast [400 x double]* %y to i8*
[  %r.addr.i = alloca double*, align 8 ]   %6 = load double*, double** %r.addr.i, align 8
[  %r.addr.i = alloca double*, align 8 ]   %r.addr1.i = bitcast double** %r.addr.i to i8*
[  %r.addr.i15 = alloca double*, align 8 ]   %31 = load double*, double** %r.addr.i15, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %22 = load double*, double** %r.addr.i15, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %13 = load double*, double** %r.addr.i15, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %10 = load double*, double** %r.addr.i15, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %r.addr1.i18 = bitcast double** %r.addr.i15 to i8*
[  %y.addr.i16 = alloca double*, align 8 ]   %56 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %52 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %42 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %38 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %26 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %12 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %y.addr2.i = bitcast double** %y.addr.i16 to i8*
[  %z.i = alloca [400 x double], align 16 ]   %arrayidx45.i = getelementptr inbounds [400 x double], [400 x double]* %z.i, i64 0, i64 %idxprom44.i
[  %z.i = alloca [400 x double], align 16 ]   %arrayidx37.i = getelementptr inbounds [400 x double], [400 x double]* %z.i, i64 0, i64 %idxprom36.i
[  %z.i = alloca [400 x double], align 16 ]   %z3.i = bitcast [400 x double]* %z.i to i8*
[  %alpha.i = alloca double, align 8 ]   %55 = load double, double* %alpha.i, align 8
[  %alpha.i = alloca double, align 8 ]   %41 = load double, double* %alpha.i, align 8
[  %alpha.i = alloca double, align 8 ]   %18 = load double, double* %alpha.i, align 8
[  %alpha.i = alloca double, align 8 ]   %17 = load double, double* %alpha.i, align 8
[  %alpha.i = alloca double, align 8 ]   %alpha4.i = bitcast double* %alpha.i to i8*
[  %beta.i = alloca double, align 8 ]   %35 = load double, double* %beta.i, align 8
[  %beta.i = alloca double, align 8 ]   %19 = load double, double* %beta.i, align 8
[  %beta.i = alloca double, align 8 ]   store double 1.000000e+00, double* %beta.i, align 8
[  %beta.i = alloca double, align 8 ]   %beta5.i = bitcast double* %beta.i to i8*
[  %sum.i = alloca double, align 8 ]   %34 = load double, double* %sum.i, align 8
[  %sum.i = alloca double, align 8 ]   %29 = load double, double* %sum.i, align 8
[  %sum.i = alloca double, align 8 ]   store double 0.000000e+00, double* %sum.i, align 8
[  %sum.i = alloca double, align 8 ]   %sum6.i = bitcast double* %sum.i to i8*
[  %y.addr.i = alloca double*, align 8 ]   %65 = load double*, double** %y.addr.i, align 8
[  %y.addr.i = alloca double*, align 8 ]   %y.addr1.i = bitcast double** %y.addr.i to i8*
[  %r = alloca [400 x double], align 16   %r.addr.i15 = alloca double*, align 8 ]   store double* %arraydecay3, double** %r.addr.i15, align 8
[  %r = alloca [400 x double], align 16   %r.addr.i = alloca double*, align 8 ]   store double* %arraydecay, double** %r.addr.i, align 8
[  %r = alloca [400 x double], align 16 ]   call void @llvm.var.annotation(i8* %r1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 104)
[  %y = alloca [400 x double], align 16   %y.addr.i = alloca double*, align 8 ]   store double* %arraydecay5, double** %y.addr.i, align 8
[  %y = alloca [400 x double], align 16   %y.addr.i16 = alloca double*, align 8 ]   store double* %arraydecay4, double** %y.addr.i16, align 8
[  %y = alloca [400 x double], align 16 ]   call void @llvm.var.annotation(i8* %y2, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 105)
[  %r.addr.i = alloca double*, align 8 ]   %arrayidx.i = getelementptr inbounds double, double* %6, i64 %idxprom.i
[  %r.addr.i = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %r.addr1.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 27) #1
[  %r.addr.i15 = alloca double*, align 8 ]   %arrayidx22.i = getelementptr inbounds double, double* %31, i64 %idxprom21.i
[  %r.addr.i15 = alloca double*, align 8 ]   %arrayidx17.i = getelementptr inbounds double, double* %22, i64 %idxprom.i24
[  %r.addr.i15 = alloca double*, align 8 ]   %14 = load double, double* %13, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %11 = load double, double* %10, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %r.addr1.i18, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 62) #1
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx52.i = getelementptr inbounds double, double* %56, i64 %idxprom51.i
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx47.i = getelementptr inbounds double, double* %52, i64 %idxprom46.i
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx33.i = getelementptr inbounds double, double* %42, i64 %idxprom32.i
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx29.i = getelementptr inbounds double, double* %38, i64 %idxprom28.i
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx19.i = getelementptr inbounds double, double* %26, i64 %idxprom18.i
[  %y.addr.i16 = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %y.addr2.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 63) #1
[  %z.i = alloca [400 x double], align 16 ]   %51 = load double, double* %arrayidx45.i, align 8
[  %z.i = alloca [400 x double], align 16 ]   call void @llvm.var.annotation(i8* %z3.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 65) #1
[  %alpha.i = alloca double, align 8 ]   %mul.i22 = fmul double %17, %18
[  %alpha.i = alloca double, align 8 ]   call void @llvm.var.annotation(i8* %alpha4.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 66) #1
[  %beta.i = alloca double, align 8 ]   call void @llvm.var.annotation(i8* %beta5.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 67) #1
[  %sum.i = alloca double, align 8 ]   call void @llvm.var.annotation(i8* %sum6.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 68) #1
[  %y.addr.i = alloca double*, align 8 ]   %arrayidx.i12 = getelementptr inbounds double, double* %65, i64 %idxprom.i11
[  %y.addr.i = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %y.addr1.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 42) #1
[  %r.addr.i = alloca double*, align 8 ]   store double %add3.i, double* %arrayidx.i, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %33 = load double, double* %arrayidx22.i, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %25 = load double, double* %arrayidx17.i, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %sub9.i = fsub double -0.000000e+00, %14
[  %r.addr.i15 = alloca double*, align 8 ]   %sub.i19 = fsub double -0.000000e+00, %11
[  %y.addr.i16 = alloca double*, align 8   %alpha.i = alloca double, align 8 ]   store double %55, double* %arrayidx52.i, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %45 = load double, double* %arrayidx33.i, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %40 = load double, double* %arrayidx29.i, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %28 = load double, double* %arrayidx19.i, align 8
[  %z.i = alloca [400 x double], align 16   %y.addr.i16 = alloca double*, align 8 ]   store double %51, double* %arrayidx47.i, align 8
[  %alpha.i = alloca double, align 8 ]   %sub10.i = fsub double 1.000000e+00, %mul.i22
[  %y.addr.i = alloca double*, align 8 ]   %67 = load double, double* %arrayidx.i12, align 8
[  %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8 ]   %add23.i = fadd double %33, %34
[  %r.addr.i15 = alloca double*, align 8   %alpha.i = alloca double, align 8 ]   store double %sub9.i, double* %alpha.i, align 8
[  %r.addr.i15 = alloca double*, align 8   %y.addr.i16 = alloca double*, align 8 ]   store double %sub.i19, double* %12, align 8
[  %y.addr.i16 = alloca double*, align 8   %alpha.i = alloca double, align 8 ]   %mul34.i = fmul double %41, %45
[  %y.addr.i16 = alloca double*, align 8   %r.addr.i15 = alloca double*, align 8 ]   %mul20.i = fmul double %25, %28
[  %alpha.i = alloca double, align 8   %beta.i = alloca double, align 8 ]   %mul11.i = fmul double %sub10.i, %19
[  %y.addr.i = alloca double*, align 8 ]   %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %64, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %67) #1
[  %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8 ]   %sub24.i = fsub double -0.000000e+00, %add23.i
[  %y.addr.i16 = alloca double*, align 8   %alpha.i = alloca double, align 8 ]   %add35.i = fadd double %40, %mul34.i
[  %y.addr.i16 = alloca double*, align 8   %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8 ]   %add.i25 = fadd double %29, %mul20.i
[  %alpha.i = alloca double, align 8   %beta.i = alloca double, align 8 ]   store double %mul11.i, double* %beta.i, align 8
[  %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8   %beta.i = alloca double, align 8 ]   %div.i27 = fdiv double %sub24.i, %35
[  %y.addr.i16 = alloca double*, align 8   %alpha.i = alloca double, align 8   %z.i = alloca [400 x double], align 16 ]   store double %add35.i, double* %arrayidx37.i, align 8
[  %y.addr.i16 = alloca double*, align 8   %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8 ]   store double %add.i25, double* %sum.i, align 8
[  %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8   %beta.i = alloca double, align 8   %alpha.i = alloca double, align 8 ]   store double %div.i27, double* %alpha.i, align 8


[Fallback] attempt to wrap not supported operation:
  %r1 = bitcast [400 x double]* %r to i8*
  bail out on missing operand 1 of 1
warning:   %r1 = bitcast [400 x double]* %r to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y2 = bitcast [400 x double]* %y to i8*
  bail out on missing operand 1 of 1
warning:   %y2 = bitcast [400 x double]* %y to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %r.addr1.i = bitcast double** %r.addr.i to i8*
  bail out on missing operand 1 of 1
warning:   %r.addr1.i = bitcast double** %r.addr.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %r.addr1.i18 = bitcast double** %r.addr.i15 to i8*
  bail out on missing operand 1 of 1
warning:   %r.addr1.i18 = bitcast double** %r.addr.i15 to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y.addr2.i = bitcast double** %y.addr.i16 to i8*
  bail out on missing operand 1 of 1
warning:   %y.addr2.i = bitcast double** %y.addr.i16 to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %z3.i = bitcast [400 x double]* %z.i to i8*
  bail out on missing operand 1 of 1
warning:   %z3.i = bitcast [400 x double]* %z.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %alpha4.i = bitcast double* %alpha.i to i8*
  bail out on missing operand 1 of 1
warning:   %alpha4.i = bitcast double* %alpha.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %beta5.i = bitcast double* %beta.i to i8*
  bail out on missing operand 1 of 1
warning:   %beta5.i = bitcast double* %beta.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %sum6.i = bitcast double* %sum.i to i8*
  bail out on missing operand 1 of 1
warning:   %sum6.i = bitcast double* %sum.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y.addr1.i = bitcast double** %y.addr.i to i8*
  bail out on missing operand 1 of 1
warning:   %y.addr1.i = bitcast double** %y.addr.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %131, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %136) #1
  Substituted operand number : 3 of 4
  mutated operands to:
  %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %131, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %139) #1
+ /opt/llvm-4.0-d/bin/clang -S -o ./build/_tmp2.durbin_out.s ./build/_tmp1.durbin_out.ll -O3 -I utilities -I linear-algebra/solvers/durbin -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS
clang-4.0: warning: argument unused during compilation: '-I utilities' [-Wunused-command-line-argument]
clang-4.0: warning: argument unused during compilation: '-I linear-algebra/solvers/durbin' [-Wunused-command-line-argument]
+ /opt/llvm-4.0-d/bin/clang -o ./build/durbin_out ./build/_tmp2.durbin_out.s -O3 -I utilities -I linear-algebra/solvers/durbin -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS -lm utilities/polybench.c
+ '[' x '!=' x ']'
+ /opt/llvm-4.0-d/bin/clang -S -o ./build/_tmp2_not_opt.durbin_out.s ./build/_tmp0.durbin_out.ll -O3 -I utilities -I linear-algebra/solvers/durbin -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS
clang-4.0: warning: argument unused during compilation: '-I utilities' [-Wunused-command-line-argument]
clang-4.0: warning: argument unused during compilation: '-I linear-algebra/solvers/durbin' [-Wunused-command-line-argument]
+ /opt/llvm-4.0-d/bin/clang -o ./build/durbin_out_not_opt ./build/_tmp2_not_opt.durbin_out.s -O3 -I utilities -I linear-algebra/solvers/durbin -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS -lm utilities/polybench.c
++ dirname ./magiclang.sh
+ ROOT=.
+ '[' 7 -lt 1 ']'
+ '[' -z x ']'
+ '[' x '!=' x ']'
+ OUTDIR=./build
+ mkdir -p ./build
+ SOEXT=so
++ uname -s
+ '[' Darwin = Darwin ']'
+ SOEXT=dylib
+ CLANG=/opt/llvm-4.0-d/bin/clang
+ OPT=/opt/llvm-4.0-d/bin/opt
+ LLC=/opt/llvm-4.0-d/bin/llc
+ PASSLIB=./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib
+ '[' '!' -e ./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib ']'
++ echo durbin_out
++ sed -E 's/\.[^\.]$//'
+ OUTNAME=durbin_out
++ /opt/llvm-4.0-d/bin/opt --version
++ grep DEBUG
++ wc -l
+ ISDEBUG='       1'
+ DEBUGONLYFLAG=-debug-only=flttofix
+ '[' 1 '!=' 1 ']'
+ /opt/llvm-4.0-d/bin/clang -S -emit-llvm linear-algebra/solvers/durbin/durbin.c -o ./build/_tmp0.durbin_out.ll -I utilities -I linear-algebra/solvers/durbin -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS
linear-algebra/solvers/durbin/durbin.c:27:50: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                 DATA_TYPE POLYBENCH_1D(r,N,n)) __attribute__((always_inline))
                                                               ^
linear-algebra/solvers/durbin/durbin.c:33:15: warning: 'annotate' attribute ignored when parsing type [-Wignored-attributes]
      r[i] = (DATA_TYPE)(n+1-i) / (n*200.0) + 1.5;
              ^~~~~~~~~
linear-algebra/solvers/durbin/durbin.h:66:36: note: expanded from macro 'DATA_TYPE'
#  define DATA_TYPE __attribute__((annotate("no_float"))) double
                                   ^~~~~~~~~~~~~~~~~~~~
linear-algebra/solvers/durbin/durbin.c:42:50: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                 DATA_TYPE POLYBENCH_1D(y,N,n)) __attribute__((always_inline))
                                                               ^
linear-algebra/solvers/durbin/durbin.c:63:52: warning: GCC does not allow 'always_inline' attribute in this position on a function definition [-Wgcc-compat]
                   DATA_TYPE POLYBENCH_1D(y,N,n)) __attribute__((always_inline))
                                                                 ^
4 warnings generated.
+ '[' x '!=' x ']'
+ /opt/llvm-4.0-d/bin/opt -load=./../../build/LLVMFloatToFixed/Debug/LLVMFloatToFixed.dylib -pass-remarks=flttofix -S -flttofix -dce -debug-only=flttofix ./build/_tmp0.durbin_out.ll -o ./build/_tmp1.durbin_out.ll -fixpfracbitsamt=47 -fixpbitsamt=64
conversion queue:
[  %r = alloca [400 x double], align 16 ]   %r = alloca [400 x double], align 16
[  %y = alloca [400 x double], align 16 ]   %y = alloca [400 x double], align 16
[  %r.addr.i = alloca double*, align 8 ]   %r.addr.i = alloca double*, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %r.addr.i15 = alloca double*, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %y.addr.i16 = alloca double*, align 8
[  %z.i = alloca [400 x double], align 16 ]   %z.i = alloca [400 x double], align 16
[  %alpha.i = alloca double, align 8 ]   %alpha.i = alloca double, align 8
[  %beta.i = alloca double, align 8 ]   %beta.i = alloca double, align 8
[  %sum.i = alloca double, align 8 ]   %sum.i = alloca double, align 8
[  %y.addr.i = alloca double*, align 8 ]   %y.addr.i = alloca double*, align 8
[  %r = alloca [400 x double], align 16 ]   %arraydecay3 = getelementptr inbounds [400 x double], [400 x double]* %r, i32 0, i32 0
[  %r = alloca [400 x double], align 16 ]   %arraydecay = getelementptr inbounds [400 x double], [400 x double]* %r, i32 0, i32 0
[  %r = alloca [400 x double], align 16 ]   %r1 = bitcast [400 x double]* %r to i8*
[  %y = alloca [400 x double], align 16 ]   %arraydecay5 = getelementptr inbounds [400 x double], [400 x double]* %y, i32 0, i32 0
[  %y = alloca [400 x double], align 16 ]   %arraydecay4 = getelementptr inbounds [400 x double], [400 x double]* %y, i32 0, i32 0
[  %y = alloca [400 x double], align 16 ]   %y2 = bitcast [400 x double]* %y to i8*
[  %r.addr.i = alloca double*, align 8 ]   %6 = load double*, double** %r.addr.i, align 8
[  %r.addr.i = alloca double*, align 8 ]   %r.addr1.i = bitcast double** %r.addr.i to i8*
[  %r.addr.i15 = alloca double*, align 8 ]   %31 = load double*, double** %r.addr.i15, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %22 = load double*, double** %r.addr.i15, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %13 = load double*, double** %r.addr.i15, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %10 = load double*, double** %r.addr.i15, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %r.addr1.i18 = bitcast double** %r.addr.i15 to i8*
[  %y.addr.i16 = alloca double*, align 8 ]   %56 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %52 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %42 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %38 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %26 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %12 = load double*, double** %y.addr.i16, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %y.addr2.i = bitcast double** %y.addr.i16 to i8*
[  %z.i = alloca [400 x double], align 16 ]   %arrayidx45.i = getelementptr inbounds [400 x double], [400 x double]* %z.i, i64 0, i64 %idxprom44.i
[  %z.i = alloca [400 x double], align 16 ]   %arrayidx37.i = getelementptr inbounds [400 x double], [400 x double]* %z.i, i64 0, i64 %idxprom36.i
[  %z.i = alloca [400 x double], align 16 ]   %z3.i = bitcast [400 x double]* %z.i to i8*
[  %alpha.i = alloca double, align 8 ]   %55 = load double, double* %alpha.i, align 8
[  %alpha.i = alloca double, align 8 ]   %41 = load double, double* %alpha.i, align 8
[  %alpha.i = alloca double, align 8 ]   %18 = load double, double* %alpha.i, align 8
[  %alpha.i = alloca double, align 8 ]   %17 = load double, double* %alpha.i, align 8
[  %alpha.i = alloca double, align 8 ]   %alpha4.i = bitcast double* %alpha.i to i8*
[  %beta.i = alloca double, align 8 ]   %35 = load double, double* %beta.i, align 8
[  %beta.i = alloca double, align 8 ]   %19 = load double, double* %beta.i, align 8
[  %beta.i = alloca double, align 8 ]   store double 1.000000e+00, double* %beta.i, align 8
[  %beta.i = alloca double, align 8 ]   %beta5.i = bitcast double* %beta.i to i8*
[  %sum.i = alloca double, align 8 ]   %34 = load double, double* %sum.i, align 8
[  %sum.i = alloca double, align 8 ]   %29 = load double, double* %sum.i, align 8
[  %sum.i = alloca double, align 8 ]   store double 0.000000e+00, double* %sum.i, align 8
[  %sum.i = alloca double, align 8 ]   %sum6.i = bitcast double* %sum.i to i8*
[  %y.addr.i = alloca double*, align 8 ]   %65 = load double*, double** %y.addr.i, align 8
[  %y.addr.i = alloca double*, align 8 ]   %y.addr1.i = bitcast double** %y.addr.i to i8*
[  %r = alloca [400 x double], align 16   %r.addr.i15 = alloca double*, align 8 ]   store double* %arraydecay3, double** %r.addr.i15, align 8
[  %r = alloca [400 x double], align 16   %r.addr.i = alloca double*, align 8 ]   store double* %arraydecay, double** %r.addr.i, align 8
[  %r = alloca [400 x double], align 16 ]   call void @llvm.var.annotation(i8* %r1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 104)
[  %y = alloca [400 x double], align 16   %y.addr.i = alloca double*, align 8 ]   store double* %arraydecay5, double** %y.addr.i, align 8
[  %y = alloca [400 x double], align 16   %y.addr.i16 = alloca double*, align 8 ]   store double* %arraydecay4, double** %y.addr.i16, align 8
[  %y = alloca [400 x double], align 16 ]   call void @llvm.var.annotation(i8* %y2, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 105)
[  %r.addr.i = alloca double*, align 8 ]   %arrayidx.i = getelementptr inbounds double, double* %6, i64 %idxprom.i
[  %r.addr.i = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %r.addr1.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 27) #1
[  %r.addr.i15 = alloca double*, align 8 ]   %arrayidx22.i = getelementptr inbounds double, double* %31, i64 %idxprom21.i
[  %r.addr.i15 = alloca double*, align 8 ]   %arrayidx17.i = getelementptr inbounds double, double* %22, i64 %idxprom.i24
[  %r.addr.i15 = alloca double*, align 8 ]   %14 = load double, double* %13, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %11 = load double, double* %10, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %r.addr1.i18, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 62) #1
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx52.i = getelementptr inbounds double, double* %56, i64 %idxprom51.i
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx47.i = getelementptr inbounds double, double* %52, i64 %idxprom46.i
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx33.i = getelementptr inbounds double, double* %42, i64 %idxprom32.i
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx29.i = getelementptr inbounds double, double* %38, i64 %idxprom28.i
[  %y.addr.i16 = alloca double*, align 8 ]   %arrayidx19.i = getelementptr inbounds double, double* %26, i64 %idxprom18.i
[  %y.addr.i16 = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %y.addr2.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 63) #1
[  %z.i = alloca [400 x double], align 16 ]   %51 = load double, double* %arrayidx45.i, align 8
[  %z.i = alloca [400 x double], align 16 ]   call void @llvm.var.annotation(i8* %z3.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 65) #1
[  %alpha.i = alloca double, align 8 ]   %mul.i22 = fmul double %17, %18
[  %alpha.i = alloca double, align 8 ]   call void @llvm.var.annotation(i8* %alpha4.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 66) #1
[  %beta.i = alloca double, align 8 ]   call void @llvm.var.annotation(i8* %beta5.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 67) #1
[  %sum.i = alloca double, align 8 ]   call void @llvm.var.annotation(i8* %sum6.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 68) #1
[  %y.addr.i = alloca double*, align 8 ]   %arrayidx.i12 = getelementptr inbounds double, double* %65, i64 %idxprom.i11
[  %y.addr.i = alloca double*, align 8 ]   call void @llvm.var.annotation(i8* %y.addr1.i, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 42) #1
[  %r.addr.i = alloca double*, align 8 ]   store double %add3.i, double* %arrayidx.i, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %33 = load double, double* %arrayidx22.i, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %25 = load double, double* %arrayidx17.i, align 8
[  %r.addr.i15 = alloca double*, align 8 ]   %sub9.i = fsub double -0.000000e+00, %14
[  %r.addr.i15 = alloca double*, align 8 ]   %sub.i19 = fsub double -0.000000e+00, %11
[  %y.addr.i16 = alloca double*, align 8   %alpha.i = alloca double, align 8 ]   store double %55, double* %arrayidx52.i, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %45 = load double, double* %arrayidx33.i, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %40 = load double, double* %arrayidx29.i, align 8
[  %y.addr.i16 = alloca double*, align 8 ]   %28 = load double, double* %arrayidx19.i, align 8
[  %z.i = alloca [400 x double], align 16   %y.addr.i16 = alloca double*, align 8 ]   store double %51, double* %arrayidx47.i, align 8
[  %alpha.i = alloca double, align 8 ]   %sub10.i = fsub double 1.000000e+00, %mul.i22
[  %y.addr.i = alloca double*, align 8 ]   %67 = load double, double* %arrayidx.i12, align 8
[  %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8 ]   %add23.i = fadd double %33, %34
[  %r.addr.i15 = alloca double*, align 8   %alpha.i = alloca double, align 8 ]   store double %sub9.i, double* %alpha.i, align 8
[  %r.addr.i15 = alloca double*, align 8   %y.addr.i16 = alloca double*, align 8 ]   store double %sub.i19, double* %12, align 8
[  %y.addr.i16 = alloca double*, align 8   %alpha.i = alloca double, align 8 ]   %mul34.i = fmul double %41, %45
[  %y.addr.i16 = alloca double*, align 8   %r.addr.i15 = alloca double*, align 8 ]   %mul20.i = fmul double %25, %28
[  %alpha.i = alloca double, align 8   %beta.i = alloca double, align 8 ]   %mul11.i = fmul double %sub10.i, %19
[  %y.addr.i = alloca double*, align 8 ]   %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %64, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %67) #1
[  %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8 ]   %sub24.i = fsub double -0.000000e+00, %add23.i
[  %y.addr.i16 = alloca double*, align 8   %alpha.i = alloca double, align 8 ]   %add35.i = fadd double %40, %mul34.i
[  %y.addr.i16 = alloca double*, align 8   %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8 ]   %add.i25 = fadd double %29, %mul20.i
[  %alpha.i = alloca double, align 8   %beta.i = alloca double, align 8 ]   store double %mul11.i, double* %beta.i, align 8
[  %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8   %beta.i = alloca double, align 8 ]   %div.i27 = fdiv double %sub24.i, %35
[  %y.addr.i16 = alloca double*, align 8   %alpha.i = alloca double, align 8   %z.i = alloca [400 x double], align 16 ]   store double %add35.i, double* %arrayidx37.i, align 8
[  %y.addr.i16 = alloca double*, align 8   %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8 ]   store double %add.i25, double* %sum.i, align 8
[  %r.addr.i15 = alloca double*, align 8   %sum.i = alloca double, align 8   %beta.i = alloca double, align 8   %alpha.i = alloca double, align 8 ]   store double %div.i27, double* %alpha.i, align 8


[Fallback] attempt to wrap not supported operation:
  %r1 = bitcast [400 x double]* %r to i8*
  bail out on missing operand 1 of 1
warning:   %r1 = bitcast [400 x double]* %r to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y2 = bitcast [400 x double]* %y to i8*
  bail out on missing operand 1 of 1
warning:   %y2 = bitcast [400 x double]* %y to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %r.addr1.i = bitcast double** %r.addr.i to i8*
  bail out on missing operand 1 of 1
warning:   %r.addr1.i = bitcast double** %r.addr.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %r.addr1.i18 = bitcast double** %r.addr.i15 to i8*
  bail out on missing operand 1 of 1
warning:   %r.addr1.i18 = bitcast double** %r.addr.i15 to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y.addr2.i = bitcast double** %y.addr.i16 to i8*
  bail out on missing operand 1 of 1
warning:   %y.addr2.i = bitcast double** %y.addr.i16 to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %z3.i = bitcast [400 x double]* %z.i to i8*
  bail out on missing operand 1 of 1
warning:   %z3.i = bitcast [400 x double]* %z.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %alpha4.i = bitcast double* %alpha.i to i8*
  bail out on missing operand 1 of 1
warning:   %alpha4.i = bitcast double* %alpha.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %beta5.i = bitcast double* %beta.i to i8*
  bail out on missing operand 1 of 1
warning:   %beta5.i = bitcast double* %beta.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %sum6.i = bitcast double* %sum.i to i8*
  bail out on missing operand 1 of 1
warning:   %sum6.i = bitcast double* %sum.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %y.addr1.i = bitcast double** %y.addr.i to i8*
  bail out on missing operand 1 of 1
warning:   %y.addr1.i = bitcast double** %y.addr.i to i8* not converted
[Fallback] attempt to wrap not supported operation:
  %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %131, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %136) #1
  Substituted operand number : 3 of 4
  mutated operands to:
  %call3.i = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %131, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), double %139) #1
+ /opt/llvm-4.0-d/bin/clang -S -o ./build/_tmp2.durbin_out.s ./build/_tmp1.durbin_out.ll -O3 -I utilities -I linear-algebra/solvers/durbin -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS
clang-4.0: warning: argument unused during compilation: '-I utilities' [-Wunused-command-line-argument]
clang-4.0: warning: argument unused during compilation: '-I linear-algebra/solvers/durbin' [-Wunused-command-line-argument]
./compile_everything.sh: line 24: kill: (-7091) - No such process
clang-4.0: error: unable to execute command: Interrupt: 2
clang-4.0: error: clang frontend command failed due to signal (use -v to see invocation)
clang version 4.0.0 (tags/RELEASE_400/final)
Target: x86_64-apple-darwin17.2.0
Thread model: posix
InstalledDir: /opt/llvm-4.0-d/bin
clang-4.0: note: diagnostic msg: PLEASE submit a bug report to http://llvm.org/bugs/ and include the crash backtrace, preprocessed source, and associated run script.
clang-4.0: note: diagnostic msg: Error generating preprocessed source(s) - no preprocessable inputs.
+ /opt/llvm-4.0-d/bin/clang -o ./build/durbin_out ./build/_tmp2.durbin_out.s -O3 -I utilities -I linear-algebra/solvers/durbin -DPOLYBENCH_TIME -DMEDIUM_DATASET -DDATA_TYPE_IS_DOUBLE -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_STACK_ARRAYS -lm utilities/polybench.c
clang-4.0: error: no such file or directory: './build/_tmp2.durbin_out.s'
+ '[' xy '!=' x ']'
+ exit 0
